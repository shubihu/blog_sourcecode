{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":1,"renderable":0},{"_id":"source/google505ffa55832f4df5.html","path":"google505ffa55832f4df5.html","modified":1,"renderable":0},{"_id":"themes/fluid/source/js/catch-the-cat.js","path":"js/catch-the-cat.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/aplayer.js","path":"js/aplayer.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/lantern.js","path":"js/lantern.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/phaser.min.js","path":"js/phaser.min.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/wanko.js","path":"js/wanko.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/js/xin.js","path":"js/xin.js","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/bar_line.html","path":"img/bar_line.html","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/dog.jpg","path":"img/dog.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/qrcode.jpg","path":"img/qrcode.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/pyecharts.jpg","path":"img/pyecharts.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/yahaha.jpg","path":"img/yahaha.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/yahaha0.jpg","path":"img/yahaha0.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/野犬.jpg","path":"img/野犬.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/yahaha1.jpg","path":"img/yahaha1.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/songs/home.mp3","path":"songs/home.mp3","modified":1,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/Sort.jpg","path":"img/article/Sort.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/dog.jpg","path":"img/article/dog.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/async-sync.png","path":"img/article/async-sync.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/gitssh.jpg","path":"img/article/gitssh.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/linux.png","path":"img/article/linux.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/mongodb.jpg","path":"img/article/mongodb.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/low_battery.jpg","path":"img/article/low_battery.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/monitor.png","path":"img/article/monitor.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/moyu.png","path":"img/article/moyu.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/python-hero.jpg","path":"img/article/python-hero.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/pyecharts.jpg","path":"img/article/pyecharts.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/pytorch.jpg","path":"img/article/pytorch.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/shotcuts.jpg","path":"img/article/shotcuts.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/ssr.jpg","path":"img/article/ssr.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/ssr.png","path":"img/article/ssr.png","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/troublenoshoot.jpg","path":"img/article/troublenoshoot.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/vip.jpg","path":"img/article/vip.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/zhiwang.jpg","path":"img/article/zhiwang.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/克洛格.jpg","path":"img/article/克洛格.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/wechat/核酸检测.jpg","path":"img/article/wechat/核酸检测.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/wechat/国务院.jpg","path":"img/article/wechat/国务院.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/0.jpg","path":"img/article/iphone/0.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/wechat/克洛格.jpg","path":"img/article/wechat/克洛格.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/4.jpg","path":"img/article/iphone/4.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/1.jpg","path":"img/article/iphone/1.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/2.jpg","path":"img/article/iphone/2.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/3.jpg","path":"img/article/iphone/3.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone/5.jpg","path":"img/article/iphone/5.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone1/2.jpg","path":"img/article/iphone1/2.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone1/1.jpg","path":"img/article/iphone1/1.jpg","modified":1,"renderable":1},{"_id":"themes/fluid/source/img/article/iphone1/3.jpg","path":"img/article/iphone1/3.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/README.md","hash":"3c1aa129416acef00326384291087b94c9a9eda0","modified":1630573809065},{"_id":"source/robots.txt","hash":"f65f14b9872f1c65ccc5a1b6de0560dc4cc58996","modified":1629855346731},{"_id":"source/google505ffa55832f4df5.html","hash":"8467e231edadaf124ba6a7be20e6fb451b1f882d","modified":1629798462217},{"_id":"source/_posts/Pyecharts不同颜色绘制正负柱状图.md","hash":"9ed33335282eaa50d756261a18f85702e3f08540","modified":1632725715660},{"_id":"source/_posts/MongoDB基础.md","hash":"8485bba581363830036560e249f086a5c1ddc3d2","modified":1635055846250},{"_id":"source/_posts/OneLineCommand.md","hash":"ffb7dda2ef974a0a7c36f4546f9c1d6297698354","modified":1629682578847},{"_id":"source/cat/index.md","hash":"706f16a82040e7cd1a670c1f1be2bb87992a79f3","modified":1629966084633},{"_id":"source/_posts/Python-Notes.md","hash":"4fa5017e9fcd298579c8a0fd7725eeaef9816292","modified":1629338575001},{"_id":"source/_posts/Pytorch-learning.md","hash":"8b3ebdafcb8cd0aa78ba9b5f7a15ce799affe8e9","modified":1631778673890},{"_id":"source/_posts/PythonSortAlgorithm.md","hash":"39eb63ce69a51db8d2d4ee9830953d6433a952b7","modified":1629338604277},{"_id":"source/_posts/Python_异步.md","hash":"802f1754f09f3d46a298f55a242551866b194505","modified":1629338545828},{"_id":"source/_posts/TroubleNoShoot.md","hash":"393600f07286d36a9fb1243dfe9a4ef6560fae47","modified":1632979896260},{"_id":"source/_posts/WeAreSVIP.md","hash":"c6845b6b16a69555f05916f8682864b1e7280586","modified":1629452038723},{"_id":"source/_posts/iPhone.md","hash":"99ad521863fe7c6131d69b2f019bc36e4d551fb8","modified":1631252701505},{"_id":"source/_posts/iPhone快捷指令自动打开低电量模式.md","hash":"19abc1366fd3eb206139e5ac2578d060f8314df7","modified":1632730087803},{"_id":"source/_posts/核酸检测机构地图微信小程序开发.md","hash":"a7079e036d9d9ec8502d44300b6c20fa14a98a2c","modified":1634710950100},{"_id":"source/_posts/水一篇.md","hash":"924c7c27129149d6b13e852962c6c3e359a4b35a","modified":1629699857855},{"_id":"source/_posts/科学上网.md","hash":"35c9d9d807eab4e65301bc9cec53bfdce7c177da","modified":1636256223219},{"_id":"source/_posts/python监控.md","hash":"2063c08336053844535fc63e95644c9d6c14f533","modified":1631155765104},{"_id":"source/_posts/知网羊毛.md","hash":"ec68c7793aaa2a922daaef34430b1bf15a803a01","modified":1629859049989},{"_id":"source/about/index.md","hash":"2aa59c5a7c47313da7b29b71fd7d763e9fbc0c0a","modified":1631156896268},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628675656801},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1628675656862},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1628675656063},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1628675656065},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1628675656068},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1628675656125},{"_id":"themes/fluid/LICENSE","hash":"df5b54be535593d5442cebafbea34eb9bd69b987","modified":1628675656128},{"_id":"themes/fluid/README.md","hash":"997632c14fab10f20a54779830650a2c8fe397f1","modified":1628675656131},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1628675656133},{"_id":"themes/fluid/gulpfile.js","hash":"a7c87a83becf7080bddd14e81a6f09ce8c3df109","modified":1628675656140},{"_id":"themes/fluid/_config.yml","hash":"b2bcd8185f6c804335069387a87d6f7e0527de72","modified":1629797214762},{"_id":"themes/fluid/package.json","hash":"45b68110fcaf5819452f45ecd77282f97d1386f5","modified":1628675656441},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1628675656158},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1628675656151},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1628675656145},{"_id":"themes/fluid/languages/eo.yml","hash":"a0c7984495d4f2d33b64adfa33adebbf768a5ac3","modified":1628675656154},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1628675656162},{"_id":"themes/fluid/languages/zh-TW.yml","hash":"1a6d415446da11dee5c5f400e7d67544fbe743ea","modified":1628675656167},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1628675656172},{"_id":"themes/fluid/layout/about.ejs","hash":"ad6fed7b646d3ca961db83db0fbe020e3a5d42ad","modified":1628675656364},{"_id":"themes/fluid/layout/categories.ejs","hash":"6cbd88a2ef9dd2198d72ccc1899c4966ac5f49f9","modified":1628675656373},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1628675656369},{"_id":"themes/fluid/layout/index.ejs","hash":"a154785aef120988d29409847977f24069d3a3d5","modified":1628675656384},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1628675656378},{"_id":"themes/fluid/layout/page.ejs","hash":"1014b901d396f4fc445cb1ffc938d5380d894d71","modified":1628675656400},{"_id":"themes/fluid/layout/links.ejs","hash":"19c6db0ccebc8f59fa4ef9567a066b33223eccd6","modified":1628675656395},{"_id":"themes/fluid/layout/layout.ejs","hash":"9d6ff8772bf54d7458ae4e846e5a2d1f2921b8a7","modified":1628675656389},{"_id":"themes/fluid/layout/post.ejs","hash":"79e3679a7069351a6172c281b9d09f59d7580484","modified":1628675656413},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1628675656419},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1628675656437},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"c134dd57ffd269b93402ccfffe7dbe0f0b583bec","modified":1628675656091},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"af977ed0792508bb0766ea8afe82d34ef1e8fb3c","modified":1628675656086},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"16d33eb89ecf90f4046720fde5395d972c7ba1fd","modified":1628675656080},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1628675656107},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"ed08574b196447376dd74411cca664ac9227a5d4","modified":1628675656096},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1628675656101},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1628675656527},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1628675656115},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1628675656521},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"64d521c9c5b61d3a4852c74894fb574082dc7009","modified":1628675656122},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"39e63b3e1502803c9e8ea0c44ea662a7bbe15744","modified":1628675656269},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1628675656182},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"cdcb607f1104543a42beda647f3c9cf0f3d11623","modified":1628675656264},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"6ec30a9dd56341590af07f4227324f619025c109","modified":1628675656188},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"0f38a2c238169edcb63fc46c23bfc529ff3859b7","modified":1628675656286},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"248ecd01aead6e07ac1904a7b7c45395a922bcc7","modified":1628675656274},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"245f49aad0e4124b52aa82d981281ad9c871f1f8","modified":1628675656281},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1628675656336},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"b3d93135d9ae74f006da31ec54343308bbd77cb5","modified":1628675656343},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1628675656360},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1628675656349},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1628675656354},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"6c37e9f1ac1d6d00b3c32794e02e244dba942cd9","modified":1628675656513},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1628675656507},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"606131cb807846bf43776a9073fcc1473d359ec9","modified":1628675656536},{"_id":"themes/fluid/scripts/events/index.js","hash":"44faef3e77ab08b91e4c5c6f1cd9087a9faff443","modified":1628675656452},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1628675656541},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1628675656546},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1628675656551},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1628675656556},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1628675656564},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1628675656569},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1628675656579},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1628675656574},{"_id":"themes/fluid/scripts/tags/note.js","hash":"f52f3a005b41f48b4da274ac64710177c8d4502f","modified":1628675656589},{"_id":"themes/fluid/scripts/tags/mermaid.js","hash":"75160561e1ef3603b6d2ad2938464ab1cb77fd38","modified":1628675656584},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1628675656597},{"_id":"themes/fluid/scripts/utils/object.js","hash":"649457796374c79e49a19bd541e4ad8e78fe8995","modified":1628675656603},{"_id":"themes/fluid/source/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1628675656939},{"_id":"themes/fluid/source/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1628675656945},{"_id":"themes/fluid/source/js/aplayer.js","hash":"17d5ea9af214e699e45fea673b9022770b383792","modified":1629798081369},{"_id":"themes/fluid/source/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1628675656951},{"_id":"themes/fluid/source/js/lantern.js","hash":"f02eb009d4c80f597e58320453e1998afdd1d76f","modified":1632713404531},{"_id":"themes/fluid/source/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1628675656956},{"_id":"themes/fluid/source/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1628675656961},{"_id":"themes/fluid/source/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1628675656967},{"_id":"themes/fluid/source/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1628675656972},{"_id":"themes/fluid/source/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1628675656979},{"_id":"themes/fluid/source/js/wanko.js","hash":"e034398169bbc0c65ec2d4ba8e781c8a7a9fcc4c","modified":1629882091862},{"_id":"themes/fluid/source/js/xin.js","hash":"54197cee99fa2570a84d51104088a7c03342f241","modified":1629710574454},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1628675656899},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1628675656894},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1628675656907},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1628675656915},{"_id":"themes/fluid/source/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1628675656921},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1628675656926},{"_id":"themes/fluid/source/img/dog.jpg","hash":"a2b6c7ab528bf4fe83d5095cb73e17db02a272ff","modified":1631157465141},{"_id":"themes/fluid/source/img/qrcode.jpg","hash":"60bf44b0140d70b46b57dd2ba89bbd3fbdb8e2df","modified":1628750630501},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1628675656931},{"_id":"themes/fluid/source/img/pyecharts.jpg","hash":"2338abab189eef52b1b5be4ac2ab9b730ce9cdc1","modified":1632711028337},{"_id":"themes/fluid/source/img/yahaha.jpg","hash":"9e9db57192c8f9d43673234db39c2e20eab98db7","modified":1631157550805},{"_id":"themes/fluid/source/img/野犬.jpg","hash":"47f2e6696af8c696f28ffb07ec68f90ad926013e","modified":1631156152770},{"_id":"themes/fluid/source/img/yahaha1.jpg","hash":"9e9db57192c8f9d43673234db39c2e20eab98db7","modified":1631157550805},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1628675657003},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1628675656313},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1628675656298},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1628675656307},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1628675656328},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"4c2d39ce816b8a6dcd6b53113c8695f8bd650a23","modified":1628675656320},{"_id":"themes/fluid/layout/_partial/comments/cusdis.ejs","hash":"5f9dc012be27040bbe874d0c093c0d53958cc987","modified":1628675656207},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"2264758fed57542a7389c7aa9f00f1aefa17eb87","modified":1628675656226},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"725a1fe23c672fca87edc57739b748c3adf705da","modified":1628675656199},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"fb4502fc9204284f8b4e8dabde8477d478e826e5","modified":1628675656213},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"d4e9532feeb02aed61bd15eda536b5b631454dac","modified":1628675656233},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"843bc141a4545eb20d1c92fb63c85d459b4271ec","modified":1628675656220},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"ffe08e76c9ebd4fc27715b8a60f385b3f10d0348","modified":1628675656239},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"e1ed6530dfd7310f91060a75766a93ac3c39be3a","modified":1628675656246},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1628675656618},{"_id":"themes/fluid/layout/_partial/comments/waline.ejs","hash":"5b61661fbc65752f54f99402077dbb03044149a1","modified":1628675656258},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"9238063c5e2928bb6fce2b99cd25ad85e78c4d1c","modified":1628675656252},{"_id":"themes/fluid/scripts/events/lib/compatible-configs.js","hash":"b5fd5a2d9c463eb59318af0f47c591c485b6ad27","modified":1628675656466},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1628675656475},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"deed966f38cf0c8dee3f72e5b1f2e878510db0e1","modified":1628675656487},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"28e186c32576eb3d5d923273471a001c47fe8071","modified":1628675656481},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"a2d08e3b9f98b6371b2e64d664f079c99571494b","modified":1628675656493},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"c1db1a4f9eca6e36b660530641e3a4fb6a30c8d8","modified":1628675656499},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1628675656628},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1629884083810},{"_id":"themes/fluid/source/img/article/Sort.jpg","hash":"2bac68dcf6facce0bc52b6868b12d7a628f7febf","modified":1629337835828},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"26d29403d8ecb0b533e63bde3ca73b2c91f171ff","modified":1628675656888},{"_id":"themes/fluid/source/img/article/async-sync.png","hash":"d8e348513cbf88c134cd920e8f4284978c0beebd","modified":1629337805834},{"_id":"themes/fluid/source/img/article/linux.png","hash":"d180a75b9197134ece9d3568e70948b77dff7178","modified":1629338454484},{"_id":"themes/fluid/source/img/article/gitssh.jpg","hash":"43163d6f034ccc6f46eaf9594e605b48223066fa","modified":1629426205359},{"_id":"themes/fluid/source/img/article/low_battery.jpg","hash":"0250ab0b825359103382d04dae59217af7a8f5de","modified":1632729906978},{"_id":"themes/fluid/source/img/article/mongodb.jpg","hash":"7aa0877fb9399a1425508b8f0c8bc6bf2655c651","modified":1634522682301},{"_id":"themes/fluid/source/img/article/monitor.png","hash":"568bad1fab3c30c8176867ae6a8379b3060b69a6","modified":1630562715744},{"_id":"themes/fluid/source/img/article/python-hero.jpg","hash":"ba402a9e65dec700dbaf8c4aa6b7d810fde87459","modified":1629337765353},{"_id":"themes/fluid/source/img/article/pyecharts.jpg","hash":"8d2102c48b6bfdf9dc4bc6e0cbbd73931b60bfb4","modified":1632723054931},{"_id":"themes/fluid/source/img/article/moyu.png","hash":"830f3a07de95a201ece4cef931171300ce958ae2","modified":1629446033841},{"_id":"themes/fluid/source/img/article/pytorch.jpg","hash":"7a41706c9e8170e28ca72e77e5e5cb257bc9db26","modified":1631773623760},{"_id":"themes/fluid/source/img/article/ssr.png","hash":"38e422bada6de0a4e6ec8083fbde38bd285021b7","modified":1636250638579},{"_id":"themes/fluid/source/img/article/troublenoshoot.jpg","hash":"894aed32e1b7a14021c89ea18013fb99a711aa9a","modified":1632723247688},{"_id":"themes/fluid/source/img/article/vip.jpg","hash":"df8ddee16b0940a4b66c7ae5cc5c8bd479cdd093","modified":1629450564929},{"_id":"themes/fluid/source/img/article/克洛格.jpg","hash":"5d108513de5f2ab9e97137f315e99db88f707df8","modified":1634709769732},{"_id":"themes/fluid/source/img/article/zhiwang.jpg","hash":"f7c4fd6b1b31362b1aefe336efac9b09f592305c","modified":1629338251537},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"dabd87267d60240c0daea0f35a46f30ee1b2337a","modified":1628675656753},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1628675656647},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"32fb938d72b2d86159cb315a98b086bd17fa4415","modified":1628675656760},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"d547ab0b91f84eb0acd0bc0c5d716ce17c30361a","modified":1628675656767},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1628675656995},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"4c6fffc6d4a3b8830931800ee7da99dccf1be36e","modified":1628675656780},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1628675656773},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1628675656659},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1628675656792},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"ad7dcc8a060d94d3c44ca5e0788a24ca38be0f79","modified":1628675656813},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"3a6b4f8a29648d9d2c1e99b52a7b42df3f15cf62","modified":1628675656841},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1628675656827},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"766fcf017deb4c8b0c260ac4c8d2e3489407ad89","modified":1628675656850},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1628675656872},{"_id":"themes/fluid/source/img/article/wechat/国务院.jpg","hash":"ce878f931b029a0d1c4aa3c53ca6496c51c93a99","modified":1634711239536},{"_id":"themes/fluid/source/img/article/wechat/克洛格.jpg","hash":"5d108513de5f2ab9e97137f315e99db88f707df8","modified":1634709769732},{"_id":"themes/fluid/source/img/article/iphone/2.jpg","hash":"fd60974357c4e10edaa01fe8b3bb3b21eab6876a","modified":1631242084957},{"_id":"themes/fluid/source/img/article/iphone/3.jpg","hash":"0bf9323afd95b58665db8db940fc3a20b49f50b8","modified":1631242107005},{"_id":"themes/fluid/source/img/article/iphone/5.jpg","hash":"d9f7a6fa24a185b14cd5eb3c836d4d5b2bb4a3c2","modified":1631242142702},{"_id":"themes/fluid/source/img/article/iphone1/3.jpg","hash":"8529d3a9592a204a60f077a8535879cd63f9b9dd","modified":1632729530986},{"_id":"themes/fluid/source/img/article/iphone1/2.jpg","hash":"83ea3d8f2c2f5af84951115762c86e06ed788957","modified":1632729515858},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"9f932ca3f9625c13aa5353f58319881e62c0c653","modified":1628675656701},{"_id":"themes/fluid/source/img/article/iphone1/1.jpg","hash":"933c95678e78c5e28d2e2bc90dba49bd0d06246d","modified":1632729500502},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"35539a1ce8476e75515015a06d01ec66e4af6834","modified":1628675656708},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"30f8fab95a5214d79df0ccc02b937df8bd885676","modified":1628675656682},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1628675656693},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1628675656716},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"d8011325756eb6e4ce619b3e7b4d6d80c2de8a57","modified":1628675656723},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"55e10a6965462f8f62f85e75fd5e143af02a4b44","modified":1628675656739},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1628675656731},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1628675656746},{"_id":"themes/fluid/source/js/catch-the-cat.js","hash":"c8be5180dd2c7f287b8335cbdc63b87dbbc9b867","modified":1632980824488},{"_id":"themes/fluid/source/img/bar_line.html","hash":"b2d06288f87a2091e36dd6336c382ba860350903","modified":1632724761795},{"_id":"themes/fluid/source/img/article/dog.jpg","hash":"60250867289df9a5a9446ab88f8c4823511d9954","modified":1631067926963},{"_id":"themes/fluid/source/img/article/ssr.jpg","hash":"994a98e0812bd7277563f173080ea0a732a52a9d","modified":1636203648355},{"_id":"themes/fluid/source/img/article/shotcuts.jpg","hash":"f12cdf046c141d26c77e2d49d649bedbc92bf5b0","modified":1631241838110},{"_id":"themes/fluid/source/img/article/iphone/4.jpg","hash":"6bff370ea5d96333e79f43893aa11595accb4495","modified":1631242130221},{"_id":"themes/fluid/source/img/yahaha0.jpg","hash":"099df0228478712645da98ee7118c4b4582b65a7","modified":1628733342933},{"_id":"themes/fluid/source/img/article/iphone/0.jpg","hash":"f3f7feb5f68fcfbbee159ea6d5860393b0b7632a","modified":1631241532205},{"_id":"themes/fluid/source/img/article/iphone/1.jpg","hash":"e8ca84b996f3e825f9559fee3bc00f5cc2bb4f38","modified":1631241611801},{"_id":"themes/fluid/source/img/article/wechat/核酸检测.jpg","hash":"e119fe49ac7ac7dd106a8bfe276aca66b69a03d3","modified":1634709021630},{"_id":"themes/fluid/source/js/phaser.min.js","hash":"63848923ddf02fe01fabb6eee30b043503f222ac","modified":1568257100000},{"_id":"themes/fluid/source/songs/home.mp3","hash":"ed85143df1819895b7703be149afdaa02047f547","modified":1629440039559},{"_id":"public/local-search.xml","hash":"ddcf893123672f888bcb2d52e855f8f5f68e2fb3","modified":1636256287709},{"_id":"public/sitemap.xml","hash":"5e9e5177455415caaf89d384e841983cb5a92990","modified":1636256287709},{"_id":"public/cat/index.html","hash":"479f86c97c5df5130a4516e70d3f952aeb93580b","modified":1636256287709},{"_id":"public/about/index.html","hash":"85997e0b361ddbf27fab9885aa551615e1ff7de0","modified":1636256287709},{"_id":"public/2021/11/07/科学上网/index.html","hash":"77b4b619b16cdf00b956e504410cf79b6fe2f6f5","modified":1636256287709},{"_id":"public/2021/08/20/水一篇/index.html","hash":"2023ed09b9ed92eb5245e41ef4e0fd714dbd3335","modified":1636256287709},{"_id":"public/archives/page/2/index.html","hash":"0cd2a2d1f2bf9472e9f7074e122957172c557cdd","modified":1636256287709},{"_id":"public/archives/index.html","hash":"1cbbafb038288b1d81a6bd2bc390fa9be2da0595","modified":1636256287709},{"_id":"public/archives/2021/02/index.html","hash":"a8bb277b4004fe47acc3fc4ce9fe1e42939a73ea","modified":1636256287709},{"_id":"public/archives/2021/09/index.html","hash":"db2e1771328bcbff8da59e19f78b723d3bda96f9","modified":1636256287709},{"_id":"public/archives/2021/10/index.html","hash":"e9a0cd3e7bcd1e755f4f1d030903fbc8e169ba7e","modified":1636256287709},{"_id":"public/archives/2021/08/index.html","hash":"f3d681f07aff8bcc266b4db4ff83aa9390128bb3","modified":1636256287709},{"_id":"public/archives/2021/11/index.html","hash":"f3fe9774a423e26be14c831e024a32ca4f3587cc","modified":1636256287709},{"_id":"public/archives/2021/page/2/index.html","hash":"13ac993865c9f178c2a0d84447954dd8174a66f3","modified":1636256287709},{"_id":"public/archives/2021/index.html","hash":"ff71eb6ba58f67e1ed06c0100d1404549dff4ac1","modified":1636256287709},{"_id":"public/categories/TroubleShoot/index.html","hash":"912aec9c4bbba3bf9e3b0f303e9c627ac9a9e4c8","modified":1636256287709},{"_id":"public/categories/数据库/index.html","hash":"b7214b6a977e6ba311b728236ffc77b3e13bab9a","modified":1636256287709},{"_id":"public/categories/Python/index.html","hash":"f416ac1ce4cba0a7d10403c2b5ad68952d214910","modified":1636256287709},{"_id":"public/categories/Linux/index.html","hash":"9fad671410b10407ea8b63e21a1038bf45160d23","modified":1636256287709},{"_id":"public/tags/Linux/index.html","hash":"0b62ff2839ab56a41b8ffaa5fce1ba9ebf066a0e","modified":1636256287709},{"_id":"public/categories/iPhone/index.html","hash":"21b7f0d2c132fe1cfba3c37d7a46698626e2cffb","modified":1636256287709},{"_id":"public/categories/Working/index.html","hash":"25ab90f64c845280ab15b8dbea0f1756748ff424","modified":1636256287709},{"_id":"public/categories/微信小程序/index.html","hash":"1e0e7bde3627bcf95c9c10a883cbcf5d993a909a","modified":1636256287709},{"_id":"public/tags/Pytorch/index.html","hash":"641516a89223cc9381f426e4847c7529dcb8780f","modified":1636256287709},{"_id":"public/tags/Python/index.html","hash":"792a53fe8f41ddf703c65c01af6fe8d03835ed1a","modified":1636256287709},{"_id":"public/tags/Pyecharts/index.html","hash":"7e95ac0ecca0a57217f29f1cba58a7b4c599002d","modified":1636256287709},{"_id":"public/tags/TroubleShoot/index.html","hash":"106a27c0c920090447debda964c16466e3a80d60","modified":1636256287709},{"_id":"public/tags/核酸检测/index.html","hash":"c4c74c52b5cca45e627ede12cbb5f3a461b3db74","modified":1636256287709},{"_id":"public/tags/划水摸鱼/index.html","hash":"d7c20bfdf8336c6a024a141fcce84052b97d51c9","modified":1636256287709},{"_id":"public/tags/玩/index.html","hash":"dba0d388e47408e4ee37706b27326eec4c90d3a2","modified":1636256287709},{"_id":"public/tags/薅羊毛/index.html","hash":"4f0f099d12c32c446c044dab0a1756e3718a4ce6","modified":1636256287709},{"_id":"public/tags/科学上网/index.html","hash":"6f4400154a51361410cecadac5872ce4e35289f6","modified":1636256287709},{"_id":"public/tags/MongoDB/index.html","hash":"74b691e007c876346630e693342fe64ffc465c7c","modified":1636256287709},{"_id":"public/404.html","hash":"10a47603a1713d18865855ed49827081070785a3","modified":1636256287709},{"_id":"public/tags/index.html","hash":"216abcb1cd10f6da3e0b0d06cf0a3354234ebed3","modified":1636256287709},{"_id":"public/links/index.html","hash":"cdd61fd1a196c1bb32a94862a2d826ce9b8a09ed","modified":1636256287709},{"_id":"public/2021/09/27/iPhone快捷指令自动打开低电量模式/index.html","hash":"f32dce7dc8d7d0e67152f8ee13f2b372c530c814","modified":1636256287709},{"_id":"public/2021/10/18/MongoDB基础/index.html","hash":"e4a949cdc163988aeb8db538a51d190d770e7a0b","modified":1636256287709},{"_id":"public/2021/09/27/Pyecharts不同颜色绘制正负柱状图/index.html","hash":"31123f2a91ae04c779a6264b6a3420c460cd23f2","modified":1636256287709},{"_id":"public/2021/09/10/iPhone/index.html","hash":"9e78fb05789431c6ae769c1524acda0b64400293","modified":1636256287709},{"_id":"public/2021/08/20/WeAreSVIP/index.html","hash":"892d692bd0a8edce669bfcb69493619da252240b","modified":1636256287709},{"_id":"public/2021/09/16/Pytorch-learning/index.html","hash":"6757e5ff6ce842a4d69a740611cbf1d23b0732df","modified":1636256287709},{"_id":"public/2021/08/16/PythonSortAlgorithm/index.html","hash":"e787a3d15345bb03e7d1cc4be426b4c82b3328da","modified":1636256287709},{"_id":"public/2021/08/20/TroubleNoShoot/index.html","hash":"1ee3405d82f0bb0a28f2099ffe66ef57bf28ac0f","modified":1636256287709},{"_id":"public/2021/08/13/OneLineCommand/index.html","hash":"7973268b1701eefc475c64696d3baf17298d4f3d","modified":1636256287709},{"_id":"public/2021/08/12/知网羊毛/index.html","hash":"37ed7aa949b5e61fc9bf620f0d616d8ef1ccfaa6","modified":1636256287709},{"_id":"public/2021/08/11/Python_异步/index.html","hash":"e9417124385761409d60105207e7037200ff45f9","modified":1636256287709},{"_id":"public/2021/09/02/python监控/index.html","hash":"ce5bbfd00b334ddc9119b21418129f544070cdbc","modified":1636256287709},{"_id":"public/2021/02/02/Python-Notes/index.html","hash":"1761b2ad7e0057e8f84ad13ef0935acfa54677b9","modified":1636256287709},{"_id":"public/2021/10/20/核酸检测机构地图微信小程序开发/index.html","hash":"e7f0c8bf9c560215435f2a60e20f54218718d8cd","modified":1636256287709},{"_id":"public/page/2/index.html","hash":"e8c7caf7668eedf729b08e40136f7cfe645c4ecc","modified":1636256287709},{"_id":"public/index.html","hash":"33cb81237b7ae1af21aa942f815faa08a743a417","modified":1636256287709},{"_id":"public/categories/index.html","hash":"58b61e3d43c8a4abb05fa0a58f1fa311b7567dfa","modified":1636256287709},{"_id":"public/img/favicon.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1636256287709},{"_id":"public/robots.txt","hash":"f65f14b9872f1c65ccc5a1b6de0560dc4cc58996","modified":1636256287709},{"_id":"public/google505ffa55832f4df5.html","hash":"8467e231edadaf124ba6a7be20e6fb451b1f882d","modified":1636256287709},{"_id":"public/README.md","hash":"3c1aa129416acef00326384291087b94c9a9eda0","modified":1636256287709},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1636256287709},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1636256287709},{"_id":"public/img/dog.jpg","hash":"a2b6c7ab528bf4fe83d5095cb73e17db02a272ff","modified":1636256287709},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1636256287709},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1636256287709},{"_id":"public/img/qrcode.jpg","hash":"60bf44b0140d70b46b57dd2ba89bbd3fbdb8e2df","modified":1636256287709},{"_id":"public/img/yahaha.jpg","hash":"9e9db57192c8f9d43673234db39c2e20eab98db7","modified":1636256287709},{"_id":"public/img/yahaha1.jpg","hash":"9e9db57192c8f9d43673234db39c2e20eab98db7","modified":1636256287709},{"_id":"public/img/pyecharts.jpg","hash":"2338abab189eef52b1b5be4ac2ab9b730ce9cdc1","modified":1636256287709},{"_id":"public/img/野犬.jpg","hash":"47f2e6696af8c696f28ffb07ec68f90ad926013e","modified":1636256287709},{"_id":"public/img/article/Sort.jpg","hash":"2bac68dcf6facce0bc52b6868b12d7a628f7febf","modified":1636256287709},{"_id":"public/img/article/async-sync.png","hash":"d8e348513cbf88c134cd920e8f4284978c0beebd","modified":1636256287709},{"_id":"public/img/article/linux.png","hash":"d180a75b9197134ece9d3568e70948b77dff7178","modified":1636256287709},{"_id":"public/img/article/gitssh.jpg","hash":"43163d6f034ccc6f46eaf9594e605b48223066fa","modified":1636256287709},{"_id":"public/img/article/mongodb.jpg","hash":"7aa0877fb9399a1425508b8f0c8bc6bf2655c651","modified":1636256287709},{"_id":"public/img/article/moyu.png","hash":"830f3a07de95a201ece4cef931171300ce958ae2","modified":1636256287709},{"_id":"public/img/article/python-hero.jpg","hash":"ba402a9e65dec700dbaf8c4aa6b7d810fde87459","modified":1636256287709},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1636256287709},{"_id":"public/img/article/pyecharts.jpg","hash":"8d2102c48b6bfdf9dc4bc6e0cbbd73931b60bfb4","modified":1636256287709},{"_id":"public/img/article/pytorch.jpg","hash":"7a41706c9e8170e28ca72e77e5e5cb257bc9db26","modified":1636256287709},{"_id":"public/img/article/low_battery.jpg","hash":"0250ab0b825359103382d04dae59217af7a8f5de","modified":1636256287709},{"_id":"public/img/article/ssr.png","hash":"38e422bada6de0a4e6ec8083fbde38bd285021b7","modified":1636256287709},{"_id":"public/img/article/troublenoshoot.jpg","hash":"894aed32e1b7a14021c89ea18013fb99a711aa9a","modified":1636256287709},{"_id":"public/img/article/克洛格.jpg","hash":"5d108513de5f2ab9e97137f315e99db88f707df8","modified":1636256287709},{"_id":"public/img/article/zhiwang.jpg","hash":"f7c4fd6b1b31362b1aefe336efac9b09f592305c","modified":1636256287709},{"_id":"public/img/article/wechat/国务院.jpg","hash":"ce878f931b029a0d1c4aa3c53ca6496c51c93a99","modified":1636256287709},{"_id":"public/img/article/vip.jpg","hash":"df8ddee16b0940a4b66c7ae5cc5c8bd479cdd093","modified":1636256287709},{"_id":"public/img/article/wechat/克洛格.jpg","hash":"5d108513de5f2ab9e97137f315e99db88f707df8","modified":1636256287709},{"_id":"public/img/article/iphone/3.jpg","hash":"0bf9323afd95b58665db8db940fc3a20b49f50b8","modified":1636256287709},{"_id":"public/img/article/iphone/2.jpg","hash":"fd60974357c4e10edaa01fe8b3bb3b21eab6876a","modified":1636256287709},{"_id":"public/img/article/monitor.png","hash":"568bad1fab3c30c8176867ae6a8379b3060b69a6","modified":1636256287709},{"_id":"public/img/article/iphone1/3.jpg","hash":"8529d3a9592a204a60f077a8535879cd63f9b9dd","modified":1636256287709},{"_id":"public/img/article/iphone1/1.jpg","hash":"933c95678e78c5e28d2e2bc90dba49bd0d06246d","modified":1636256287709},{"_id":"public/img/article/iphone/5.jpg","hash":"d9f7a6fa24a185b14cd5eb3c836d4d5b2bb4a3c2","modified":1636256287709},{"_id":"public/img/article/iphone1/2.jpg","hash":"83ea3d8f2c2f5af84951115762c86e06ed788957","modified":1636256287709},{"_id":"public/js/events.js","hash":"4b9d2676c9544db9cc40a8c7d18456792299ba86","modified":1636256287709},{"_id":"public/js/color-schema.js","hash":"cc712fc71bf33d561e1ba74fe1d52d2353092171","modified":1636256287709},{"_id":"public/js/lantern.js","hash":"f9f43180d04df7a183b4336adfb2d0bf297bb919","modified":1636256287709},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1636256287709},{"_id":"public/js/leancloud.js","hash":"b7985ac3cff9ee2722db43ee6b32b5484c43f5f2","modified":1636256287709},{"_id":"public/js/plugins.js","hash":"342b1fbc30d1465687ce389a4e07f967266d5d86","modified":1636256287709},{"_id":"public/js/local-search.js","hash":"bf00f5786bb8de7241f635455b67243d26656222","modified":1636256287709},{"_id":"public/js/wanko.js","hash":"e034398169bbc0c65ec2d4ba8e781c8a7a9fcc4c","modified":1636256287709},{"_id":"public/js/utils.js","hash":"9d492fab9c26311ad0ab553c890e09b9575a76f2","modified":1636256287709},{"_id":"public/js/aplayer.js","hash":"17d5ea9af214e699e45fea673b9022770b383792","modified":1636256287709},{"_id":"public/js/boot.js","hash":"3de344ee619da989f6dccf7c2ae459fe91075983","modified":1636256287709},{"_id":"public/js/xin.js","hash":"54197cee99fa2570a84d51104088a7c03342f241","modified":1636256287709},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1636256287709},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1636256287709},{"_id":"public/js/catch-the-cat.js","hash":"c8be5180dd2c7f287b8335cbdc63b87dbbc9b867","modified":1636256287709},{"_id":"public/css/main.css","hash":"be9a0652de06d61fa26f4b4128b29bcc5a4a0ad7","modified":1636256287709},{"_id":"public/img/bar_line.html","hash":"5d726acb5c9be7228e15d26b7d6257d695894c2f","modified":1636256287709},{"_id":"public/img/article/dog.jpg","hash":"60250867289df9a5a9446ab88f8c4823511d9954","modified":1636256287709},{"_id":"public/img/article/shotcuts.jpg","hash":"f12cdf046c141d26c77e2d49d649bedbc92bf5b0","modified":1636256287709},{"_id":"public/img/article/ssr.jpg","hash":"994a98e0812bd7277563f173080ea0a732a52a9d","modified":1636256287709},{"_id":"public/img/article/iphone/4.jpg","hash":"6bff370ea5d96333e79f43893aa11595accb4495","modified":1636256287709},{"_id":"public/js/phaser.min.js","hash":"63848923ddf02fe01fabb6eee30b043503f222ac","modified":1636256287709},{"_id":"public/img/yahaha0.jpg","hash":"099df0228478712645da98ee7118c4b4582b65a7","modified":1636256287709},{"_id":"public/img/article/iphone/0.jpg","hash":"f3f7feb5f68fcfbbee159ea6d5860393b0b7632a","modified":1636256287709},{"_id":"public/img/article/iphone/1.jpg","hash":"e8ca84b996f3e825f9559fee3bc00f5cc2bb4f38","modified":1636256287709},{"_id":"public/img/article/wechat/核酸检测.jpg","hash":"e119fe49ac7ac7dd106a8bfe276aca66b69a03d3","modified":1636256287709},{"_id":"public/songs/home.mp3","hash":"ed85143df1819895b7703be149afdaa02047f547","modified":1636256287709}],"Category":[{"name":"Linux","_id":"ckvoor91p0004cmso2txv4nbb"},{"name":"数据库","_id":"ckvoor91x0009cmsoague2pr6"},{"name":"Python","_id":"ckvoor923000fcmsogyp23uzq"},{"name":"TroubleShoot","_id":"ckvoor92w0018cmso2jxg8zyo"},{"name":"iPhone","_id":"ckvoor93a001gcmso5i2r9xx3"},{"name":"微信小程序","_id":"ckvoor93h001ocmso08mdcgzw"},{"name":"Working","_id":"ckvoor93l001tcmsodnmlgs2u"}],"Data":[],"Page":[{"title":"撸猫摸鱼","date":"2021-08-25T07:46:19.000Z","_content":"<html>\n <head> \n  <meta charset=\"UTF-8\" /> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> \n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /> \n  <title>圈小猫游戏</title>\n </head> \n <body>\n  <div align=\"center\">\n   <p align=\"left\"></p>\n   <font size=\"5\" face=\"黑体\">圈小猫游戏</font>\n   <p></p>\n   <script src=\"/js/phaser.min.js\"></script>\n   <script src=\"/js/catch-the-cat.js\"></script>\n   <div id=\"catch-the-cat\"></div>\n   <script>window.game=new CatchTheCatGame({w:12,h:12,r:20,backgroundColor:16777215,parent:\"catch-the-cat\",statusBarAlign:\"center\",credit:\"梳碧湖\"})</script>\n  </div>\n<!--   <div class=\"style6\" align=\"center\">\n   <p class=\"style7\"></p> -->\n<!--    <p class=\"style8\"><span class=\"style10\"><img src=\"/public/static/plugins/maogame/picture/home.png\" width=\"30\" height=\"30\" alt=\"点击返回主页\" /> <a href=\"/\" title=\"返回首页\" target=\"_new\">返回首页</a></span></p> -->\n </body>\n</html>\n\n","source":"cat/index.md","raw":"---\ntitle: 撸猫摸鱼\ndate: 2021-08-25 15:46:19\n---\n<html>\n <head> \n  <meta charset=\"UTF-8\" /> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> \n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /> \n  <title>圈小猫游戏</title>\n </head> \n <body>\n  <div align=\"center\">\n   <p align=\"left\"></p>\n   <font size=\"5\" face=\"黑体\">圈小猫游戏</font>\n   <p></p>\n   <script src=\"/js/phaser.min.js\"></script>\n   <script src=\"/js/catch-the-cat.js\"></script>\n   <div id=\"catch-the-cat\"></div>\n   <script>window.game=new CatchTheCatGame({w:12,h:12,r:20,backgroundColor:16777215,parent:\"catch-the-cat\",statusBarAlign:\"center\",credit:\"梳碧湖\"})</script>\n  </div>\n<!--   <div class=\"style6\" align=\"center\">\n   <p class=\"style7\"></p> -->\n<!--    <p class=\"style8\"><span class=\"style10\"><img src=\"/public/static/plugins/maogame/picture/home.png\" width=\"30\" height=\"30\" alt=\"点击返回主页\" /> <a href=\"/\" title=\"返回首页\" target=\"_new\">返回首页</a></span></p> -->\n </body>\n</html>\n\n","updated":"2021-08-26T08:21:24.633Z","path":"cat/index.html","comments":1,"layout":"page","_id":"ckvoor90r0000cmsohrhz8o0l","content":"<html>\n <head> \n  <meta charset=\"UTF-8\" /> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> \n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /> \n  <title>圈小猫游戏</title>\n </head> \n <body>\n  <div align=\"center\">\n   <p align=\"left\"></p>\n   <font size=\"5\" face=\"黑体\">圈小猫游戏</font>\n   <p></p>\n   <script src=\"/js/phaser.min.js\"></script>\n   <script src=\"/js/catch-the-cat.js\"></script>\n   <div id=\"catch-the-cat\"></div>\n   <script>window.game=new CatchTheCatGame({w:12,h:12,r:20,backgroundColor:16777215,parent:\"catch-the-cat\",statusBarAlign:\"center\",credit:\"梳碧湖\"})</script>\n  </div>\n<!--   <div class=\"style6\" align=\"center\">\n   <p class=\"style7\"></p> -->\n<!--    <p class=\"style8\"><span class=\"style10\"><img src=\"/public/static/plugins/maogame/picture/home.png\" width=\"30\" height=\"30\" alt=\"点击返回主页\" /> <a href=\"/\" title=\"返回首页\" target=\"_new\">返回首页</a></span></p> -->\n </body>\n</html>\n\n","site":{"data":{}},"excerpt":"","more":"<html>\n <head> \n  <meta charset=\"UTF-8\" /> \n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" /> \n  <meta name=\"apple-mobile-web-app-capable\" content=\"yes\" /> \n  <title>圈小猫游戏</title>\n </head> \n <body>\n  <div align=\"center\">\n   <p align=\"left\"></p>\n   <font size=\"5\" face=\"黑体\">圈小猫游戏</font>\n   <p></p>\n   <script src=\"/js/phaser.min.js\"></script>\n   <script src=\"/js/catch-the-cat.js\"></script>\n   <div id=\"catch-the-cat\"></div>\n   <script>window.game=new CatchTheCatGame({w:12,h:12,r:20,backgroundColor:16777215,parent:\"catch-the-cat\",statusBarAlign:\"center\",credit:\"梳碧湖\"})</script>\n  </div>\n<!--   <div class=\"style6\" align=\"center\">\n   <p class=\"style7\"></p> -->\n<!--    <p class=\"style8\"><span class=\"style10\"><img src=\"/public/static/plugins/maogame/picture/home.png\" width=\"30\" height=\"30\" alt=\"点击返回主页\" /> <a href=\"/\" title=\"返回首页\" target=\"_new\">返回首页</a></span></p> -->\n </body>\n</html>\n\n"},{"title":"about","layout":"about","date":"2021-08-12T02:55:41.000Z","comment":"valine","_content":"<p style=\"text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;\">\n无心救主，专注摸鱼的呀哈哈！\n</p>\n\n![](/img/dog.jpg)\n![](/img/野犬.jpg)\n","source":"about/index.md","raw":"---\ntitle: about\nlayout: about\ndate: 2021-08-12 10:55:41\ncomment: 'valine'\n---\n<p style=\"text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;\">\n无心救主，专注摸鱼的呀哈哈！\n</p>\n\n![](/img/dog.jpg)\n![](/img/野犬.jpg)\n","updated":"2021-09-09T03:08:16.268Z","path":"about/index.html","comments":1,"_id":"ckvoor91e0001cmsofvdh2hqs","content":"<p style=\"text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;\">\n无心救主，专注摸鱼的呀哈哈！\n</p>\n\n<p><img src=\"/img/dog.jpg\"><br><img src=\"/img/%E9%87%8E%E7%8A%AC.jpg\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p style=\"text-align:center;color:#8EC0E4;font-size:1.5em;font-weight: bold;\">\n无心救主，专注摸鱼的呀哈哈！\n</p>\n\n<p><img src=\"/img/dog.jpg\"><br><img src=\"/img/%E9%87%8E%E7%8A%AC.jpg\"></p>\n"}],"Post":[{"title":"Linux One Line Command","date":"2021-08-13T06:08:56.000Z","index_img":"/img/article/linux.png","comment":"valine","_content":"## Linux 常用命令\n<!-- more -->\n```\nsh -n ##判断是否有语法错误\nsh -x ##执行详细过程\n## 修改目录颜色\ndircolors -p > ~/.dircolors   ## 编辑 ~/.dircolors 修改\n## 忽略大小写\necho 'set completion-ignore-case on' > ~/.inputrc\n```\n##### Linux 两个文件求交集、并集、差集\n```\nsort a.txt b.txt | uniq -d   ### 交集\nsort a.txt b.txt | uniq   ###并集 \nsort a.txt b.txt b.txt | uniq -u  ## 差集 a-b\nsort b.txt a.txt a.txt | uniq -u  ## 差集 b-a\n```\n使用sort可以将文件进行排序，可以使用sort后面的玲玲，例如 -n 按照数字格式排序，例如 -i 忽略大小写，例如使用-r 为逆序输出等\nuniq为删除文件中重复的行，得到文件中唯一的行，后面的命令 -d 表示的是输出出现次数大于1的内容 -u表示的是输出出现次数为1的内容，那么对于上述的求交集并集差集的命令做如下的解释：\n```\nsort a.txt b.txt | uniq -d #将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，使用-d输出两个文件中次数大于1的内容，即是得到交集\nsort a.txt b.txt | uniq  #将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，即可得到两个文件的并集\nsort a.txt b.txt b.txt | uniq -u #将两个文件排序，最后输出a.txt b.txt b.txt文件中只出现过一次的内容，因为有两个b.txt所以只会输出只在a.txt出现过一次的内容，即是a.txt-b.txt差集\n#对于b.txt-a.txt为同理\n```\n##### grep 命令是常用的搜索文本内容的，要找交集，如下即可：\n```\ngrep -F -f a.txt b.txt | sort | uniq\n```\n##### 差集:\n```\ngrep -F -v -f a.txt b.txt | sort | uniq\ngrep -F -v -f b.txt a.txt | sort | uniq\n#第一行结果为b-a；第二行为a-b。注意顺序很重要\n```\n##### 根据id提取fastq\n```\ngrep -f id -A 3 BC01.fq > test.fq   ### -f 参数为ID文件\n```\n##### 批量重命名文件\n```\n#只更改户后缀\nrename 's/.txt/.log/' *.txt   #### 把txt后缀改为log\n#小写变大写\nfor i in `ls`;do mv -f $i `echo $i | tr a-z A-Z`;done\nfor i in `ls`;do mv -f $i `echo $i | sed 's/..../..../'`;done  ##使用sed替换q\nrename 's/small/large/' image_*.png\n```\n##### 删除空行\n```\nsed -i '/^$/d' file\ngrep -v '^$' file   或  sed '/^$/d' file 或 sed -n '/./p' file\nawk '/./{print}' file 或  tr -s 'n'\n#删除最后一列\nsed -r -e 's/\\t[^\\t]*$//g' file   \n```\n##### 统计文件大小\n```\ndu -sh * 或者 du -h --max-depth=1  或 du -sh * | grep [GM] | sort 提取G 和 M的文件并排序\n```\n##### 计算reads数\n```\nexpr $(wc -l < *.fastq) / 4\nexpr $(zcat test/1.R1.fq.gz | wc -l) / 4\n```\n##### fastq 转 fasta\n```\nawk '{if(NR%4 == 1){print \">\" substr($0, 2)}}{if(NR%4 == 2){print}}' xx.fastq >xx.fasta\nawk '{if(NR%4 == 1){print \">\" \"'$j'\"\"_\"NR}}{if(NR%4 == 2){print}}'    #   \"'$j'\" awk中引用外部变量\n```\n```\nsort -k1,1V -k2,2n file   ## V 参数忽略第一列中的文本按数字排序\nawk '$1 ~ /chr1|chr3/' file ## 第一列匹配chr1或chr3\nawk 'NR > 3' file ## 取出第四行以后\nsed -n '20,50p' file # 取出20到50行\n```\n```\npaste file1 file2  # 横向拼接文件，拼接前可用dos2unix转换文件类型\n```\n```\n'%' 从后向前删除, '#' 从前向后删除\nsed 替换每行最后一个匹配的字符\nsed 's/\\(.*\\)src_str\\(.*\\)/\\1dst_str\\2/'  yourfile   ##  src_str：要匹配的字符  dst_str: 要替换的字符\n```\n```\nbiom=${i##*/}    #返回 / 后的字符\nbiom=${i%/*}     #返回最后 / 前的字符\n```\n```\nls -ld 列出文件全路径\n```\n##### 使用 wget 完成批量下载\n如果想下载一个网站上目录中的所有文件, 我需要执行一长串wget命令, 但这样做会更好:\n```\nwget -nd -r -l1 --no-parent http://www.foo.com/mp3/\n```\n这条命令可以执行的很好, 但有时会下载像 index.@xx 这样一些我不想要的文件. 如果你知道想要文件的格式, 可以用下面的命令来避免下载那些多余的文件:\n```\nwget -nd -r -l1 --no-parent -A.mp3 -A.wma http://www.foo.com/mp3/\n```\n我来简单的介绍一下命令中指定选项的作用.\n-nd 不创建目录, wget默认会创建一个目录\n-r 递归下载\n-l1 (L one) 递归一层,只下载指定文件夹中的内容, 不下载下一级目录中的.\n–no-parent 不下载父目录中的文件\n\n##### rsync可视化复制文件时的进度\n```\nrsync -avPh 源文件 目标文件\n```\n","source":"_posts/OneLineCommand.md","raw":"---\ntitle: Linux One Line Command\ndate: 2021-08-13 14:08:56\nindex_img: /img/article/linux.png\ncategories:\n    - Linux\ntags:\n    - Linux\ncomment: 'valine'\n---\n## Linux 常用命令\n<!-- more -->\n```\nsh -n ##判断是否有语法错误\nsh -x ##执行详细过程\n## 修改目录颜色\ndircolors -p > ~/.dircolors   ## 编辑 ~/.dircolors 修改\n## 忽略大小写\necho 'set completion-ignore-case on' > ~/.inputrc\n```\n##### Linux 两个文件求交集、并集、差集\n```\nsort a.txt b.txt | uniq -d   ### 交集\nsort a.txt b.txt | uniq   ###并集 \nsort a.txt b.txt b.txt | uniq -u  ## 差集 a-b\nsort b.txt a.txt a.txt | uniq -u  ## 差集 b-a\n```\n使用sort可以将文件进行排序，可以使用sort后面的玲玲，例如 -n 按照数字格式排序，例如 -i 忽略大小写，例如使用-r 为逆序输出等\nuniq为删除文件中重复的行，得到文件中唯一的行，后面的命令 -d 表示的是输出出现次数大于1的内容 -u表示的是输出出现次数为1的内容，那么对于上述的求交集并集差集的命令做如下的解释：\n```\nsort a.txt b.txt | uniq -d #将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，使用-d输出两个文件中次数大于1的内容，即是得到交集\nsort a.txt b.txt | uniq  #将a.txt b.txt文件进行排序，uniq使得两个文件中的内容为唯一的，即可得到两个文件的并集\nsort a.txt b.txt b.txt | uniq -u #将两个文件排序，最后输出a.txt b.txt b.txt文件中只出现过一次的内容，因为有两个b.txt所以只会输出只在a.txt出现过一次的内容，即是a.txt-b.txt差集\n#对于b.txt-a.txt为同理\n```\n##### grep 命令是常用的搜索文本内容的，要找交集，如下即可：\n```\ngrep -F -f a.txt b.txt | sort | uniq\n```\n##### 差集:\n```\ngrep -F -v -f a.txt b.txt | sort | uniq\ngrep -F -v -f b.txt a.txt | sort | uniq\n#第一行结果为b-a；第二行为a-b。注意顺序很重要\n```\n##### 根据id提取fastq\n```\ngrep -f id -A 3 BC01.fq > test.fq   ### -f 参数为ID文件\n```\n##### 批量重命名文件\n```\n#只更改户后缀\nrename 's/.txt/.log/' *.txt   #### 把txt后缀改为log\n#小写变大写\nfor i in `ls`;do mv -f $i `echo $i | tr a-z A-Z`;done\nfor i in `ls`;do mv -f $i `echo $i | sed 's/..../..../'`;done  ##使用sed替换q\nrename 's/small/large/' image_*.png\n```\n##### 删除空行\n```\nsed -i '/^$/d' file\ngrep -v '^$' file   或  sed '/^$/d' file 或 sed -n '/./p' file\nawk '/./{print}' file 或  tr -s 'n'\n#删除最后一列\nsed -r -e 's/\\t[^\\t]*$//g' file   \n```\n##### 统计文件大小\n```\ndu -sh * 或者 du -h --max-depth=1  或 du -sh * | grep [GM] | sort 提取G 和 M的文件并排序\n```\n##### 计算reads数\n```\nexpr $(wc -l < *.fastq) / 4\nexpr $(zcat test/1.R1.fq.gz | wc -l) / 4\n```\n##### fastq 转 fasta\n```\nawk '{if(NR%4 == 1){print \">\" substr($0, 2)}}{if(NR%4 == 2){print}}' xx.fastq >xx.fasta\nawk '{if(NR%4 == 1){print \">\" \"'$j'\"\"_\"NR}}{if(NR%4 == 2){print}}'    #   \"'$j'\" awk中引用外部变量\n```\n```\nsort -k1,1V -k2,2n file   ## V 参数忽略第一列中的文本按数字排序\nawk '$1 ~ /chr1|chr3/' file ## 第一列匹配chr1或chr3\nawk 'NR > 3' file ## 取出第四行以后\nsed -n '20,50p' file # 取出20到50行\n```\n```\npaste file1 file2  # 横向拼接文件，拼接前可用dos2unix转换文件类型\n```\n```\n'%' 从后向前删除, '#' 从前向后删除\nsed 替换每行最后一个匹配的字符\nsed 's/\\(.*\\)src_str\\(.*\\)/\\1dst_str\\2/'  yourfile   ##  src_str：要匹配的字符  dst_str: 要替换的字符\n```\n```\nbiom=${i##*/}    #返回 / 后的字符\nbiom=${i%/*}     #返回最后 / 前的字符\n```\n```\nls -ld 列出文件全路径\n```\n##### 使用 wget 完成批量下载\n如果想下载一个网站上目录中的所有文件, 我需要执行一长串wget命令, 但这样做会更好:\n```\nwget -nd -r -l1 --no-parent http://www.foo.com/mp3/\n```\n这条命令可以执行的很好, 但有时会下载像 index.@xx 这样一些我不想要的文件. 如果你知道想要文件的格式, 可以用下面的命令来避免下载那些多余的文件:\n```\nwget -nd -r -l1 --no-parent -A.mp3 -A.wma http://www.foo.com/mp3/\n```\n我来简单的介绍一下命令中指定选项的作用.\n-nd 不创建目录, wget默认会创建一个目录\n-r 递归下载\n-l1 (L one) 递归一层,只下载指定文件夹中的内容, 不下载下一级目录中的.\n–no-parent 不下载父目录中的文件\n\n##### rsync可视化复制文件时的进度\n```\nrsync -avPh 源文件 目标文件\n```\n","slug":"OneLineCommand","published":1,"updated":"2021-08-23T01:36:18.847Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91h0002cmso70ff10qf","content":"<h2 id=\"Linux-常用命令\"><a href=\"#Linux-常用命令\" class=\"headerlink\" title=\"Linux 常用命令\"></a>Linux 常用命令</h2><span id=\"more\"></span>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">sh -n ##判断是否有语法错误<br>sh -x ##执行详细过程<br>## 修改目录颜色<br>dircolors -p &gt; ~/.dircolors   ## 编辑 ~/.dircolors 修改<br>## 忽略大小写<br>echo <span class=\"hljs-string\">&#x27;set completion-ignore-case on&#x27;</span> &gt; ~/.inputrc<br></code></pre></td></tr></table></figure>\n<h5 id=\"Linux-两个文件求交集、并集、差集\"><a href=\"#Linux-两个文件求交集、并集、差集\" class=\"headerlink\" title=\"Linux 两个文件求交集、并集、差集\"></a>Linux 两个文件求交集、并集、差集</h5><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\"><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt | uniq -d   <span class=\"hljs-comment\">### 交集</span><br><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt | uniq   <span class=\"hljs-comment\">###并集 </span><br><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt b.txt | uniq -u  <span class=\"hljs-comment\">## 差集 a-b</span><br><span class=\"hljs-built_in\">sort</span> b.txt <span class=\"hljs-keyword\">a</span>.txt <span class=\"hljs-keyword\">a</span>.txt | uniq -u  <span class=\"hljs-comment\">## 差集 b-a</span><br></code></pre></td></tr></table></figure>\n<p>使用sort可以将文件进行排序，可以使用sort后面的玲玲，例如 -n 按照数字格式排序，例如 -i 忽略大小写，例如使用-r 为逆序输出等<br>uniq为删除文件中重复的行，得到文件中唯一的行，后面的命令 -d 表示的是输出出现次数大于1的内容 -u表示的是输出出现次数为1的内容，那么对于上述的求交集并集差集的命令做如下的解释：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span> <span class=\"hljs-selector-tag\">-d</span> #将<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件进行排序，<span class=\"hljs-selector-tag\">uniq</span>使得两个文件中的内容为唯一的，使用<span class=\"hljs-selector-tag\">-d</span>输出两个文件中次数大于<span class=\"hljs-selector-tag\">1</span>的内容，即是得到交集<br><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span>  #将<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件进行排序，<span class=\"hljs-selector-tag\">uniq</span>使得两个文件中的内容为唯一的，即可得到两个文件的并集<br><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span> <span class=\"hljs-selector-tag\">-u</span> #将两个文件排序，最后输出<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件中只出现过一次的内容，因为有两个<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>所以只会输出只在<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span>出现过一次的内容，即是<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt-b</span><span class=\"hljs-selector-class\">.txt</span>差集<br>#对于<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt-a</span><span class=\"hljs-selector-class\">.txt</span>为同理<br></code></pre></td></tr></table></figure>\n<h5 id=\"grep-命令是常用的搜索文本内容的，要找交集，如下即可：\"><a href=\"#grep-命令是常用的搜索文本内容的，要找交集，如下即可：\" class=\"headerlink\" title=\"grep 命令是常用的搜索文本内容的，要找交集，如下即可：\"></a>grep 命令是常用的搜索文本内容的，要找交集，如下即可：</h5><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">grep <span class=\"hljs-operator\">-F</span> <span class=\"hljs-operator\">-f</span> a.txt b.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br></code></pre></td></tr></table></figure>\n<h5 id=\"差集\"><a href=\"#差集\" class=\"headerlink\" title=\"差集:\"></a>差集:</h5><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">grep -F -v -f <span class=\"hljs-keyword\">a</span>.txt b.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br>grep -F -v -f b.txt <span class=\"hljs-keyword\">a</span>.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br><span class=\"hljs-comment\">#第一行结果为b-a；第二行为a-b。注意顺序很重要</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"根据id提取fastq\"><a href=\"#根据id提取fastq\" class=\"headerlink\" title=\"根据id提取fastq\"></a>根据id提取fastq</h5><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">grep -f id -A <span class=\"hljs-number\">3</span> BC01.fq &gt; test.fq   ### -f 参数为ID文件<br></code></pre></td></tr></table></figure>\n<h5 id=\"批量重命名文件\"><a href=\"#批量重命名文件\" class=\"headerlink\" title=\"批量重命名文件\"></a>批量重命名文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#只更改户后缀</span><br>rename <span class=\"hljs-string\">&#x27;s/.txt/.log/&#x27;</span> *.txt   <span class=\"hljs-comment\">#### 把txt后缀改为log</span><br><span class=\"hljs-comment\">#小写变大写</span><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `ls`;<span class=\"hljs-keyword\">do</span> mv -f <span class=\"hljs-variable\">$i</span> `<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span> | tr a-z A-Z`;<span class=\"hljs-keyword\">done</span><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `ls`;<span class=\"hljs-keyword\">do</span> mv -f <span class=\"hljs-variable\">$i</span> `<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span> | sed <span class=\"hljs-string\">&#x27;s/..../..../&#x27;</span>`;<span class=\"hljs-keyword\">done</span>  <span class=\"hljs-comment\">##使用sed替换q</span><br>rename <span class=\"hljs-string\">&#x27;s/small/large/&#x27;</span> image_*.png<br></code></pre></td></tr></table></figure>\n<h5 id=\"删除空行\"><a href=\"#删除空行\" class=\"headerlink\" title=\"删除空行\"></a>删除空行</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">sed -i <span class=\"hljs-string\">&#x27;/^$/d&#x27;</span> <span class=\"hljs-keyword\">file</span><br><span class=\"hljs-keyword\">grep</span> -v <span class=\"hljs-string\">&#x27;^$&#x27;</span> <span class=\"hljs-keyword\">file</span>   或  sed <span class=\"hljs-string\">&#x27;/^$/d&#x27;</span> <span class=\"hljs-keyword\">file</span> 或 sed -n <span class=\"hljs-string\">&#x27;/./p&#x27;</span> <span class=\"hljs-keyword\">file</span><br>awk <span class=\"hljs-string\">&#x27;/./&#123;print&#125;&#x27;</span> <span class=\"hljs-keyword\">file</span> 或  <span class=\"hljs-keyword\">tr</span> -s <span class=\"hljs-string\">&#x27;n&#x27;</span><br>#删除最后一列<br>sed -r -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">&#x27;s/\\t[^\\t]*$//g&#x27;</span> <span class=\"hljs-keyword\">file</span>   <br></code></pre></td></tr></table></figure>\n<h5 id=\"统计文件大小\"><a href=\"#统计文件大小\" class=\"headerlink\" title=\"统计文件大小\"></a>统计文件大小</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">du -<span class=\"hljs-keyword\">sh</span> * 或者 du -h --<span class=\"hljs-built_in\">max</span>-depth=<span class=\"hljs-number\">1</span>  或 du -<span class=\"hljs-keyword\">sh</span> * | <span class=\"hljs-keyword\">grep</span> [GM] | <span class=\"hljs-keyword\">sort</span> 提取G 和 M的文件并排序<br></code></pre></td></tr></table></figure>\n<h5 id=\"计算reads数\"><a href=\"#计算reads数\" class=\"headerlink\" title=\"计算reads数\"></a>计算reads数</h5><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">expr <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">wc</span> -<span class=\"hljs-params\">l</span> &lt; <span class=\"hljs-operator\">*</span>.<span class=\"hljs-params\">fastq</span>)</span><span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">4</span><br>expr <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">zcat</span> <span class=\"hljs-params\">test</span><span class=\"hljs-operator\">/</span>1.R1.<span class=\"hljs-params\">fq</span>.<span class=\"hljs-params\">gz</span> | <span class=\"hljs-params\">wc</span> -<span class=\"hljs-params\">l</span>)</span><span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"fastq-转-fasta\"><a href=\"#fastq-转-fasta\" class=\"headerlink\" title=\"fastq 转 fasta\"></a>fastq 转 fasta</h5><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">awk</span> &#x27;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">1</span>)&#123;print <span class=\"hljs-string\">&quot;&gt;&quot;</span> substr($<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)&#125;&#125;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">2</span>)&#123;print&#125;&#125;&#x27; xx.fastq &gt;xx.fasta<br><span class=\"hljs-attribute\">awk</span> &#x27;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">1</span>)&#123;print <span class=\"hljs-string\">&quot;&gt;&quot;</span> <span class=\"hljs-string\">&quot;&#x27;$j&#x27;&quot;</span><span class=\"hljs-string\">&quot;_&quot;</span>NR&#125;&#125;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">2</span>)&#123;print&#125;&#125;&#x27;    #   <span class=\"hljs-string\">&quot;&#x27;$j&#x27;&quot;</span> awk中引用外部变量<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">sort</span> -k<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>V -k<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>n file   ## V 参数忽略第一列中的文本按数字排序<br><span class=\"hljs-attribute\">awk</span> &#x27;$<span class=\"hljs-number\">1</span> ~ /chr<span class=\"hljs-number\">1</span>|chr<span class=\"hljs-number\">3</span>/&#x27; file ## 第一列匹配chr<span class=\"hljs-number\">1</span>或chr<span class=\"hljs-number\">3</span><br><span class=\"hljs-attribute\">awk</span> &#x27;NR &gt; <span class=\"hljs-number\">3</span>&#x27; file ## 取出第四行以后<br><span class=\"hljs-attribute\">sed</span> -n &#x27;<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">50</span>p&#x27; file # 取出<span class=\"hljs-number\">20</span>到<span class=\"hljs-number\">50</span>行<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">paste</span> file<span class=\"hljs-number\">1</span> file<span class=\"hljs-number\">2</span>  # 横向拼接文件，拼接前可用dos<span class=\"hljs-number\">2</span>unix转换文件类型<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-string\">&#x27;%&#x27;</span> 从后向前删除, <span class=\"hljs-string\">&#x27;#&#x27;</span> 从前向后删除<br>sed 替换每行最后一个匹配的字符<br>sed <span class=\"hljs-string\">&#x27;s/\\(.*\\)src_str\\(.*\\)/\\1dst_str\\2/&#x27;</span>  yourfile   ##  src_str：要匹配的字符  dst_str: 要替换的字符<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">biom</span>=<span class=\"hljs-variable\">$&#123;i##*/&#125;</span>    <span class=\"hljs-comment\">#返回 / 后的字符</span><br><span class=\"hljs-attr\">biom</span>=<span class=\"hljs-variable\">$&#123;i%/*&#125;</span>     <span class=\"hljs-comment\">#返回最后 / 前的字符</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">ls -<span class=\"hljs-keyword\">ld</span> 列出文件全路径<br></code></pre></td></tr></table></figure>\n<h5 id=\"使用-wget-完成批量下载\"><a href=\"#使用-wget-完成批量下载\" class=\"headerlink\" title=\"使用 wget 完成批量下载\"></a>使用 wget 完成批量下载</h5><p>如果想下载一个网站上目录中的所有文件, 我需要执行一长串wget命令, 但这样做会更好:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -nd -r -l1 --no-parent http:<span class=\"hljs-regexp\">//</span>www.foo.com<span class=\"hljs-regexp\">/mp3/</span><br></code></pre></td></tr></table></figure>\n<p>这条命令可以执行的很好, 但有时会下载像 index.@xx 这样一些我不想要的文件. 如果你知道想要文件的格式, 可以用下面的命令来避免下载那些多余的文件:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">wget -nd -r -l1 --no-parent -<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">A</span>.</span></span>mp3 -<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">A</span>.</span></span>wma http:<span class=\"hljs-comment\">//www.foo.com/mp3/</span><br></code></pre></td></tr></table></figure>\n<p>我来简单的介绍一下命令中指定选项的作用.<br>-nd 不创建目录, wget默认会创建一个目录<br>-r 递归下载<br>-l1 (L one) 递归一层,只下载指定文件夹中的内容, 不下载下一级目录中的.<br>–no-parent 不下载父目录中的文件</p>\n<h5 id=\"rsync可视化复制文件时的进度\"><a href=\"#rsync可视化复制文件时的进度\" class=\"headerlink\" title=\"rsync可视化复制文件时的进度\"></a>rsync可视化复制文件时的进度</h5><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rsync</span> -avPh 源文件 目标文件<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Linux-常用命令\"><a href=\"#Linux-常用命令\" class=\"headerlink\" title=\"Linux 常用命令\"></a>Linux 常用命令</h2>","more":"<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">sh -n ##判断是否有语法错误<br>sh -x ##执行详细过程<br>## 修改目录颜色<br>dircolors -p &gt; ~/.dircolors   ## 编辑 ~/.dircolors 修改<br>## 忽略大小写<br>echo <span class=\"hljs-string\">&#x27;set completion-ignore-case on&#x27;</span> &gt; ~/.inputrc<br></code></pre></td></tr></table></figure>\n<h5 id=\"Linux-两个文件求交集、并集、差集\"><a href=\"#Linux-两个文件求交集、并集、差集\" class=\"headerlink\" title=\"Linux 两个文件求交集、并集、差集\"></a>Linux 两个文件求交集、并集、差集</h5><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\"><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt | uniq -d   <span class=\"hljs-comment\">### 交集</span><br><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt | uniq   <span class=\"hljs-comment\">###并集 </span><br><span class=\"hljs-built_in\">sort</span> <span class=\"hljs-keyword\">a</span>.txt b.txt b.txt | uniq -u  <span class=\"hljs-comment\">## 差集 a-b</span><br><span class=\"hljs-built_in\">sort</span> b.txt <span class=\"hljs-keyword\">a</span>.txt <span class=\"hljs-keyword\">a</span>.txt | uniq -u  <span class=\"hljs-comment\">## 差集 b-a</span><br></code></pre></td></tr></table></figure>\n<p>使用sort可以将文件进行排序，可以使用sort后面的玲玲，例如 -n 按照数字格式排序，例如 -i 忽略大小写，例如使用-r 为逆序输出等<br>uniq为删除文件中重复的行，得到文件中唯一的行，后面的命令 -d 表示的是输出出现次数大于1的内容 -u表示的是输出出现次数为1的内容，那么对于上述的求交集并集差集的命令做如下的解释：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs less\"><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span> <span class=\"hljs-selector-tag\">-d</span> #将<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件进行排序，<span class=\"hljs-selector-tag\">uniq</span>使得两个文件中的内容为唯一的，使用<span class=\"hljs-selector-tag\">-d</span>输出两个文件中次数大于<span class=\"hljs-selector-tag\">1</span>的内容，即是得到交集<br><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span>  #将<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件进行排序，<span class=\"hljs-selector-tag\">uniq</span>使得两个文件中的内容为唯一的，即可得到两个文件的并集<br><span class=\"hljs-selector-tag\">sort</span> <span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> | <span class=\"hljs-selector-tag\">uniq</span> <span class=\"hljs-selector-tag\">-u</span> #将两个文件排序，最后输出<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span> <span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>文件中只出现过一次的内容，因为有两个<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt</span>所以只会输出只在<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt</span>出现过一次的内容，即是<span class=\"hljs-selector-tag\">a</span><span class=\"hljs-selector-class\">.txt-b</span><span class=\"hljs-selector-class\">.txt</span>差集<br>#对于<span class=\"hljs-selector-tag\">b</span><span class=\"hljs-selector-class\">.txt-a</span><span class=\"hljs-selector-class\">.txt</span>为同理<br></code></pre></td></tr></table></figure>\n<h5 id=\"grep-命令是常用的搜索文本内容的，要找交集，如下即可：\"><a href=\"#grep-命令是常用的搜索文本内容的，要找交集，如下即可：\" class=\"headerlink\" title=\"grep 命令是常用的搜索文本内容的，要找交集，如下即可：\"></a>grep 命令是常用的搜索文本内容的，要找交集，如下即可：</h5><figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">grep <span class=\"hljs-operator\">-F</span> <span class=\"hljs-operator\">-f</span> a.txt b.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br></code></pre></td></tr></table></figure>\n<h5 id=\"差集\"><a href=\"#差集\" class=\"headerlink\" title=\"差集:\"></a>差集:</h5><figure class=\"highlight livecodeserver\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livecodeserver\">grep -F -v -f <span class=\"hljs-keyword\">a</span>.txt b.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br>grep -F -v -f b.txt <span class=\"hljs-keyword\">a</span>.txt | <span class=\"hljs-built_in\">sort</span> | uniq<br><span class=\"hljs-comment\">#第一行结果为b-a；第二行为a-b。注意顺序很重要</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"根据id提取fastq\"><a href=\"#根据id提取fastq\" class=\"headerlink\" title=\"根据id提取fastq\"></a>根据id提取fastq</h5><figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">grep -f id -A <span class=\"hljs-number\">3</span> BC01.fq &gt; test.fq   ### -f 参数为ID文件<br></code></pre></td></tr></table></figure>\n<h5 id=\"批量重命名文件\"><a href=\"#批量重命名文件\" class=\"headerlink\" title=\"批量重命名文件\"></a>批量重命名文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs bash\"><span class=\"hljs-comment\">#只更改户后缀</span><br>rename <span class=\"hljs-string\">&#x27;s/.txt/.log/&#x27;</span> *.txt   <span class=\"hljs-comment\">#### 把txt后缀改为log</span><br><span class=\"hljs-comment\">#小写变大写</span><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `ls`;<span class=\"hljs-keyword\">do</span> mv -f <span class=\"hljs-variable\">$i</span> `<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span> | tr a-z A-Z`;<span class=\"hljs-keyword\">done</span><br><span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> `ls`;<span class=\"hljs-keyword\">do</span> mv -f <span class=\"hljs-variable\">$i</span> `<span class=\"hljs-built_in\">echo</span> <span class=\"hljs-variable\">$i</span> | sed <span class=\"hljs-string\">&#x27;s/..../..../&#x27;</span>`;<span class=\"hljs-keyword\">done</span>  <span class=\"hljs-comment\">##使用sed替换q</span><br>rename <span class=\"hljs-string\">&#x27;s/small/large/&#x27;</span> image_*.png<br></code></pre></td></tr></table></figure>\n<h5 id=\"删除空行\"><a href=\"#删除空行\" class=\"headerlink\" title=\"删除空行\"></a>删除空行</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">sed -i <span class=\"hljs-string\">&#x27;/^$/d&#x27;</span> <span class=\"hljs-keyword\">file</span><br><span class=\"hljs-keyword\">grep</span> -v <span class=\"hljs-string\">&#x27;^$&#x27;</span> <span class=\"hljs-keyword\">file</span>   或  sed <span class=\"hljs-string\">&#x27;/^$/d&#x27;</span> <span class=\"hljs-keyword\">file</span> 或 sed -n <span class=\"hljs-string\">&#x27;/./p&#x27;</span> <span class=\"hljs-keyword\">file</span><br>awk <span class=\"hljs-string\">&#x27;/./&#123;print&#125;&#x27;</span> <span class=\"hljs-keyword\">file</span> 或  <span class=\"hljs-keyword\">tr</span> -s <span class=\"hljs-string\">&#x27;n&#x27;</span><br>#删除最后一列<br>sed -r -<span class=\"hljs-keyword\">e</span> <span class=\"hljs-string\">&#x27;s/\\t[^\\t]*$//g&#x27;</span> <span class=\"hljs-keyword\">file</span>   <br></code></pre></td></tr></table></figure>\n<h5 id=\"统计文件大小\"><a href=\"#统计文件大小\" class=\"headerlink\" title=\"统计文件大小\"></a>统计文件大小</h5><figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs vim\">du -<span class=\"hljs-keyword\">sh</span> * 或者 du -h --<span class=\"hljs-built_in\">max</span>-depth=<span class=\"hljs-number\">1</span>  或 du -<span class=\"hljs-keyword\">sh</span> * | <span class=\"hljs-keyword\">grep</span> [GM] | <span class=\"hljs-keyword\">sort</span> 提取G 和 M的文件并排序<br></code></pre></td></tr></table></figure>\n<h5 id=\"计算reads数\"><a href=\"#计算reads数\" class=\"headerlink\" title=\"计算reads数\"></a>计算reads数</h5><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">expr <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">wc</span> -<span class=\"hljs-params\">l</span> &lt; <span class=\"hljs-operator\">*</span>.<span class=\"hljs-params\">fastq</span>)</span><span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">4</span><br>expr <span class=\"hljs-constructor\">$(<span class=\"hljs-params\">zcat</span> <span class=\"hljs-params\">test</span><span class=\"hljs-operator\">/</span>1.R1.<span class=\"hljs-params\">fq</span>.<span class=\"hljs-params\">gz</span> | <span class=\"hljs-params\">wc</span> -<span class=\"hljs-params\">l</span>)</span><span class=\"hljs-operator\"> / </span><span class=\"hljs-number\">4</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"fastq-转-fasta\"><a href=\"#fastq-转-fasta\" class=\"headerlink\" title=\"fastq 转 fasta\"></a>fastq 转 fasta</h5><figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">awk</span> &#x27;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">1</span>)&#123;print <span class=\"hljs-string\">&quot;&gt;&quot;</span> substr($<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">2</span>)&#125;&#125;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">2</span>)&#123;print&#125;&#125;&#x27; xx.fastq &gt;xx.fasta<br><span class=\"hljs-attribute\">awk</span> &#x27;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">1</span>)&#123;print <span class=\"hljs-string\">&quot;&gt;&quot;</span> <span class=\"hljs-string\">&quot;&#x27;$j&#x27;&quot;</span><span class=\"hljs-string\">&quot;_&quot;</span>NR&#125;&#125;&#123;if(NR%<span class=\"hljs-number\">4</span> == <span class=\"hljs-number\">2</span>)&#123;print&#125;&#125;&#x27;    #   <span class=\"hljs-string\">&quot;&#x27;$j&#x27;&quot;</span> awk中引用外部变量<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">sort</span> -k<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">1</span>V -k<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">2</span>n file   ## V 参数忽略第一列中的文本按数字排序<br><span class=\"hljs-attribute\">awk</span> &#x27;$<span class=\"hljs-number\">1</span> ~ /chr<span class=\"hljs-number\">1</span>|chr<span class=\"hljs-number\">3</span>/&#x27; file ## 第一列匹配chr<span class=\"hljs-number\">1</span>或chr<span class=\"hljs-number\">3</span><br><span class=\"hljs-attribute\">awk</span> &#x27;NR &gt; <span class=\"hljs-number\">3</span>&#x27; file ## 取出第四行以后<br><span class=\"hljs-attribute\">sed</span> -n &#x27;<span class=\"hljs-number\">20</span>,<span class=\"hljs-number\">50</span>p&#x27; file # 取出<span class=\"hljs-number\">20</span>到<span class=\"hljs-number\">50</span>行<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight apache\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs apache\"><span class=\"hljs-attribute\">paste</span> file<span class=\"hljs-number\">1</span> file<span class=\"hljs-number\">2</span>  # 横向拼接文件，拼接前可用dos<span class=\"hljs-number\">2</span>unix转换文件类型<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\"><span class=\"hljs-string\">&#x27;%&#x27;</span> 从后向前删除, <span class=\"hljs-string\">&#x27;#&#x27;</span> 从前向后删除<br>sed 替换每行最后一个匹配的字符<br>sed <span class=\"hljs-string\">&#x27;s/\\(.*\\)src_str\\(.*\\)/\\1dst_str\\2/&#x27;</span>  yourfile   ##  src_str：要匹配的字符  dst_str: 要替换的字符<br></code></pre></td></tr></table></figure>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs ini\"><span class=\"hljs-attr\">biom</span>=<span class=\"hljs-variable\">$&#123;i##*/&#125;</span>    <span class=\"hljs-comment\">#返回 / 后的字符</span><br><span class=\"hljs-attr\">biom</span>=<span class=\"hljs-variable\">$&#123;i%/*&#125;</span>     <span class=\"hljs-comment\">#返回最后 / 前的字符</span><br></code></pre></td></tr></table></figure>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs avrasm\">ls -<span class=\"hljs-keyword\">ld</span> 列出文件全路径<br></code></pre></td></tr></table></figure>\n<h5 id=\"使用-wget-完成批量下载\"><a href=\"#使用-wget-完成批量下载\" class=\"headerlink\" title=\"使用 wget 完成批量下载\"></a>使用 wget 完成批量下载</h5><p>如果想下载一个网站上目录中的所有文件, 我需要执行一长串wget命令, 但这样做会更好:</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\">wget -nd -r -l1 --no-parent http:<span class=\"hljs-regexp\">//</span>www.foo.com<span class=\"hljs-regexp\">/mp3/</span><br></code></pre></td></tr></table></figure>\n<p>这条命令可以执行的很好, 但有时会下载像 index.@xx 这样一些我不想要的文件. 如果你知道想要文件的格式, 可以用下面的命令来避免下载那些多余的文件:</p>\n<figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">wget -nd -r -l1 --no-parent -<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">A</span>.</span></span>mp3 -<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">A</span>.</span></span>wma http:<span class=\"hljs-comment\">//www.foo.com/mp3/</span><br></code></pre></td></tr></table></figure>\n<p>我来简单的介绍一下命令中指定选项的作用.<br>-nd 不创建目录, wget默认会创建一个目录<br>-r 递归下载<br>-l1 (L one) 递归一层,只下载指定文件夹中的内容, 不下载下一级目录中的.<br>–no-parent 不下载父目录中的文件</p>\n<h5 id=\"rsync可视化复制文件时的进度\"><a href=\"#rsync可视化复制文件时的进度\" class=\"headerlink\" title=\"rsync可视化复制文件时的进度\"></a>rsync可视化复制文件时的进度</h5><figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs nginx\"><span class=\"hljs-attribute\">rsync</span> -avPh 源文件 目标文件<br></code></pre></td></tr></table></figure>"},{"title":"MongoDB基础","date":"2021-10-18T01:54:34.000Z","index_img":"/img/article/mongodb.jpg","comment":"valine","_content":"## MongoDB 基础命令\n<!-- more -->\n##### 启动本地服务端\n进入mongodb bin目录下打开命令行执行 mongod 启动服务端(存储引擎参数 --storageEngine=mmapv1)\n```\n.\\mongod.exe --storageEngine=mmapv1 --dbpath E:\\Desktop\\Java\\JavaSoftware\\mongoDB\\data\\\n```\n##### 启动本地客户端\n进入mongodb bin目录下打开命令行执行 mongo 启动客户端\n```\n.\\mongo\n```\n\n##### 查看数据库\n```\nshow dbs\n```\n##### 切换数据库（无需新建，直接引用）\n```\nuse demo\n```\n##### 插入数据(以创建一个雇员信息表为例)\n```\ndb.Employee.save({code:'E01', name:'Jacky'})\n```\n##### 查看数据 \n```\nshow collections\n```\n##### 查找数据 \n```\ndb.Employee.find()\n```\n##### 格式化输出查找数据 \n```\ndb.Employee.find().pretty()\n```\n##### 添加不同格式数据 \n```\ndb.Employee.save({code:'E02', name:'Jim', email:'test@email.com'})\n```\n\n启动mongodb时，提示Unclean shutdown detected mongodb，解决方法:\n```\nmongod --repair --dbpath E:\\Desktop\\Java\\JavaSoftware\\mongoDB\\data\\\n```","source":"_posts/MongoDB基础.md","raw":"---\ntitle: MongoDB基础\ndate: 2021-10-18 09:54:34\nindex_img: /img/article/mongodb.jpg\ncategories:\n    - 数据库\ntags:\n    - MongoDB\ncomment: 'valine'\n---\n## MongoDB 基础命令\n<!-- more -->\n##### 启动本地服务端\n进入mongodb bin目录下打开命令行执行 mongod 启动服务端(存储引擎参数 --storageEngine=mmapv1)\n```\n.\\mongod.exe --storageEngine=mmapv1 --dbpath E:\\Desktop\\Java\\JavaSoftware\\mongoDB\\data\\\n```\n##### 启动本地客户端\n进入mongodb bin目录下打开命令行执行 mongo 启动客户端\n```\n.\\mongo\n```\n\n##### 查看数据库\n```\nshow dbs\n```\n##### 切换数据库（无需新建，直接引用）\n```\nuse demo\n```\n##### 插入数据(以创建一个雇员信息表为例)\n```\ndb.Employee.save({code:'E01', name:'Jacky'})\n```\n##### 查看数据 \n```\nshow collections\n```\n##### 查找数据 \n```\ndb.Employee.find()\n```\n##### 格式化输出查找数据 \n```\ndb.Employee.find().pretty()\n```\n##### 添加不同格式数据 \n```\ndb.Employee.save({code:'E02', name:'Jim', email:'test@email.com'})\n```\n\n启动mongodb时，提示Unclean shutdown detected mongodb，解决方法:\n```\nmongod --repair --dbpath E:\\Desktop\\Java\\JavaSoftware\\mongoDB\\data\\\n```","slug":"MongoDB基础","published":1,"updated":"2021-10-24T06:10:46.250Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91m0003cmsobx2a9cs8","content":"<h2 id=\"MongoDB-基础命令\"><a href=\"#MongoDB-基础命令\" class=\"headerlink\" title=\"MongoDB 基础命令\"></a>MongoDB 基础命令</h2><span id=\"more\"></span>\n<h5 id=\"启动本地服务端\"><a href=\"#启动本地服务端\" class=\"headerlink\" title=\"启动本地服务端\"></a>启动本地服务端</h5><p>进入mongodb bin目录下打开命令行执行 mongod 启动服务端(存储引擎参数 –storageEngine=mmapv1)</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">.<span class=\"hljs-symbol\">\\m</span>ongod.exe --storageEngine=mmapv1 --dbpath E:<span class=\"hljs-symbol\">\\D</span>esktop<span class=\"hljs-symbol\">\\J</span>ava<span class=\"hljs-symbol\">\\J</span>avaSoftware<span class=\"hljs-symbol\">\\m</span>ongoDB<span class=\"hljs-symbol\">\\d</span>ata\\<br></code></pre></td></tr></table></figure>\n<h5 id=\"启动本地客户端\"><a href=\"#启动本地客户端\" class=\"headerlink\" title=\"启动本地客户端\"></a>启动本地客户端</h5><p>进入mongodb bin目录下打开命令行执行 mongo 启动客户端</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">.<span class=\"hljs-string\">\\mongo</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">show</span> dbs<br></code></pre></td></tr></table></figure>\n<h5 id=\"切换数据库（无需新建，直接引用）\"><a href=\"#切换数据库（无需新建，直接引用）\" class=\"headerlink\" title=\"切换数据库（无需新建，直接引用）\"></a>切换数据库（无需新建，直接引用）</h5><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">use</span> demo<br></code></pre></td></tr></table></figure>\n<h5 id=\"插入数据-以创建一个雇员信息表为例\"><a href=\"#插入数据-以创建一个雇员信息表为例\" class=\"headerlink\" title=\"插入数据(以创建一个雇员信息表为例)\"></a>插入数据(以创建一个雇员信息表为例)</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.save</span>(&#123;<span class=\"hljs-selector-tag\">code</span>:<span class=\"hljs-string\">&#x27;E01&#x27;</span>, name:<span class=\"hljs-string\">&#x27;Jacky&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>\n<h5 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">show</span> collections<br></code></pre></td></tr></table></figure>\n<h5 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据\"></a>查找数据</h5><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">db.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Employee</span>.</span></span>find<span class=\"hljs-literal\">()</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"格式化输出查找数据\"><a href=\"#格式化输出查找数据\" class=\"headerlink\" title=\"格式化输出查找数据\"></a>格式化输出查找数据</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.find</span>()<span class=\"hljs-selector-class\">.pretty</span>()<br></code></pre></td></tr></table></figure>\n<h5 id=\"添加不同格式数据\"><a href=\"#添加不同格式数据\" class=\"headerlink\" title=\"添加不同格式数据\"></a>添加不同格式数据</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.save</span>(&#123;<span class=\"hljs-selector-tag\">code</span>:<span class=\"hljs-string\">&#x27;E02&#x27;</span>, name:<span class=\"hljs-string\">&#x27;Jim&#x27;</span>, email:<span class=\"hljs-string\">&#x27;test@email.com&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>启动mongodb时，提示Unclean shutdown detected mongodb，解决方法:</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">mongod --repair --dbpath E:<span class=\"hljs-symbol\">\\D</span>esktop<span class=\"hljs-symbol\">\\J</span>ava<span class=\"hljs-symbol\">\\J</span>avaSoftware<span class=\"hljs-symbol\">\\m</span>ongoDB<span class=\"hljs-symbol\">\\d</span>ata\\<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"MongoDB-基础命令\"><a href=\"#MongoDB-基础命令\" class=\"headerlink\" title=\"MongoDB 基础命令\"></a>MongoDB 基础命令</h2>","more":"<h5 id=\"启动本地服务端\"><a href=\"#启动本地服务端\" class=\"headerlink\" title=\"启动本地服务端\"></a>启动本地服务端</h5><p>进入mongodb bin目录下打开命令行执行 mongod 启动服务端(存储引擎参数 –storageEngine=mmapv1)</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">.<span class=\"hljs-symbol\">\\m</span>ongod.exe --storageEngine=mmapv1 --dbpath E:<span class=\"hljs-symbol\">\\D</span>esktop<span class=\"hljs-symbol\">\\J</span>ava<span class=\"hljs-symbol\">\\J</span>avaSoftware<span class=\"hljs-symbol\">\\m</span>ongoDB<span class=\"hljs-symbol\">\\d</span>ata\\<br></code></pre></td></tr></table></figure>\n<h5 id=\"启动本地客户端\"><a href=\"#启动本地客户端\" class=\"headerlink\" title=\"启动本地客户端\"></a>启动本地客户端</h5><p>进入mongodb bin目录下打开命令行执行 mongo 启动客户端</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs livescript\">.<span class=\"hljs-string\">\\mongo</span><br></code></pre></td></tr></table></figure>\n\n<h5 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">show</span> dbs<br></code></pre></td></tr></table></figure>\n<h5 id=\"切换数据库（无需新建，直接引用）\"><a href=\"#切换数据库（无需新建，直接引用）\" class=\"headerlink\" title=\"切换数据库（无需新建，直接引用）\"></a>切换数据库（无需新建，直接引用）</h5><figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs actionscript\"><span class=\"hljs-keyword\">use</span> demo<br></code></pre></td></tr></table></figure>\n<h5 id=\"插入数据-以创建一个雇员信息表为例\"><a href=\"#插入数据-以创建一个雇员信息表为例\" class=\"headerlink\" title=\"插入数据(以创建一个雇员信息表为例)\"></a>插入数据(以创建一个雇员信息表为例)</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.save</span>(&#123;<span class=\"hljs-selector-tag\">code</span>:<span class=\"hljs-string\">&#x27;E01&#x27;</span>, name:<span class=\"hljs-string\">&#x27;Jacky&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>\n<h5 id=\"查看数据\"><a href=\"#查看数据\" class=\"headerlink\" title=\"查看数据\"></a>查看数据</h5><figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dart\"><span class=\"hljs-keyword\">show</span> collections<br></code></pre></td></tr></table></figure>\n<h5 id=\"查找数据\"><a href=\"#查找数据\" class=\"headerlink\" title=\"查找数据\"></a>查找数据</h5><figure class=\"highlight reasonml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs reasonml\">db.<span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Employee</span>.</span></span>find<span class=\"hljs-literal\">()</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"格式化输出查找数据\"><a href=\"#格式化输出查找数据\" class=\"headerlink\" title=\"格式化输出查找数据\"></a>格式化输出查找数据</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.find</span>()<span class=\"hljs-selector-class\">.pretty</span>()<br></code></pre></td></tr></table></figure>\n<h5 id=\"添加不同格式数据\"><a href=\"#添加不同格式数据\" class=\"headerlink\" title=\"添加不同格式数据\"></a>添加不同格式数据</h5><figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs stylus\">db<span class=\"hljs-selector-class\">.Employee</span><span class=\"hljs-selector-class\">.save</span>(&#123;<span class=\"hljs-selector-tag\">code</span>:<span class=\"hljs-string\">&#x27;E02&#x27;</span>, name:<span class=\"hljs-string\">&#x27;Jim&#x27;</span>, email:<span class=\"hljs-string\">&#x27;test@email.com&#x27;</span>&#125;)<br></code></pre></td></tr></table></figure>\n\n<p>启动mongodb时，提示Unclean shutdown detected mongodb，解决方法:</p>\n<figure class=\"highlight taggerscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs taggerscript\">mongod --repair --dbpath E:<span class=\"hljs-symbol\">\\D</span>esktop<span class=\"hljs-symbol\">\\J</span>ava<span class=\"hljs-symbol\">\\J</span>avaSoftware<span class=\"hljs-symbol\">\\m</span>ongoDB<span class=\"hljs-symbol\">\\d</span>ata\\<br></code></pre></td></tr></table></figure>"},{"title":"Pyecharts 不同颜色绘制正负柱状图","date":"2021-09-27T02:52:10.000Z","index_img":"/img/article/pyecharts.jpg","comment":"valine","_content":"## 如题\n<!-- more -->\n```\nimport akshare as ak\nimport pyecharts.options as opts\nfrom pyecharts.charts import Bar, Line\nfrom pyecharts.commons.utils import JsCode\n\nfund_em_info_df = ak.fund_em_open_fund_info(fund=\"006008\", indicator=\"单位净值走势\")\n\nfund_name = '诺安积极配置混合C'\nx_data = fund_em_info_df['净值日期'].tolist()\ny_data = fund_em_info_df['单位净值'].tolist()\nz_data = fund_em_info_df['日增长率'].tolist()\n\nbackground_color_js = (\n    \"new echarts.graphic.LinearGradient(0, 0, 0, 1, \"\n    \"[{offset: 0, color: '#c86589'}, {offset: 1, color: '#06a7ff'}], false)\"\n)\narea_color_js = (\n    \"new echarts.graphic.LinearGradient(0, 0, 0, 1, \"\n    \"[{offset: 0, color: '#eb64fb'}, {offset: 1, color: '#3fbbff0d'}], false)\"\n)\n\n\nbar = (\n    Bar(init_opts=opts.InitOpts(bg_color=JsCode(background_color_js), width='700px', height='450px'))     ## width, height修改画布大小\n    .add_xaxis(xaxis_data=x_data)\n    .add_yaxis(\n        series_name=\"\",\n        y_axis=z_data,\n        label_opts=opts.LabelOpts(is_show=False),\n        itemstyle_opts=opts.ItemStyleOpts(\n            ### 调用js代码绘制不同颜色\n            color=JsCode(\n                \"\"\"\n                    function(params) {\n                        var colorList;\n                        if (params.data >= 0) {\n                          colorList = '#FF4500';\n                        } else {\n                          colorList = '#14b143';\n                        }\n                        return colorList;\n                    }\n                    \"\"\"\n                )\n            )\n        )\n    .set_global_opts(\n        title_opts=opts.TitleOpts(\n            title=fund_name,\n            pos_bottom=\"90%\",\n            pos_left=\"center\",\n            title_textstyle_opts=opts.TextStyleOpts(color=\"#fff\", font_size=16),\n        ),\n        xaxis_opts=opts.AxisOpts(\n            type_=\"category\",\n            boundary_gap=False,\n            axislabel_opts=opts.LabelOpts(margin=30, color=\"#ffffff63\"),\n            axisline_opts=opts.AxisLineOpts(is_show=False),\n            axistick_opts=opts.AxisTickOpts(\n                is_show=True,\n                length=25,\n                linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\"),\n            ),\n            splitline_opts=opts.SplitLineOpts(\n                is_show=True, linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\")\n            ),\n        ),\n        yaxis_opts=opts.AxisOpts(\n            type_=\"value\",\n            position=\"left\",\n            axislabel_opts=opts.LabelOpts(margin=20, color=\"#ffffff63\"),\n            axisline_opts=opts.AxisLineOpts(\n                linestyle_opts=opts.LineStyleOpts(width=2, color=\"#fff\")\n            ),\n            axistick_opts=opts.AxisTickOpts(\n                is_show=True,\n                length=15,\n                linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\"),\n            ),\n            splitline_opts=opts.SplitLineOpts(\n                is_show=True, linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\")\n            ),\n        ),\n#         legend_opts=opts.LegendOpts(is_show=True),\n        datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_=\"inside\")]    ## 时间轴显示并可同通过鼠标滑动\n    )\n)\n\n\nline = (\n    Line(init_opts=opts.InitOpts(bg_color=JsCode(background_color_js)))\n    .add_xaxis(xaxis_data=x_data)\n    .add_yaxis(\n        series_name=\"\",\n        y_axis=[round(i * 10, 2) for i in y_data],\n        is_smooth=True,\n        is_symbol_show=True,\n        symbol=\"circle\",\n        symbol_size=6,\n        linestyle_opts=opts.LineStyleOpts(color=\"#fff\"),\n        label_opts=opts.LabelOpts(is_show=True, position=\"top\", color=\"white\"),\n        itemstyle_opts=opts.ItemStyleOpts(\n            color=\"red\", border_color=\"#fff\", border_width=3\n        ),\n        tooltip_opts=opts.TooltipOpts(is_show=False),\n        areastyle_opts=opts.AreaStyleOpts(color=JsCode(area_color_js), opacity=1),\n    )\n)\n\nbar.overlap(line)        ## 混合柱状图和线图\nbar.render_notebook()\n\n```\n结果如下\n<iframe src=\"/img/bar_line.html\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n参考\n* https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart\n","source":"_posts/Pyecharts不同颜色绘制正负柱状图.md","raw":"---\ntitle: Pyecharts 不同颜色绘制正负柱状图\ndate: 2021-09-27 10:52:10\nindex_img: /img/article/pyecharts.jpg\ncategories:\n    - Python\ntags:\n    - Pyecharts\ncomment: 'valine'\n---\n## 如题\n<!-- more -->\n```\nimport akshare as ak\nimport pyecharts.options as opts\nfrom pyecharts.charts import Bar, Line\nfrom pyecharts.commons.utils import JsCode\n\nfund_em_info_df = ak.fund_em_open_fund_info(fund=\"006008\", indicator=\"单位净值走势\")\n\nfund_name = '诺安积极配置混合C'\nx_data = fund_em_info_df['净值日期'].tolist()\ny_data = fund_em_info_df['单位净值'].tolist()\nz_data = fund_em_info_df['日增长率'].tolist()\n\nbackground_color_js = (\n    \"new echarts.graphic.LinearGradient(0, 0, 0, 1, \"\n    \"[{offset: 0, color: '#c86589'}, {offset: 1, color: '#06a7ff'}], false)\"\n)\narea_color_js = (\n    \"new echarts.graphic.LinearGradient(0, 0, 0, 1, \"\n    \"[{offset: 0, color: '#eb64fb'}, {offset: 1, color: '#3fbbff0d'}], false)\"\n)\n\n\nbar = (\n    Bar(init_opts=opts.InitOpts(bg_color=JsCode(background_color_js), width='700px', height='450px'))     ## width, height修改画布大小\n    .add_xaxis(xaxis_data=x_data)\n    .add_yaxis(\n        series_name=\"\",\n        y_axis=z_data,\n        label_opts=opts.LabelOpts(is_show=False),\n        itemstyle_opts=opts.ItemStyleOpts(\n            ### 调用js代码绘制不同颜色\n            color=JsCode(\n                \"\"\"\n                    function(params) {\n                        var colorList;\n                        if (params.data >= 0) {\n                          colorList = '#FF4500';\n                        } else {\n                          colorList = '#14b143';\n                        }\n                        return colorList;\n                    }\n                    \"\"\"\n                )\n            )\n        )\n    .set_global_opts(\n        title_opts=opts.TitleOpts(\n            title=fund_name,\n            pos_bottom=\"90%\",\n            pos_left=\"center\",\n            title_textstyle_opts=opts.TextStyleOpts(color=\"#fff\", font_size=16),\n        ),\n        xaxis_opts=opts.AxisOpts(\n            type_=\"category\",\n            boundary_gap=False,\n            axislabel_opts=opts.LabelOpts(margin=30, color=\"#ffffff63\"),\n            axisline_opts=opts.AxisLineOpts(is_show=False),\n            axistick_opts=opts.AxisTickOpts(\n                is_show=True,\n                length=25,\n                linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\"),\n            ),\n            splitline_opts=opts.SplitLineOpts(\n                is_show=True, linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\")\n            ),\n        ),\n        yaxis_opts=opts.AxisOpts(\n            type_=\"value\",\n            position=\"left\",\n            axislabel_opts=opts.LabelOpts(margin=20, color=\"#ffffff63\"),\n            axisline_opts=opts.AxisLineOpts(\n                linestyle_opts=opts.LineStyleOpts(width=2, color=\"#fff\")\n            ),\n            axistick_opts=opts.AxisTickOpts(\n                is_show=True,\n                length=15,\n                linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\"),\n            ),\n            splitline_opts=opts.SplitLineOpts(\n                is_show=True, linestyle_opts=opts.LineStyleOpts(color=\"#ffffff1f\")\n            ),\n        ),\n#         legend_opts=opts.LegendOpts(is_show=True),\n        datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(type_=\"inside\")]    ## 时间轴显示并可同通过鼠标滑动\n    )\n)\n\n\nline = (\n    Line(init_opts=opts.InitOpts(bg_color=JsCode(background_color_js)))\n    .add_xaxis(xaxis_data=x_data)\n    .add_yaxis(\n        series_name=\"\",\n        y_axis=[round(i * 10, 2) for i in y_data],\n        is_smooth=True,\n        is_symbol_show=True,\n        symbol=\"circle\",\n        symbol_size=6,\n        linestyle_opts=opts.LineStyleOpts(color=\"#fff\"),\n        label_opts=opts.LabelOpts(is_show=True, position=\"top\", color=\"white\"),\n        itemstyle_opts=opts.ItemStyleOpts(\n            color=\"red\", border_color=\"#fff\", border_width=3\n        ),\n        tooltip_opts=opts.TooltipOpts(is_show=False),\n        areastyle_opts=opts.AreaStyleOpts(color=JsCode(area_color_js), opacity=1),\n    )\n)\n\nbar.overlap(line)        ## 混合柱状图和线图\nbar.render_notebook()\n\n```\n结果如下\n<iframe src=\"/img/bar_line.html\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n参考\n* https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart\n","slug":"Pyecharts不同颜色绘制正负柱状图","published":1,"updated":"2021-09-27T06:55:15.660Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91s0006cmsodyr6hsap","content":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2><span id=\"more\"></span>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import akshare as ak<br>import pyecharts.options as opts<br><span class=\"hljs-keyword\">from</span> pyecharts.charts import Bar, Line<br><span class=\"hljs-keyword\">from</span> pyecharts.commons.utils import JsCode<br><br>fund_em_info_df = ak.fund_em_open_fund_info(<span class=\"hljs-attribute\">fund</span>=<span class=\"hljs-string\">&quot;006008&quot;</span>, <span class=\"hljs-attribute\">indicator</span>=<span class=\"hljs-string\">&quot;单位净值走势&quot;</span>)<br><br>fund_name = <span class=\"hljs-string\">&#x27;诺安积极配置混合C&#x27;</span><br>x_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;净值日期&#x27;</span>].tolist()<br>y_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;单位净值&#x27;</span>].tolist()<br>z_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;日增长率&#x27;</span>].tolist()<br><br>background_color_js = (<br>    <span class=\"hljs-string\">&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, &quot;</span><br>    <span class=\"hljs-string\">&quot;[&#123;offset: 0, color: &#x27;#c86589&#x27;&#125;, &#123;offset: 1, color: &#x27;#06a7ff&#x27;&#125;], false)&quot;</span><br>)<br>area_color_js = (<br>    <span class=\"hljs-string\">&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, &quot;</span><br>    <span class=\"hljs-string\">&quot;[&#123;offset: 0, color: &#x27;#eb64fb&#x27;&#125;, &#123;offset: 1, color: &#x27;#3fbbff0d&#x27;&#125;], false)&quot;</span><br>)<br><br><br>bar = (<br>    Bar(<span class=\"hljs-attribute\">init_opts</span>=opts.InitOpts(bg_color=JsCode(background_color_js), <span class=\"hljs-attribute\">width</span>=<span class=\"hljs-string\">&#x27;700px&#x27;</span>, <span class=\"hljs-attribute\">height</span>=<span class=\"hljs-string\">&#x27;450px&#x27;</span>))     ## width, height修改画布大小<br>    .add_xaxis(<span class=\"hljs-attribute\">xaxis_data</span>=x_data)<br>    .add_yaxis(<br>        <span class=\"hljs-attribute\">series_name</span>=<span class=\"hljs-string\">&quot;&quot;</span>,<br>        <span class=\"hljs-attribute\">y_axis</span>=z_data,<br>        <span class=\"hljs-attribute\">label_opts</span>=opts.LabelOpts(is_show=False),<br>        <span class=\"hljs-attribute\">itemstyle_opts</span>=opts.ItemStyleOpts(<br>            ### 调用js代码绘制不同颜色<br>            <span class=\"hljs-attribute\">color</span>=JsCode(<br>                <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">                    function(params) &#123;</span><br><span class=\"hljs-string\">                        var colorList;</span><br><span class=\"hljs-string\">                        if (params.data &gt;= 0) &#123;</span><br><span class=\"hljs-string\">                          colorList = &#x27;#FF4500&#x27;;</span><br><span class=\"hljs-string\">                        &#125; else &#123;</span><br><span class=\"hljs-string\">                          colorList = &#x27;#14b143&#x27;;</span><br><span class=\"hljs-string\">                        &#125;</span><br><span class=\"hljs-string\">                        return colorList;</span><br><span class=\"hljs-string\">                    &#125;</span><br><span class=\"hljs-string\">                    &quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br>                )<br>            )<br>        )<br>    .set_global_opts(<br>        <span class=\"hljs-attribute\">title_opts</span>=opts.TitleOpts(<br>            <span class=\"hljs-attribute\">title</span>=fund_name,<br>            <span class=\"hljs-attribute\">pos_bottom</span>=<span class=\"hljs-string\">&quot;90%&quot;</span>,<br>            <span class=\"hljs-attribute\">pos_left</span>=<span class=\"hljs-string\">&quot;center&quot;</span>,<br>            <span class=\"hljs-attribute\">title_textstyle_opts</span>=opts.TextStyleOpts(color=&quot;#fff&quot;, <span class=\"hljs-attribute\">font_size</span>=16),<br>        ),<br>        <span class=\"hljs-attribute\">xaxis_opts</span>=opts.AxisOpts(<br>            <span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;category&quot;</span>,<br>            <span class=\"hljs-attribute\">boundary_gap</span>=<span class=\"hljs-literal\">False</span>,<br>            <span class=\"hljs-attribute\">axislabel_opts</span>=opts.LabelOpts(margin=30, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#ffffff63&quot;</span>),<br>            <span class=\"hljs-attribute\">axisline_opts</span>=opts.AxisLineOpts(is_show=False),<br>            <span class=\"hljs-attribute\">axistick_opts</span>=opts.AxisTickOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>,<br>                <span class=\"hljs-attribute\">length</span>=25,<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;),<br>            ),<br>            <span class=\"hljs-attribute\">splitline_opts</span>=opts.SplitLineOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;)<br>            ),<br>        ),<br>        <span class=\"hljs-attribute\">yaxis_opts</span>=opts.AxisOpts(<br>            <span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;value&quot;</span>,<br>            <span class=\"hljs-attribute\">position</span>=<span class=\"hljs-string\">&quot;left&quot;</span>,<br>            <span class=\"hljs-attribute\">axislabel_opts</span>=opts.LabelOpts(margin=20, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#ffffff63&quot;</span>),<br>            <span class=\"hljs-attribute\">axisline_opts</span>=opts.AxisLineOpts(<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(width=2, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#fff&quot;</span>)<br>            ),<br>            <span class=\"hljs-attribute\">axistick_opts</span>=opts.AxisTickOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>,<br>                <span class=\"hljs-attribute\">length</span>=15,<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;),<br>            ),<br>            <span class=\"hljs-attribute\">splitline_opts</span>=opts.SplitLineOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;)<br>            ),<br>        ),<br><span class=\"hljs-comment\">#         legend_opts=opts.LegendOpts(is_show=True),</span><br>        datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(<span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;inside&quot;</span>)]    ## 时间轴显示并可同通过鼠标滑动<br>    )<br>)<br><br><br>line = (<br>    Line(<span class=\"hljs-attribute\">init_opts</span>=opts.InitOpts(bg_color=JsCode(background_color_js)))<br>    .add_xaxis(<span class=\"hljs-attribute\">xaxis_data</span>=x_data)<br>    .add_yaxis(<br>        <span class=\"hljs-attribute\">series_name</span>=<span class=\"hljs-string\">&quot;&quot;</span>,<br>        y_axis=[round(i * 10, 2) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> y_data],<br>        <span class=\"hljs-attribute\">is_smooth</span>=<span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-attribute\">is_symbol_show</span>=<span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-attribute\">symbol</span>=<span class=\"hljs-string\">&quot;circle&quot;</span>,<br>        <span class=\"hljs-attribute\">symbol_size</span>=6,<br>        <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#fff&quot;),<br>        <span class=\"hljs-attribute\">label_opts</span>=opts.LabelOpts(is_show=True, <span class=\"hljs-attribute\">position</span>=<span class=\"hljs-string\">&quot;top&quot;</span>, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;white&quot;</span>),<br>        <span class=\"hljs-attribute\">itemstyle_opts</span>=opts.ItemStyleOpts(<br>            <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-attribute\">border_color</span>=<span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-attribute\">border_width</span>=3<br>        ),<br>        <span class=\"hljs-attribute\">tooltip_opts</span>=opts.TooltipOpts(is_show=False),<br>        <span class=\"hljs-attribute\">areastyle_opts</span>=opts.AreaStyleOpts(color=JsCode(area_color_js), <span class=\"hljs-attribute\">opacity</span>=1),<br>    )<br>)<br><br>bar.overlap(line)        ## 混合柱状图和线图<br>bar.render_notebook()<br><br></code></pre></td></tr></table></figure>\n<p>结果如下</p>\n<iframe src=\"/img/bar_line.html\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n<p>参考</p>\n<ul>\n<li><a href=\"https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart\">https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2>","more":"<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">import akshare as ak<br>import pyecharts.options as opts<br><span class=\"hljs-keyword\">from</span> pyecharts.charts import Bar, Line<br><span class=\"hljs-keyword\">from</span> pyecharts.commons.utils import JsCode<br><br>fund_em_info_df = ak.fund_em_open_fund_info(<span class=\"hljs-attribute\">fund</span>=<span class=\"hljs-string\">&quot;006008&quot;</span>, <span class=\"hljs-attribute\">indicator</span>=<span class=\"hljs-string\">&quot;单位净值走势&quot;</span>)<br><br>fund_name = <span class=\"hljs-string\">&#x27;诺安积极配置混合C&#x27;</span><br>x_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;净值日期&#x27;</span>].tolist()<br>y_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;单位净值&#x27;</span>].tolist()<br>z_data = fund_em_info_df[<span class=\"hljs-string\">&#x27;日增长率&#x27;</span>].tolist()<br><br>background_color_js = (<br>    <span class=\"hljs-string\">&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, &quot;</span><br>    <span class=\"hljs-string\">&quot;[&#123;offset: 0, color: &#x27;#c86589&#x27;&#125;, &#123;offset: 1, color: &#x27;#06a7ff&#x27;&#125;], false)&quot;</span><br>)<br>area_color_js = (<br>    <span class=\"hljs-string\">&quot;new echarts.graphic.LinearGradient(0, 0, 0, 1, &quot;</span><br>    <span class=\"hljs-string\">&quot;[&#123;offset: 0, color: &#x27;#eb64fb&#x27;&#125;, &#123;offset: 1, color: &#x27;#3fbbff0d&#x27;&#125;], false)&quot;</span><br>)<br><br><br>bar = (<br>    Bar(<span class=\"hljs-attribute\">init_opts</span>=opts.InitOpts(bg_color=JsCode(background_color_js), <span class=\"hljs-attribute\">width</span>=<span class=\"hljs-string\">&#x27;700px&#x27;</span>, <span class=\"hljs-attribute\">height</span>=<span class=\"hljs-string\">&#x27;450px&#x27;</span>))     ## width, height修改画布大小<br>    .add_xaxis(<span class=\"hljs-attribute\">xaxis_data</span>=x_data)<br>    .add_yaxis(<br>        <span class=\"hljs-attribute\">series_name</span>=<span class=\"hljs-string\">&quot;&quot;</span>,<br>        <span class=\"hljs-attribute\">y_axis</span>=z_data,<br>        <span class=\"hljs-attribute\">label_opts</span>=opts.LabelOpts(is_show=False),<br>        <span class=\"hljs-attribute\">itemstyle_opts</span>=opts.ItemStyleOpts(<br>            ### 调用js代码绘制不同颜色<br>            <span class=\"hljs-attribute\">color</span>=JsCode(<br>                <span class=\"hljs-string\">&quot;&quot;</span><span class=\"hljs-string\">&quot;</span><br><span class=\"hljs-string\">                    function(params) &#123;</span><br><span class=\"hljs-string\">                        var colorList;</span><br><span class=\"hljs-string\">                        if (params.data &gt;= 0) &#123;</span><br><span class=\"hljs-string\">                          colorList = &#x27;#FF4500&#x27;;</span><br><span class=\"hljs-string\">                        &#125; else &#123;</span><br><span class=\"hljs-string\">                          colorList = &#x27;#14b143&#x27;;</span><br><span class=\"hljs-string\">                        &#125;</span><br><span class=\"hljs-string\">                        return colorList;</span><br><span class=\"hljs-string\">                    &#125;</span><br><span class=\"hljs-string\">                    &quot;</span><span class=\"hljs-string\">&quot;&quot;</span><br>                )<br>            )<br>        )<br>    .set_global_opts(<br>        <span class=\"hljs-attribute\">title_opts</span>=opts.TitleOpts(<br>            <span class=\"hljs-attribute\">title</span>=fund_name,<br>            <span class=\"hljs-attribute\">pos_bottom</span>=<span class=\"hljs-string\">&quot;90%&quot;</span>,<br>            <span class=\"hljs-attribute\">pos_left</span>=<span class=\"hljs-string\">&quot;center&quot;</span>,<br>            <span class=\"hljs-attribute\">title_textstyle_opts</span>=opts.TextStyleOpts(color=&quot;#fff&quot;, <span class=\"hljs-attribute\">font_size</span>=16),<br>        ),<br>        <span class=\"hljs-attribute\">xaxis_opts</span>=opts.AxisOpts(<br>            <span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;category&quot;</span>,<br>            <span class=\"hljs-attribute\">boundary_gap</span>=<span class=\"hljs-literal\">False</span>,<br>            <span class=\"hljs-attribute\">axislabel_opts</span>=opts.LabelOpts(margin=30, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#ffffff63&quot;</span>),<br>            <span class=\"hljs-attribute\">axisline_opts</span>=opts.AxisLineOpts(is_show=False),<br>            <span class=\"hljs-attribute\">axistick_opts</span>=opts.AxisTickOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>,<br>                <span class=\"hljs-attribute\">length</span>=25,<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;),<br>            ),<br>            <span class=\"hljs-attribute\">splitline_opts</span>=opts.SplitLineOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;)<br>            ),<br>        ),<br>        <span class=\"hljs-attribute\">yaxis_opts</span>=opts.AxisOpts(<br>            <span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;value&quot;</span>,<br>            <span class=\"hljs-attribute\">position</span>=<span class=\"hljs-string\">&quot;left&quot;</span>,<br>            <span class=\"hljs-attribute\">axislabel_opts</span>=opts.LabelOpts(margin=20, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#ffffff63&quot;</span>),<br>            <span class=\"hljs-attribute\">axisline_opts</span>=opts.AxisLineOpts(<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(width=2, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;#fff&quot;</span>)<br>            ),<br>            <span class=\"hljs-attribute\">axistick_opts</span>=opts.AxisTickOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>,<br>                <span class=\"hljs-attribute\">length</span>=15,<br>                <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;),<br>            ),<br>            <span class=\"hljs-attribute\">splitline_opts</span>=opts.SplitLineOpts(<br>                <span class=\"hljs-attribute\">is_show</span>=<span class=\"hljs-literal\">True</span>, <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#ffffff1f&quot;)<br>            ),<br>        ),<br><span class=\"hljs-comment\">#         legend_opts=opts.LegendOpts(is_show=True),</span><br>        datazoom_opts=[opts.DataZoomOpts(), opts.DataZoomOpts(<span class=\"hljs-attribute\">type_</span>=<span class=\"hljs-string\">&quot;inside&quot;</span>)]    ## 时间轴显示并可同通过鼠标滑动<br>    )<br>)<br><br><br>line = (<br>    Line(<span class=\"hljs-attribute\">init_opts</span>=opts.InitOpts(bg_color=JsCode(background_color_js)))<br>    .add_xaxis(<span class=\"hljs-attribute\">xaxis_data</span>=x_data)<br>    .add_yaxis(<br>        <span class=\"hljs-attribute\">series_name</span>=<span class=\"hljs-string\">&quot;&quot;</span>,<br>        y_axis=[round(i * 10, 2) <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> y_data],<br>        <span class=\"hljs-attribute\">is_smooth</span>=<span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-attribute\">is_symbol_show</span>=<span class=\"hljs-literal\">True</span>,<br>        <span class=\"hljs-attribute\">symbol</span>=<span class=\"hljs-string\">&quot;circle&quot;</span>,<br>        <span class=\"hljs-attribute\">symbol_size</span>=6,<br>        <span class=\"hljs-attribute\">linestyle_opts</span>=opts.LineStyleOpts(color=&quot;#fff&quot;),<br>        <span class=\"hljs-attribute\">label_opts</span>=opts.LabelOpts(is_show=True, <span class=\"hljs-attribute\">position</span>=<span class=\"hljs-string\">&quot;top&quot;</span>, <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;white&quot;</span>),<br>        <span class=\"hljs-attribute\">itemstyle_opts</span>=opts.ItemStyleOpts(<br>            <span class=\"hljs-attribute\">color</span>=<span class=\"hljs-string\">&quot;red&quot;</span>, <span class=\"hljs-attribute\">border_color</span>=<span class=\"hljs-string\">&quot;#fff&quot;</span>, <span class=\"hljs-attribute\">border_width</span>=3<br>        ),<br>        <span class=\"hljs-attribute\">tooltip_opts</span>=opts.TooltipOpts(is_show=False),<br>        <span class=\"hljs-attribute\">areastyle_opts</span>=opts.AreaStyleOpts(color=JsCode(area_color_js), <span class=\"hljs-attribute\">opacity</span>=1),<br>    )<br>)<br><br>bar.overlap(line)        ## 混合柱状图和线图<br>bar.render_notebook()<br><br></code></pre></td></tr></table></figure>\n<p>结果如下</p>\n<iframe src=\"/img/bar_line.html\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>\n\n<p>参考</p>\n<ul>\n<li><a href=\"https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart\">https://gallery.pyecharts.org/#/Candlestick/professional_kline_chart</a></li>\n</ul>"},{"title":"Python Sort Algorithm","date":"2021-08-16T07:12:24.000Z","index_img":"/img/article/Sort.jpg","comment":"valine","_content":"## Python常用排序算法\n<!-- more -->\n##### 快速排序\n```\ndef quick_sort(array):\n    if len(array) <= 1:  # 递归跳出条件\n        return array\n    pivot = array[0]\n    left = [i for i in array[1:] if i < pivot]\n    right = [i for i in array[1:] if i >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n```\n##### 冒泡排序\n```\ndef bubble_sort(array):\n    for i in range(len(array) - 1):\n        for j in range(len(array) - i -1): # 已排序好的部分不需再遍历\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n```\n##### 桶排\n```\ndef bucker_sort(array):\n    result = []\n    minVal, maxVal = min(array), max(array)\n    bucket = [0] * (maxVal - minVal + 1)  # 所需的桶数\n    for i in array:\n        bucket[i - minVal] += 1     # 每个数字出现的次数\n    for i in range(len(bucket)):\n        if bucket[i]:\n            result += [i + minVal] * bucket[i]\n    return result\n```\n","source":"_posts/PythonSortAlgorithm.md","raw":"---\ntitle: Python Sort Algorithm\ndate: 2021-08-16 15:12:24\nindex_img: /img/article/Sort.jpg\ncategories:\n    - Python\ntags:\n    - Python\ncomment: 'valine'\n---\n## Python常用排序算法\n<!-- more -->\n##### 快速排序\n```\ndef quick_sort(array):\n    if len(array) <= 1:  # 递归跳出条件\n        return array\n    pivot = array[0]\n    left = [i for i in array[1:] if i < pivot]\n    right = [i for i in array[1:] if i >= pivot]\n    return quick_sort(left) + [pivot] + quick_sort(right)\n```\n##### 冒泡排序\n```\ndef bubble_sort(array):\n    for i in range(len(array) - 1):\n        for j in range(len(array) - i -1): # 已排序好的部分不需再遍历\n            if array[j] > array[j+1]:\n                array[j], array[j+1] = array[j+1], array[j]\n    return array\n```\n##### 桶排\n```\ndef bucker_sort(array):\n    result = []\n    minVal, maxVal = min(array), max(array)\n    bucket = [0] * (maxVal - minVal + 1)  # 所需的桶数\n    for i in array:\n        bucket[i - minVal] += 1     # 每个数字出现的次数\n    for i in range(len(bucket)):\n        if bucket[i]:\n            result += [i + minVal] * bucket[i]\n    return result\n```\n","slug":"PythonSortAlgorithm","published":1,"updated":"2021-08-19T02:03:24.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91u0007cmsoe5kv6pxt","content":"<h2 id=\"Python常用排序算法\"><a href=\"#Python常用排序算法\" class=\"headerlink\" title=\"Python常用排序算法\"></a>Python常用排序算法</h2><span id=\"more\"></span>\n<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">def quick_sort(<span class=\"hljs-keyword\">array</span>):<br>    if len(<span class=\"hljs-keyword\">array</span>) <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">1</span>:  # 递归跳出条件<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span><br>    pivot <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">0</span>]<br>    <span class=\"hljs-keyword\">left</span> <span class=\"hljs-operator\">=</span> [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">1</span>:] if i <span class=\"hljs-operator\">&lt;</span> pivot]<br>    <span class=\"hljs-keyword\">right</span> <span class=\"hljs-operator\">=</span> [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">1</span>:] if i <span class=\"hljs-operator\">&gt;=</span> pivot]<br>    <span class=\"hljs-keyword\">return</span> quick_sort(<span class=\"hljs-keyword\">left</span>) <span class=\"hljs-operator\">+</span> [pivot] <span class=\"hljs-operator\">+</span> quick_sort(<span class=\"hljs-keyword\">right</span>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">def bubble_sort(<span class=\"hljs-meta\">array</span>):<br>    for i <span class=\"hljs-meta\">in</span><span class=\"hljs-meta\"> range(</span>l<span class=\"hljs-meta\">en(</span><span class=\"hljs-meta\">array</span>) - 1):<br>        for j <span class=\"hljs-meta\">in</span><span class=\"hljs-meta\"> range(</span>l<span class=\"hljs-meta\">en(</span><span class=\"hljs-meta\">array</span>) - i -1): # 已排序好的部分不需再遍历<br>            <span class=\"hljs-meta\">if</span> <span class=\"hljs-meta\">array</span>[j] &gt; <span class=\"hljs-meta\">array</span>[j+1]:<br>                <span class=\"hljs-meta\">array</span>[j], <span class=\"hljs-meta\">array</span>[j+1] = <span class=\"hljs-meta\">array</span>[j+1], <span class=\"hljs-meta\">array</span>[j]<br>    <span class=\"hljs-meta\">return</span> <span class=\"hljs-meta\">array</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">def bucker_sort(<span class=\"hljs-keyword\">array</span>):<br>    <span class=\"hljs-keyword\">result</span> <span class=\"hljs-operator\">=</span> []<br>    minVal, maxVal <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-keyword\">array</span>), <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-keyword\">array</span>)<br>    bucket <span class=\"hljs-operator\">=</span> [<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">*</span> (maxVal <span class=\"hljs-operator\">-</span> minVal <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)  # 所需的桶数<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>:<br>        bucket[i <span class=\"hljs-operator\">-</span> minVal] <span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>     # 每个数字出现的次数<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">range</span>(len(bucket)):<br>        if bucket[i]:<br>            <span class=\"hljs-keyword\">result</span> <span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">=</span> [i <span class=\"hljs-operator\">+</span> minVal] <span class=\"hljs-operator\">*</span> bucket[i]<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">result</span><br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python常用排序算法\"><a href=\"#Python常用排序算法\" class=\"headerlink\" title=\"Python常用排序算法\"></a>Python常用排序算法</h2>","more":"<h5 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">def quick_sort(<span class=\"hljs-keyword\">array</span>):<br>    if len(<span class=\"hljs-keyword\">array</span>) <span class=\"hljs-operator\">&lt;=</span> <span class=\"hljs-number\">1</span>:  # 递归跳出条件<br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span><br>    pivot <span class=\"hljs-operator\">=</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">0</span>]<br>    <span class=\"hljs-keyword\">left</span> <span class=\"hljs-operator\">=</span> [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">1</span>:] if i <span class=\"hljs-operator\">&lt;</span> pivot]<br>    <span class=\"hljs-keyword\">right</span> <span class=\"hljs-operator\">=</span> [i <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>[<span class=\"hljs-number\">1</span>:] if i <span class=\"hljs-operator\">&gt;=</span> pivot]<br>    <span class=\"hljs-keyword\">return</span> quick_sort(<span class=\"hljs-keyword\">left</span>) <span class=\"hljs-operator\">+</span> [pivot] <span class=\"hljs-operator\">+</span> quick_sort(<span class=\"hljs-keyword\">right</span>)<br></code></pre></td></tr></table></figure>\n<h5 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h5><figure class=\"highlight sas\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sas\">def bubble_sort(<span class=\"hljs-meta\">array</span>):<br>    for i <span class=\"hljs-meta\">in</span><span class=\"hljs-meta\"> range(</span>l<span class=\"hljs-meta\">en(</span><span class=\"hljs-meta\">array</span>) - 1):<br>        for j <span class=\"hljs-meta\">in</span><span class=\"hljs-meta\"> range(</span>l<span class=\"hljs-meta\">en(</span><span class=\"hljs-meta\">array</span>) - i -1): # 已排序好的部分不需再遍历<br>            <span class=\"hljs-meta\">if</span> <span class=\"hljs-meta\">array</span>[j] &gt; <span class=\"hljs-meta\">array</span>[j+1]:<br>                <span class=\"hljs-meta\">array</span>[j], <span class=\"hljs-meta\">array</span>[j+1] = <span class=\"hljs-meta\">array</span>[j+1], <span class=\"hljs-meta\">array</span>[j]<br>    <span class=\"hljs-meta\">return</span> <span class=\"hljs-meta\">array</span><br></code></pre></td></tr></table></figure>\n<h5 id=\"桶排\"><a href=\"#桶排\" class=\"headerlink\" title=\"桶排\"></a>桶排</h5><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs sql\">def bucker_sort(<span class=\"hljs-keyword\">array</span>):<br>    <span class=\"hljs-keyword\">result</span> <span class=\"hljs-operator\">=</span> []<br>    minVal, maxVal <span class=\"hljs-operator\">=</span> <span class=\"hljs-built_in\">min</span>(<span class=\"hljs-keyword\">array</span>), <span class=\"hljs-built_in\">max</span>(<span class=\"hljs-keyword\">array</span>)<br>    bucket <span class=\"hljs-operator\">=</span> [<span class=\"hljs-number\">0</span>] <span class=\"hljs-operator\">*</span> (maxVal <span class=\"hljs-operator\">-</span> minVal <span class=\"hljs-operator\">+</span> <span class=\"hljs-number\">1</span>)  # 所需的桶数<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">array</span>:<br>        bucket[i <span class=\"hljs-operator\">-</span> minVal] <span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">=</span> <span class=\"hljs-number\">1</span>     # 每个数字出现的次数<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">range</span>(len(bucket)):<br>        if bucket[i]:<br>            <span class=\"hljs-keyword\">result</span> <span class=\"hljs-operator\">+</span><span class=\"hljs-operator\">=</span> [i <span class=\"hljs-operator\">+</span> minVal] <span class=\"hljs-operator\">*</span> bucket[i]<br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">result</span><br></code></pre></td></tr></table></figure>"},{"title":"Pytorch 学习入门","date":"2021-09-16T06:22:40.000Z","index_img":"/img/article/pytorch.jpg","comment":"valine","_content":"## Pytorch Learning Note\n<!-- more -->\n##### torch.nn\nModule：创建一个行为类似于函数的可调用对象，但也可以包含状态（例如神经网络层权重）。 它知道其中包含的 Parameter ，并且可以将其所有坡度归零，遍历它们以进行权重更新等。\nParameter：张量的包装器，用于告知 Module 具有在反向传播期间需要更新的权重。 仅更新具有require_grad属性集的张量\nfunctional：一个模块（通常按照惯例导入到 F 名称空间中），其中包含激活函数，损失函数等。 以及卷积和线性层等层的无状态版本。\n##### torch.optim\n包含诸如 SGD 的优化程序，这些优化程序在后退步骤\n##### Dataset \n更新 Parameter 的权重。 具有__len__和__getitem__的对象，包括 Pytorch 提供的类，例如 TensorDataset\n##### DataLoader\n获取任何 Dataset 并创建一个迭代器，该迭代器返回批量数据。\n\n```python\nfrom pathlib import Path\nimport requests\n\nDATA_PATH = Path(\"data\")\nPATH = DATA_PATH / \"mnist\"\n\nPATH.mkdir(parents=True, exist_ok=True)\n\nURL = \"https://github.com/pytorch/tutorials/raw/master/_static/\"\nFILENAME = \"mnist.pkl.gz\"\n\nif not (PATH / FILENAME).exists():\n        content = requests.get(URL + FILENAME).content\n        (PATH / FILENAME).open(\"wb\").write(content)\n```\n\n\n```python\nimport pickle\nimport gzip\n\nwith gzip.open((PATH / FILENAME).as_posix(), \"rb\") as f:\n        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=\"latin-1\")\n```\n\n\n```python\nfrom matplotlib import pyplot\nimport numpy as np\n\npyplot.imshow(x_train[0].reshape((28, 28)), cmap=\"gray\")\nprint(x_train.shape)\n```\n\n    (50000, 784)\n    \n\n\n<!-- ![png](output_2_1.png) -->\n\n\n```python\nimport torch\n\nx_train, y_train, x_valid, y_valid = map(\n    torch.tensor, (x_train, y_train, x_valid, y_valid)\n)\nn, c = x_train.shape\nx_train, x_train.shape, y_train.min(), y_train.max()\nprint(x_train, y_train)\nprint(x_train.shape)\nprint(y_train.min(), y_train.max())\n```\n\n    tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            ...,\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\n    torch.Size([50000, 784])\n    tensor(0) tensor(9)\n    \n\n##### 从0构建神经网络线性模型\n```python\nimport math\n\nweights = torch.randn(784, 10) / math.sqrt(784)\nweights.requires_grad_()\nbias = torch.zeros(10, requires_grad=True)\n\n## softmax激活函数\ndef log_softmax(x):\n    return x - x.exp().sum(-1).log().unsqueeze(-1)\n\ndef model(xb):\n    return log_softmax(xb @ weights + bias)  #  @代表点积运算\n\nbs = 64  # batch size\n\nxb = x_train[0:bs]  # a mini-batch from x\npreds = model(xb)  # predictions\npreds[0], preds.shape\nprint(preds[0], preds.shape)\n\n## 损失函数\ndef nll(input, target):\n    return -input[range(target.shape[0]), target].mean()\n\nloss_func = nll\n\nyb = y_train[0:bs]\nprint(loss_func(preds, yb))\n\ndef accuracy(out, yb):\n    preds = torch.argmax(out, dim=1)\n    return (preds == yb).float().mean()\n\nprint(accuracy(preds, yb))\n\nfrom IPython.core.debugger import set_trace\n\nlr = 0.5  # learning rate\nepochs = 2  # how many epochs to train for\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        #         set_trace()\n        start_i = i * bs\n        end_i = start_i + bs\n        xb = x_train[start_i:end_i]\n        yb = y_train[start_i:end_i]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        with torch.no_grad():\n            weights -= weights.grad * lr\n            bias -= bias.grad * lr\n            weights.grad.zero_()\n            bias.grad.zero_()\n            \nprint(loss_func(model(xb), yb), accuracy(model(xb), yb))\n\n```\n\n    tensor([-2.5487, -2.8346, -2.7262, -2.1794, -2.1199, -2.1041, -1.9327, -2.1947,\n            -2.5637, -2.2133], grad_fn=<SelectBackward>) torch.Size([64, 10])\n    tensor(2.3308, grad_fn=<NegBackward>)\n    tensor(0.1094)\n    tensor(0.0806, grad_fn=<NegBackward>) tensor(1.)\n    \n\n##### 使用torch.nn.functional 重构\n```python\nimport torch.nn.functional as F\n\nloss_func = F.cross_entropy\n\ndef model(xb):\n    return xb @ weights + bias\n\nprint(loss_func(model(xb), yb), accuracy(model(xb), yb))\n\n```\n\n    tensor(0.0806, grad_fn=<NllLossBackward>) tensor(1.)\n    \n\n##### 使用nn.Module重构\n```python\nfrom torch import nn\n\nclass Mnist_Logistic(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.weights = nn.Parameter(torch.randn(784, 10) / math.sqrt(784))\n        self.bias = nn.Parameter(torch.zeros(10))\n\n    def forward(self, xb):\n        return xb @ self.weights + self.bias\n    \nmodel = Mnist_Logistic()\nprint(loss_func(model(xb), yb))\n\n    \ndef fit():\n    for epoch in range(epochs):\n        for i in range((n - 1) // bs + 1):\n            start_i = i * bs\n            end_i = start_i + bs\n            xb = x_train[start_i:end_i]\n            yb = y_train[start_i:end_i]\n            pred = model(xb)\n            loss = loss_func(pred, yb)\n\n            loss.backward()\n            with torch.no_grad():\n                for p in model.parameters():\n                    p -= p.grad * lr\n                model.zero_grad()\n\nfit()\nprint(loss_func(model(xb), yb))\n\n```\n\n    tensor(2.4222, grad_fn=<NllLossBackward>)\n    tensor(0.0817, grad_fn=<NllLossBackward>)\n    \n\n##### 使用nn.Linear重构\n```python\nclass Mnist_Logistic(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.lin = nn.Linear(784, 10)\n\n    def forward(self, xb):\n        return self.lin(xb)\n    \nmodel = Mnist_Logistic()\nprint(loss_func(model(xb), yb))\nfit()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(2.3090, grad_fn=<NllLossBackward>)\n    tensor(0.0824, grad_fn=<NllLossBackward>)\n    \n\n##### 使用optim重构\n```python\nfrom torch import optim\n\ndef get_model():\n    model = Mnist_Logistic()\n    return model, optim.SGD(model.parameters(), lr=lr)\n\nmodel, opt = get_model()\nprint(loss_func(model(xb), yb))\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        start_i = i * bs\n        end_i = start_i + bs\n        xb = x_train[start_i:end_i]\n        yb = y_train[start_i:end_i]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(2.2990, grad_fn=<NllLossBackward>)\n    tensor(0.0805, grad_fn=<NllLossBackward>)\n    \n\n##### 使用Dataset重构\n```python\nfrom torch.utils.data import TensorDataset\n\ntrain_ds = TensorDataset(x_train, y_train)\nxb,yb = train_ds[i*bs : i*bs+bs]\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        xb, yb = train_ds[i * bs: i * bs + bs]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(0.0817, grad_fn=<NllLossBackward>)\n    \n\n##### 使用DataLoader重构\n```python\nfrom torch.utils.data import DataLoader\n\ntrain_ds = TensorDataset(x_train, y_train)\ntrain_dl = DataLoader(train_ds, batch_size=bs)\n\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    for xb, yb in train_dl:\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(0.0803, grad_fn=<NllLossBackward>)\n    \n\n##### 添加验证\n```python\ntrain_ds = TensorDataset(x_train, y_train)\ntrain_dl = DataLoader(train_ds, batch_size=bs, shuffle=True)\n\nvalid_ds = TensorDataset(x_valid, y_valid)\nvalid_dl = DataLoader(valid_ds, batch_size=bs * 2)\n\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    model.train()\n    for xb, yb in train_dl:\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\n    model.eval()\n    with torch.no_grad():\n        valid_loss = sum(loss_func(model(xb), yb) for xb, yb in valid_dl)\n\n    print(epoch, valid_loss / len(valid_dl))\n```\n\n    0 tensor(0.3093)\n    1 tensor(0.3198)\n    \n\n\n```python\n## 创建fit()和get_data()\ndef loss_batch(model, loss_func, xb, yb, opt=None):\n    loss = loss_func(model(xb), yb)\n\n    if opt is not None:\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\n    return loss.item(), len(xb)\n\nimport numpy as np\n\ndef fit(epochs, model, loss_func, opt, train_dl, valid_dl):\n    for epoch in range(epochs):\n        model.train()\n        for xb, yb in train_dl:\n            loss_batch(model, loss_func, xb, yb, opt)\n\n        model.eval()\n        with torch.no_grad():\n            losses, nums = zip(\n                *[loss_batch(model, loss_func, xb, yb) for xb, yb in valid_dl]\n            )\n        val_loss = np.sum(np.multiply(losses, nums)) / np.sum(nums)\n\n        print(epoch, val_loss)\n        \ndef get_data(train_ds, valid_ds, bs):\n    return (\n        DataLoader(train_ds, batch_size=bs, shuffle=True),\n        DataLoader(valid_ds, batch_size=bs * 2),\n    )\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\nmodel, opt = get_model()\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.3313611475586891\n    1 0.35820939881801606\n    \n\n##### 切换到 CNN\n```python\nclass Mnist_CNN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1)\n        self.conv3 = nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1)\n\n    def forward(self, xb):\n        xb = xb.view(-1, 1, 28, 28)\n        xb = F.relu(self.conv1(xb))\n        xb = F.relu(self.conv2(xb))\n        xb = F.relu(self.conv3(xb))\n        xb = F.avg_pool2d(xb, 4)\n        return xb.view(-1, xb.size(1))\n\nlr = 0.1\n\nmodel = Mnist_CNN()\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.2936670451879501\n    1 0.21561954822540283\n    \n\n##### nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。\n```python\nclass Lambda(nn.Module):\n    def __init__(self, func):\n        super().__init__()\n        self.func = func\n\n    def forward(self, x):\n        return self.func(x)\n\ndef preprocess(x):\n    return x.view(-1, 1, 28, 28)\n\nmodel = nn.Sequential(\n    Lambda(preprocess),\n    nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AvgPool2d(4),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.4037924102306366\n    1 0.25595326462984086\n    \n\n##### 包装DataLoader\n```python\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28), y\n\nclass WrappedDataLoader:\n    def __init__(self, dl, func):\n        self.dl = dl\n        self.func = func\n\n    def __len__(self):\n        return len(self.dl)\n\n    def __iter__(self):\n        batches = iter(self.dl)\n        for b in batches:\n            yield (self.func(*b))\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess)\n\nmodel = nn.Sequential(\n    nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AdaptiveAvgPool2d(1),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n\n```\n\n    0 0.31396417818069455\n    1 0.2551067463874817\n    \n\n##### 使用GPU，，，如果有\n```python\nprint(torch.cuda.is_available())\ndev = torch.device(\n    \"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28).to(dev), y.to(dev)\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess)\n\nmodel.to(dev)\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n\n```\n\n    False\n    0 0.22373724069595338\n    1 0.2494806985616684\n    \n\n","source":"_posts/Pytorch-learning.md","raw":"---\ntitle: Pytorch 学习入门\ndate: 2021-09-16 14:22:40\nindex_img: /img/article/pytorch.jpg\ncategories:\n    - Python\ntags:\n    - Pytorch\ncomment: 'valine'\n---\n## Pytorch Learning Note\n<!-- more -->\n##### torch.nn\nModule：创建一个行为类似于函数的可调用对象，但也可以包含状态（例如神经网络层权重）。 它知道其中包含的 Parameter ，并且可以将其所有坡度归零，遍历它们以进行权重更新等。\nParameter：张量的包装器，用于告知 Module 具有在反向传播期间需要更新的权重。 仅更新具有require_grad属性集的张量\nfunctional：一个模块（通常按照惯例导入到 F 名称空间中），其中包含激活函数，损失函数等。 以及卷积和线性层等层的无状态版本。\n##### torch.optim\n包含诸如 SGD 的优化程序，这些优化程序在后退步骤\n##### Dataset \n更新 Parameter 的权重。 具有__len__和__getitem__的对象，包括 Pytorch 提供的类，例如 TensorDataset\n##### DataLoader\n获取任何 Dataset 并创建一个迭代器，该迭代器返回批量数据。\n\n```python\nfrom pathlib import Path\nimport requests\n\nDATA_PATH = Path(\"data\")\nPATH = DATA_PATH / \"mnist\"\n\nPATH.mkdir(parents=True, exist_ok=True)\n\nURL = \"https://github.com/pytorch/tutorials/raw/master/_static/\"\nFILENAME = \"mnist.pkl.gz\"\n\nif not (PATH / FILENAME).exists():\n        content = requests.get(URL + FILENAME).content\n        (PATH / FILENAME).open(\"wb\").write(content)\n```\n\n\n```python\nimport pickle\nimport gzip\n\nwith gzip.open((PATH / FILENAME).as_posix(), \"rb\") as f:\n        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=\"latin-1\")\n```\n\n\n```python\nfrom matplotlib import pyplot\nimport numpy as np\n\npyplot.imshow(x_train[0].reshape((28, 28)), cmap=\"gray\")\nprint(x_train.shape)\n```\n\n    (50000, 784)\n    \n\n\n<!-- ![png](output_2_1.png) -->\n\n\n```python\nimport torch\n\nx_train, y_train, x_valid, y_valid = map(\n    torch.tensor, (x_train, y_train, x_valid, y_valid)\n)\nn, c = x_train.shape\nx_train, x_train.shape, y_train.min(), y_train.max()\nprint(x_train, y_train)\nprint(x_train.shape)\nprint(y_train.min(), y_train.max())\n```\n\n    tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            ...,\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.],\n            [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\n    torch.Size([50000, 784])\n    tensor(0) tensor(9)\n    \n\n##### 从0构建神经网络线性模型\n```python\nimport math\n\nweights = torch.randn(784, 10) / math.sqrt(784)\nweights.requires_grad_()\nbias = torch.zeros(10, requires_grad=True)\n\n## softmax激活函数\ndef log_softmax(x):\n    return x - x.exp().sum(-1).log().unsqueeze(-1)\n\ndef model(xb):\n    return log_softmax(xb @ weights + bias)  #  @代表点积运算\n\nbs = 64  # batch size\n\nxb = x_train[0:bs]  # a mini-batch from x\npreds = model(xb)  # predictions\npreds[0], preds.shape\nprint(preds[0], preds.shape)\n\n## 损失函数\ndef nll(input, target):\n    return -input[range(target.shape[0]), target].mean()\n\nloss_func = nll\n\nyb = y_train[0:bs]\nprint(loss_func(preds, yb))\n\ndef accuracy(out, yb):\n    preds = torch.argmax(out, dim=1)\n    return (preds == yb).float().mean()\n\nprint(accuracy(preds, yb))\n\nfrom IPython.core.debugger import set_trace\n\nlr = 0.5  # learning rate\nepochs = 2  # how many epochs to train for\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        #         set_trace()\n        start_i = i * bs\n        end_i = start_i + bs\n        xb = x_train[start_i:end_i]\n        yb = y_train[start_i:end_i]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        with torch.no_grad():\n            weights -= weights.grad * lr\n            bias -= bias.grad * lr\n            weights.grad.zero_()\n            bias.grad.zero_()\n            \nprint(loss_func(model(xb), yb), accuracy(model(xb), yb))\n\n```\n\n    tensor([-2.5487, -2.8346, -2.7262, -2.1794, -2.1199, -2.1041, -1.9327, -2.1947,\n            -2.5637, -2.2133], grad_fn=<SelectBackward>) torch.Size([64, 10])\n    tensor(2.3308, grad_fn=<NegBackward>)\n    tensor(0.1094)\n    tensor(0.0806, grad_fn=<NegBackward>) tensor(1.)\n    \n\n##### 使用torch.nn.functional 重构\n```python\nimport torch.nn.functional as F\n\nloss_func = F.cross_entropy\n\ndef model(xb):\n    return xb @ weights + bias\n\nprint(loss_func(model(xb), yb), accuracy(model(xb), yb))\n\n```\n\n    tensor(0.0806, grad_fn=<NllLossBackward>) tensor(1.)\n    \n\n##### 使用nn.Module重构\n```python\nfrom torch import nn\n\nclass Mnist_Logistic(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.weights = nn.Parameter(torch.randn(784, 10) / math.sqrt(784))\n        self.bias = nn.Parameter(torch.zeros(10))\n\n    def forward(self, xb):\n        return xb @ self.weights + self.bias\n    \nmodel = Mnist_Logistic()\nprint(loss_func(model(xb), yb))\n\n    \ndef fit():\n    for epoch in range(epochs):\n        for i in range((n - 1) // bs + 1):\n            start_i = i * bs\n            end_i = start_i + bs\n            xb = x_train[start_i:end_i]\n            yb = y_train[start_i:end_i]\n            pred = model(xb)\n            loss = loss_func(pred, yb)\n\n            loss.backward()\n            with torch.no_grad():\n                for p in model.parameters():\n                    p -= p.grad * lr\n                model.zero_grad()\n\nfit()\nprint(loss_func(model(xb), yb))\n\n```\n\n    tensor(2.4222, grad_fn=<NllLossBackward>)\n    tensor(0.0817, grad_fn=<NllLossBackward>)\n    \n\n##### 使用nn.Linear重构\n```python\nclass Mnist_Logistic(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.lin = nn.Linear(784, 10)\n\n    def forward(self, xb):\n        return self.lin(xb)\n    \nmodel = Mnist_Logistic()\nprint(loss_func(model(xb), yb))\nfit()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(2.3090, grad_fn=<NllLossBackward>)\n    tensor(0.0824, grad_fn=<NllLossBackward>)\n    \n\n##### 使用optim重构\n```python\nfrom torch import optim\n\ndef get_model():\n    model = Mnist_Logistic()\n    return model, optim.SGD(model.parameters(), lr=lr)\n\nmodel, opt = get_model()\nprint(loss_func(model(xb), yb))\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        start_i = i * bs\n        end_i = start_i + bs\n        xb = x_train[start_i:end_i]\n        yb = y_train[start_i:end_i]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(2.2990, grad_fn=<NllLossBackward>)\n    tensor(0.0805, grad_fn=<NllLossBackward>)\n    \n\n##### 使用Dataset重构\n```python\nfrom torch.utils.data import TensorDataset\n\ntrain_ds = TensorDataset(x_train, y_train)\nxb,yb = train_ds[i*bs : i*bs+bs]\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    for i in range((n - 1) // bs + 1):\n        xb, yb = train_ds[i * bs: i * bs + bs]\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(0.0817, grad_fn=<NllLossBackward>)\n    \n\n##### 使用DataLoader重构\n```python\nfrom torch.utils.data import DataLoader\n\ntrain_ds = TensorDataset(x_train, y_train)\ntrain_dl = DataLoader(train_ds, batch_size=bs)\n\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    for xb, yb in train_dl:\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\nprint(loss_func(model(xb), yb))\n```\n\n    tensor(0.0803, grad_fn=<NllLossBackward>)\n    \n\n##### 添加验证\n```python\ntrain_ds = TensorDataset(x_train, y_train)\ntrain_dl = DataLoader(train_ds, batch_size=bs, shuffle=True)\n\nvalid_ds = TensorDataset(x_valid, y_valid)\nvalid_dl = DataLoader(valid_ds, batch_size=bs * 2)\n\nmodel, opt = get_model()\n\nfor epoch in range(epochs):\n    model.train()\n    for xb, yb in train_dl:\n        pred = model(xb)\n        loss = loss_func(pred, yb)\n\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\n    model.eval()\n    with torch.no_grad():\n        valid_loss = sum(loss_func(model(xb), yb) for xb, yb in valid_dl)\n\n    print(epoch, valid_loss / len(valid_dl))\n```\n\n    0 tensor(0.3093)\n    1 tensor(0.3198)\n    \n\n\n```python\n## 创建fit()和get_data()\ndef loss_batch(model, loss_func, xb, yb, opt=None):\n    loss = loss_func(model(xb), yb)\n\n    if opt is not None:\n        loss.backward()\n        opt.step()\n        opt.zero_grad()\n\n    return loss.item(), len(xb)\n\nimport numpy as np\n\ndef fit(epochs, model, loss_func, opt, train_dl, valid_dl):\n    for epoch in range(epochs):\n        model.train()\n        for xb, yb in train_dl:\n            loss_batch(model, loss_func, xb, yb, opt)\n\n        model.eval()\n        with torch.no_grad():\n            losses, nums = zip(\n                *[loss_batch(model, loss_func, xb, yb) for xb, yb in valid_dl]\n            )\n        val_loss = np.sum(np.multiply(losses, nums)) / np.sum(nums)\n\n        print(epoch, val_loss)\n        \ndef get_data(train_ds, valid_ds, bs):\n    return (\n        DataLoader(train_ds, batch_size=bs, shuffle=True),\n        DataLoader(valid_ds, batch_size=bs * 2),\n    )\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\nmodel, opt = get_model()\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.3313611475586891\n    1 0.35820939881801606\n    \n\n##### 切换到 CNN\n```python\nclass Mnist_CNN(nn.Module):\n    def __init__(self):\n        super().__init__()\n        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1)\n        self.conv2 = nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1)\n        self.conv3 = nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1)\n\n    def forward(self, xb):\n        xb = xb.view(-1, 1, 28, 28)\n        xb = F.relu(self.conv1(xb))\n        xb = F.relu(self.conv2(xb))\n        xb = F.relu(self.conv3(xb))\n        xb = F.avg_pool2d(xb, 4)\n        return xb.view(-1, xb.size(1))\n\nlr = 0.1\n\nmodel = Mnist_CNN()\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.2936670451879501\n    1 0.21561954822540283\n    \n\n##### nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。\n```python\nclass Lambda(nn.Module):\n    def __init__(self, func):\n        super().__init__()\n        self.func = func\n\n    def forward(self, x):\n        return self.func(x)\n\ndef preprocess(x):\n    return x.view(-1, 1, 28, 28)\n\nmodel = nn.Sequential(\n    Lambda(preprocess),\n    nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AvgPool2d(4),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n```\n\n    0 0.4037924102306366\n    1 0.25595326462984086\n    \n\n##### 包装DataLoader\n```python\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28), y\n\nclass WrappedDataLoader:\n    def __init__(self, dl, func):\n        self.dl = dl\n        self.func = func\n\n    def __len__(self):\n        return len(self.dl)\n\n    def __iter__(self):\n        batches = iter(self.dl)\n        for b in batches:\n            yield (self.func(*b))\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess)\n\nmodel = nn.Sequential(\n    nn.Conv2d(1, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 16, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.Conv2d(16, 10, kernel_size=3, stride=2, padding=1),\n    nn.ReLU(),\n    nn.AdaptiveAvgPool2d(1),\n    Lambda(lambda x: x.view(x.size(0), -1)),\n)\n\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\n\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n\n```\n\n    0 0.31396417818069455\n    1 0.2551067463874817\n    \n\n##### 使用GPU，，，如果有\n```python\nprint(torch.cuda.is_available())\ndev = torch.device(\n    \"cuda\") if torch.cuda.is_available() else torch.device(\"cpu\")\n\ndef preprocess(x, y):\n    return x.view(-1, 1, 28, 28).to(dev), y.to(dev)\n\ntrain_dl, valid_dl = get_data(train_ds, valid_ds, bs)\ntrain_dl = WrappedDataLoader(train_dl, preprocess)\nvalid_dl = WrappedDataLoader(valid_dl, preprocess)\n\nmodel.to(dev)\nopt = optim.SGD(model.parameters(), lr=lr, momentum=0.9)\nfit(epochs, model, loss_func, opt, train_dl, valid_dl)\n\n```\n\n    False\n    0 0.22373724069595338\n    1 0.2494806985616684\n    \n\n","slug":"Pytorch-learning","published":1,"updated":"2021-09-16T07:51:13.890Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91w0008cmso08r5an5m","content":"<h2 id=\"Pytorch-Learning-Note\"><a href=\"#Pytorch-Learning-Note\" class=\"headerlink\" title=\"Pytorch Learning Note\"></a>Pytorch Learning Note</h2><span id=\"more\"></span>\n<h5 id=\"torch-nn\"><a href=\"#torch-nn\" class=\"headerlink\" title=\"torch.nn\"></a>torch.nn</h5><p>Module：创建一个行为类似于函数的可调用对象，但也可以包含状态（例如神经网络层权重）。 它知道其中包含的 Parameter ，并且可以将其所有坡度归零，遍历它们以进行权重更新等。<br>Parameter：张量的包装器，用于告知 Module 具有在反向传播期间需要更新的权重。 仅更新具有require_grad属性集的张量<br>functional：一个模块（通常按照惯例导入到 F 名称空间中），其中包含激活函数，损失函数等。 以及卷积和线性层等层的无状态版本。</p>\n<h5 id=\"torch-optim\"><a href=\"#torch-optim\" class=\"headerlink\" title=\"torch.optim\"></a>torch.optim</h5><p>包含诸如 SGD 的优化程序，这些优化程序在后退步骤</p>\n<h5 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h5><p>更新 Parameter 的权重。 具有__len__和__getitem__的对象，包括 Pytorch 提供的类，例如 TensorDataset</p>\n<h5 id=\"DataLoader\"><a href=\"#DataLoader\" class=\"headerlink\" title=\"DataLoader\"></a>DataLoader</h5><p>获取任何 Dataset 并创建一个迭代器，该迭代器返回批量数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path<br><span class=\"hljs-keyword\">import</span> requests<br><br>DATA_PATH = Path(<span class=\"hljs-string\">&quot;data&quot;</span>)<br>PATH = DATA_PATH / <span class=\"hljs-string\">&quot;mnist&quot;</span><br><br>PATH.mkdir(parents=<span class=\"hljs-literal\">True</span>, exist_ok=<span class=\"hljs-literal\">True</span>)<br><br>URL = <span class=\"hljs-string\">&quot;https://github.com/pytorch/tutorials/raw/master/_static/&quot;</span><br>FILENAME = <span class=\"hljs-string\">&quot;mnist.pkl.gz&quot;</span><br><br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (PATH / FILENAME).exists():<br>        content = requests.get(URL + FILENAME).content<br>        (PATH / FILENAME).<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;wb&quot;</span>).write(content)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pickle<br><span class=\"hljs-keyword\">import</span> gzip<br><br><span class=\"hljs-keyword\">with</span> gzip.<span class=\"hljs-built_in\">open</span>((PATH / FILENAME).as_posix(), <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=<span class=\"hljs-string\">&quot;latin-1&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>pyplot.imshow(x_train[<span class=\"hljs-number\">0</span>].reshape((<span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)), cmap=<span class=\"hljs-string\">&quot;gray&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(x_train.shape)<br></code></pre></td></tr></table></figure>\n\n<pre><code>(50000, 784)\n</code></pre>\n<!-- ![png](output_2_1.png) -->\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> torch<br><br>x_train, y_train, x_valid, y_valid = <span class=\"hljs-built_in\">map</span>(<br>    torch.tensor, (x_train, y_train, x_valid, y_valid)<br>)<br>n, c = x_train.shape<br>x_train, x_train.shape, y_train.<span class=\"hljs-built_in\">min</span>(), y_train.<span class=\"hljs-built_in\">max</span>()<br><span class=\"hljs-built_in\">print</span>(x_train, y_train)<br><span class=\"hljs-built_in\">print</span>(x_train.shape)<br><span class=\"hljs-built_in\">print</span>(y_train.<span class=\"hljs-built_in\">min</span>(), y_train.<span class=\"hljs-built_in\">max</span>())<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\ntorch.Size([50000, 784])\ntensor(0) tensor(9)\n</code></pre>\n<h5 id=\"从0构建神经网络线性模型\"><a href=\"#从0构建神经网络线性模型\" class=\"headerlink\" title=\"从0构建神经网络线性模型\"></a>从0构建神经网络线性模型</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math<br><br>weights = torch.randn(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>) / math.sqrt(<span class=\"hljs-number\">784</span>)<br>weights.requires_grad_()<br>bias = torch.zeros(<span class=\"hljs-number\">10</span>, requires_grad=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-comment\">## softmax激活函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">log_softmax</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x - x.exp().<span class=\"hljs-built_in\">sum</span>(-<span class=\"hljs-number\">1</span>).log().unsqueeze(-<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">model</span>(<span class=\"hljs-params\">xb</span>):</span><br>    <span class=\"hljs-keyword\">return</span> log_softmax(xb @ weights + bias)  <span class=\"hljs-comment\">#  @代表点积运算</span><br><br>bs = <span class=\"hljs-number\">64</span>  <span class=\"hljs-comment\"># batch size</span><br><br>xb = x_train[<span class=\"hljs-number\">0</span>:bs]  <span class=\"hljs-comment\"># a mini-batch from x</span><br>preds = model(xb)  <span class=\"hljs-comment\"># predictions</span><br>preds[<span class=\"hljs-number\">0</span>], preds.shape<br><span class=\"hljs-built_in\">print</span>(preds[<span class=\"hljs-number\">0</span>], preds.shape)<br><br><span class=\"hljs-comment\">## 损失函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">nll</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, target</span>):</span><br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-built_in\">input</span>[<span class=\"hljs-built_in\">range</span>(target.shape[<span class=\"hljs-number\">0</span>]), target].mean()<br><br>loss_func = nll<br><br>yb = y_train[<span class=\"hljs-number\">0</span>:bs]<br><span class=\"hljs-built_in\">print</span>(loss_func(preds, yb))<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">accuracy</span>(<span class=\"hljs-params\">out, yb</span>):</span><br>    preds = torch.argmax(out, dim=<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> (preds == yb).<span class=\"hljs-built_in\">float</span>().mean()<br><br><span class=\"hljs-built_in\">print</span>(accuracy(preds, yb))<br><br><span class=\"hljs-keyword\">from</span> IPython.core.debugger <span class=\"hljs-keyword\">import</span> set_trace<br><br>lr = <span class=\"hljs-number\">0.5</span>  <span class=\"hljs-comment\"># learning rate</span><br>epochs = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># how many epochs to train for</span><br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        <span class=\"hljs-comment\">#         set_trace()</span><br>        start_i = i * bs<br>        end_i = start_i + bs<br>        xb = x_train[start_i:end_i]<br>        yb = y_train[start_i:end_i]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>            weights -= weights.grad * lr<br>            bias -= bias.grad * lr<br>            weights.grad.zero_()<br>            bias.grad.zero_()<br>            <br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb), accuracy(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor([-2.5487, -2.8346, -2.7262, -2.1794, -2.1199, -2.1041, -1.9327, -2.1947,\n        -2.5637, -2.2133], grad_fn=&lt;SelectBackward&gt;) torch.Size([64, 10])\ntensor(2.3308, grad_fn=&lt;NegBackward&gt;)\ntensor(0.1094)\ntensor(0.0806, grad_fn=&lt;NegBackward&gt;) tensor(1.)\n</code></pre>\n<h5 id=\"使用torch-nn-functional-重构\"><a href=\"#使用torch-nn-functional-重构\" class=\"headerlink\" title=\"使用torch.nn.functional 重构\"></a>使用torch.nn.functional 重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> torch.nn.functional <span class=\"hljs-keyword\">as</span> F<br><br>loss_func = F.cross_entropy<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">model</span>(<span class=\"hljs-params\">xb</span>):</span><br>    <span class=\"hljs-keyword\">return</span> xb @ weights + bias<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb), accuracy(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0806, grad_fn=&lt;NllLossBackward&gt;) tensor(1.)\n</code></pre>\n<h5 id=\"使用nn-Module重构\"><a href=\"#使用nn-Module重构\" class=\"headerlink\" title=\"使用nn.Module重构\"></a>使用nn.Module重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch <span class=\"hljs-keyword\">import</span> nn<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_Logistic</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.weights = nn.Parameter(torch.randn(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>) / math.sqrt(<span class=\"hljs-number\">784</span>))<br>        self.bias = nn.Parameter(torch.zeros(<span class=\"hljs-number\">10</span>))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        <span class=\"hljs-keyword\">return</span> xb @ self.weights + self.bias<br>    <br>model = Mnist_Logistic()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br>    <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span>():</span><br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>            start_i = i * bs<br>            end_i = start_i + bs<br>            xb = x_train[start_i:end_i]<br>            yb = y_train[start_i:end_i]<br>            pred = model(xb)<br>            loss = loss_func(pred, yb)<br><br>            loss.backward()<br>            <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>                <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> model.parameters():<br>                    p -= p.grad * lr<br>                model.zero_grad()<br><br>fit()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.4222, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0817, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用nn-Linear重构\"><a href=\"#使用nn-Linear重构\" class=\"headerlink\" title=\"使用nn.Linear重构\"></a>使用nn.Linear重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_Logistic</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.lin = nn.Linear(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.lin(xb)<br>    <br>model = Mnist_Logistic()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br>fit()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.3090, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0824, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用optim重构\"><a href=\"#使用optim重构\" class=\"headerlink\" title=\"使用optim重构\"></a>使用optim重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch <span class=\"hljs-keyword\">import</span> optim<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_model</span>():</span><br>    model = Mnist_Logistic()<br>    <span class=\"hljs-keyword\">return</span> model, optim.SGD(model.parameters(), lr=lr)<br><br>model, opt = get_model()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        start_i = i * bs<br>        end_i = start_i + bs<br>        xb = x_train[start_i:end_i]<br>        yb = y_train[start_i:end_i]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.2990, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0805, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用Dataset重构\"><a href=\"#使用Dataset重构\" class=\"headerlink\" title=\"使用Dataset重构\"></a>使用Dataset重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch.utils.data <span class=\"hljs-keyword\">import</span> TensorDataset<br><br>train_ds = TensorDataset(x_train, y_train)<br>xb,yb = train_ds[i*bs : i*bs+bs]<br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        xb, yb = train_ds[i * bs: i * bs + bs]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0817, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用DataLoader重构\"><a href=\"#使用DataLoader重构\" class=\"headerlink\" title=\"使用DataLoader重构\"></a>使用DataLoader重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch.utils.data <span class=\"hljs-keyword\">import</span> DataLoader<br><br>train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs)<br><br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0803, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"添加验证\"><a href=\"#添加验证\" class=\"headerlink\" title=\"添加验证\"></a>添加验证</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs, shuffle=<span class=\"hljs-literal\">True</span>)<br><br>valid_ds = TensorDataset(x_valid, y_valid)<br>valid_dl = DataLoader(valid_ds, batch_size=bs * <span class=\"hljs-number\">2</span>)<br><br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    model.train()<br>    <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br>    model.<span class=\"hljs-built_in\">eval</span>()<br>    <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>        valid_loss = <span class=\"hljs-built_in\">sum</span>(loss_func(model(xb), yb) <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> valid_dl)<br><br>    <span class=\"hljs-built_in\">print</span>(epoch, valid_loss / <span class=\"hljs-built_in\">len</span>(valid_dl))<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 tensor(0.3093)\n1 tensor(0.3198)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">## 创建fit()和get_data()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">loss_batch</span>(<span class=\"hljs-params\">model, loss_func, xb, yb, opt=<span class=\"hljs-literal\">None</span></span>):</span><br>    loss = loss_func(model(xb), yb)<br><br>    <span class=\"hljs-keyword\">if</span> opt <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br>    <span class=\"hljs-keyword\">return</span> loss.item(), <span class=\"hljs-built_in\">len</span>(xb)<br><br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span>(<span class=\"hljs-params\">epochs, model, loss_func, opt, train_dl, valid_dl</span>):</span><br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>        model.train()<br>        <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>            loss_batch(model, loss_func, xb, yb, opt)<br><br>        model.<span class=\"hljs-built_in\">eval</span>()<br>        <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>            losses, nums = <span class=\"hljs-built_in\">zip</span>(<br>                *[loss_batch(model, loss_func, xb, yb) <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> valid_dl]<br>            )<br>        val_loss = np.<span class=\"hljs-built_in\">sum</span>(np.multiply(losses, nums)) / np.<span class=\"hljs-built_in\">sum</span>(nums)<br><br>        <span class=\"hljs-built_in\">print</span>(epoch, val_loss)<br>        <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span>(<span class=\"hljs-params\">train_ds, valid_ds, bs</span>):</span><br>    <span class=\"hljs-keyword\">return</span> (<br>        DataLoader(train_ds, batch_size=bs, shuffle=<span class=\"hljs-literal\">True</span>),<br>        DataLoader(valid_ds, batch_size=bs * <span class=\"hljs-number\">2</span>),<br>    )<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>model, opt = get_model()<br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.3313611475586891\n1 0.35820939881801606\n</code></pre>\n<h5 id=\"切换到-CNN\"><a href=\"#切换到-CNN\" class=\"headerlink\" title=\"切换到 CNN\"></a>切换到 CNN</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_CNN</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.conv1 = nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br>        self.conv2 = nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br>        self.conv3 = nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        xb = xb.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)<br>        xb = F.relu(self.conv1(xb))<br>        xb = F.relu(self.conv2(xb))<br>        xb = F.relu(self.conv3(xb))<br>        xb = F.avg_pool2d(xb, <span class=\"hljs-number\">4</span>)<br>        <span class=\"hljs-keyword\">return</span> xb.view(-<span class=\"hljs-number\">1</span>, xb.size(<span class=\"hljs-number\">1</span>))<br><br>lr = <span class=\"hljs-number\">0.1</span><br><br>model = Mnist_CNN()<br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.2936670451879501\n1 0.21561954822540283\n</code></pre>\n<h5 id=\"nn-Sequential-Sequential对象以顺序方式运行其中包含的每个模块。\"><a href=\"#nn-Sequential-Sequential对象以顺序方式运行其中包含的每个模块。\" class=\"headerlink\" title=\"nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。\"></a>nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Lambda</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, func</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.func(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)<br><br>model = nn.Sequential(<br>    Lambda(preprocess),<br>    nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.AvgPool2d(<span class=\"hljs-number\">4</span>),<br>    Lambda(<span class=\"hljs-keyword\">lambda</span> x: x.view(x.size(<span class=\"hljs-number\">0</span>), -<span class=\"hljs-number\">1</span>)),<br>)<br><br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.4037924102306366\n1 0.25595326462984086\n</code></pre>\n<h5 id=\"包装DataLoader\"><a href=\"#包装DataLoader\" class=\"headerlink\" title=\"包装DataLoader\"></a>包装DataLoader</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>), y<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WrappedDataLoader</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, dl, func</span>):</span><br>        self.dl = dl<br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__len__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.dl)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__iter__</span>(<span class=\"hljs-params\">self</span>):</span><br>        batches = <span class=\"hljs-built_in\">iter</span>(self.dl)<br>        <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> batches:<br>            <span class=\"hljs-keyword\">yield</span> (self.func(*b))<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>train_dl = WrappedDataLoader(train_dl, preprocess)<br>valid_dl = WrappedDataLoader(valid_dl, preprocess)<br><br>model = nn.Sequential(<br>    nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.AdaptiveAvgPool2d(<span class=\"hljs-number\">1</span>),<br>    Lambda(<span class=\"hljs-keyword\">lambda</span> x: x.view(x.size(<span class=\"hljs-number\">0</span>), -<span class=\"hljs-number\">1</span>)),<br>)<br><br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.31396417818069455\n1 0.2551067463874817\n</code></pre>\n<h5 id=\"使用GPU，，，如果有\"><a href=\"#使用GPU，，，如果有\" class=\"headerlink\" title=\"使用GPU，，，如果有\"></a>使用GPU，，，如果有</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(torch.cuda.is_available())<br>dev = torch.device(<br>    <span class=\"hljs-string\">&quot;cuda&quot;</span>) <span class=\"hljs-keyword\">if</span> torch.cuda.is_available() <span class=\"hljs-keyword\">else</span> torch.device(<span class=\"hljs-string\">&quot;cpu&quot;</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>).to(dev), y.to(dev)<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>train_dl = WrappedDataLoader(train_dl, preprocess)<br>valid_dl = WrappedDataLoader(valid_dl, preprocess)<br><br>model.to(dev)<br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>False\n0 0.22373724069595338\n1 0.2494806985616684\n</code></pre>\n","site":{"data":{}},"excerpt":"<h2 id=\"Pytorch-Learning-Note\"><a href=\"#Pytorch-Learning-Note\" class=\"headerlink\" title=\"Pytorch Learning Note\"></a>Pytorch Learning Note</h2>","more":"<h5 id=\"torch-nn\"><a href=\"#torch-nn\" class=\"headerlink\" title=\"torch.nn\"></a>torch.nn</h5><p>Module：创建一个行为类似于函数的可调用对象，但也可以包含状态（例如神经网络层权重）。 它知道其中包含的 Parameter ，并且可以将其所有坡度归零，遍历它们以进行权重更新等。<br>Parameter：张量的包装器，用于告知 Module 具有在反向传播期间需要更新的权重。 仅更新具有require_grad属性集的张量<br>functional：一个模块（通常按照惯例导入到 F 名称空间中），其中包含激活函数，损失函数等。 以及卷积和线性层等层的无状态版本。</p>\n<h5 id=\"torch-optim\"><a href=\"#torch-optim\" class=\"headerlink\" title=\"torch.optim\"></a>torch.optim</h5><p>包含诸如 SGD 的优化程序，这些优化程序在后退步骤</p>\n<h5 id=\"Dataset\"><a href=\"#Dataset\" class=\"headerlink\" title=\"Dataset\"></a>Dataset</h5><p>更新 Parameter 的权重。 具有__len__和__getitem__的对象，包括 Pytorch 提供的类，例如 TensorDataset</p>\n<h5 id=\"DataLoader\"><a href=\"#DataLoader\" class=\"headerlink\" title=\"DataLoader\"></a>DataLoader</h5><p>获取任何 Dataset 并创建一个迭代器，该迭代器返回批量数据。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> pathlib <span class=\"hljs-keyword\">import</span> Path<br><span class=\"hljs-keyword\">import</span> requests<br><br>DATA_PATH = Path(<span class=\"hljs-string\">&quot;data&quot;</span>)<br>PATH = DATA_PATH / <span class=\"hljs-string\">&quot;mnist&quot;</span><br><br>PATH.mkdir(parents=<span class=\"hljs-literal\">True</span>, exist_ok=<span class=\"hljs-literal\">True</span>)<br><br>URL = <span class=\"hljs-string\">&quot;https://github.com/pytorch/tutorials/raw/master/_static/&quot;</span><br>FILENAME = <span class=\"hljs-string\">&quot;mnist.pkl.gz&quot;</span><br><br><span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> (PATH / FILENAME).exists():<br>        content = requests.get(URL + FILENAME).content<br>        (PATH / FILENAME).<span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&quot;wb&quot;</span>).write(content)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> pickle<br><span class=\"hljs-keyword\">import</span> gzip<br><br><span class=\"hljs-keyword\">with</span> gzip.<span class=\"hljs-built_in\">open</span>((PATH / FILENAME).as_posix(), <span class=\"hljs-string\">&quot;rb&quot;</span>) <span class=\"hljs-keyword\">as</span> f:<br>        ((x_train, y_train), (x_valid, y_valid), _) = pickle.load(f, encoding=<span class=\"hljs-string\">&quot;latin-1&quot;</span>)<br></code></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> matplotlib <span class=\"hljs-keyword\">import</span> pyplot<br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br>pyplot.imshow(x_train[<span class=\"hljs-number\">0</span>].reshape((<span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)), cmap=<span class=\"hljs-string\">&quot;gray&quot;</span>)<br><span class=\"hljs-built_in\">print</span>(x_train.shape)<br></code></pre></td></tr></table></figure>\n\n<pre><code>(50000, 784)\n</code></pre>\n<!-- ![png](output_2_1.png) -->\n\n\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> torch<br><br>x_train, y_train, x_valid, y_valid = <span class=\"hljs-built_in\">map</span>(<br>    torch.tensor, (x_train, y_train, x_valid, y_valid)<br>)<br>n, c = x_train.shape<br>x_train, x_train.shape, y_train.<span class=\"hljs-built_in\">min</span>(), y_train.<span class=\"hljs-built_in\">max</span>()<br><span class=\"hljs-built_in\">print</span>(x_train, y_train)<br><span class=\"hljs-built_in\">print</span>(x_train.shape)<br><span class=\"hljs-built_in\">print</span>(y_train.<span class=\"hljs-built_in\">min</span>(), y_train.<span class=\"hljs-built_in\">max</span>())<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor([[0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        ...,\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.],\n        [0., 0., 0.,  ..., 0., 0., 0.]]) tensor([5, 0, 4,  ..., 8, 4, 8])\ntorch.Size([50000, 784])\ntensor(0) tensor(9)\n</code></pre>\n<h5 id=\"从0构建神经网络线性模型\"><a href=\"#从0构建神经网络线性模型\" class=\"headerlink\" title=\"从0构建神经网络线性模型\"></a>从0构建神经网络线性模型</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> math<br><br>weights = torch.randn(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>) / math.sqrt(<span class=\"hljs-number\">784</span>)<br>weights.requires_grad_()<br>bias = torch.zeros(<span class=\"hljs-number\">10</span>, requires_grad=<span class=\"hljs-literal\">True</span>)<br><br><span class=\"hljs-comment\">## softmax激活函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">log_softmax</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x - x.exp().<span class=\"hljs-built_in\">sum</span>(-<span class=\"hljs-number\">1</span>).log().unsqueeze(-<span class=\"hljs-number\">1</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">model</span>(<span class=\"hljs-params\">xb</span>):</span><br>    <span class=\"hljs-keyword\">return</span> log_softmax(xb @ weights + bias)  <span class=\"hljs-comment\">#  @代表点积运算</span><br><br>bs = <span class=\"hljs-number\">64</span>  <span class=\"hljs-comment\"># batch size</span><br><br>xb = x_train[<span class=\"hljs-number\">0</span>:bs]  <span class=\"hljs-comment\"># a mini-batch from x</span><br>preds = model(xb)  <span class=\"hljs-comment\"># predictions</span><br>preds[<span class=\"hljs-number\">0</span>], preds.shape<br><span class=\"hljs-built_in\">print</span>(preds[<span class=\"hljs-number\">0</span>], preds.shape)<br><br><span class=\"hljs-comment\">## 损失函数</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">nll</span>(<span class=\"hljs-params\"><span class=\"hljs-built_in\">input</span>, target</span>):</span><br>    <span class=\"hljs-keyword\">return</span> -<span class=\"hljs-built_in\">input</span>[<span class=\"hljs-built_in\">range</span>(target.shape[<span class=\"hljs-number\">0</span>]), target].mean()<br><br>loss_func = nll<br><br>yb = y_train[<span class=\"hljs-number\">0</span>:bs]<br><span class=\"hljs-built_in\">print</span>(loss_func(preds, yb))<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">accuracy</span>(<span class=\"hljs-params\">out, yb</span>):</span><br>    preds = torch.argmax(out, dim=<span class=\"hljs-number\">1</span>)<br>    <span class=\"hljs-keyword\">return</span> (preds == yb).<span class=\"hljs-built_in\">float</span>().mean()<br><br><span class=\"hljs-built_in\">print</span>(accuracy(preds, yb))<br><br><span class=\"hljs-keyword\">from</span> IPython.core.debugger <span class=\"hljs-keyword\">import</span> set_trace<br><br>lr = <span class=\"hljs-number\">0.5</span>  <span class=\"hljs-comment\"># learning rate</span><br>epochs = <span class=\"hljs-number\">2</span>  <span class=\"hljs-comment\"># how many epochs to train for</span><br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        <span class=\"hljs-comment\">#         set_trace()</span><br>        start_i = i * bs<br>        end_i = start_i + bs<br>        xb = x_train[start_i:end_i]<br>        yb = y_train[start_i:end_i]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>            weights -= weights.grad * lr<br>            bias -= bias.grad * lr<br>            weights.grad.zero_()<br>            bias.grad.zero_()<br>            <br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb), accuracy(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor([-2.5487, -2.8346, -2.7262, -2.1794, -2.1199, -2.1041, -1.9327, -2.1947,\n        -2.5637, -2.2133], grad_fn=&lt;SelectBackward&gt;) torch.Size([64, 10])\ntensor(2.3308, grad_fn=&lt;NegBackward&gt;)\ntensor(0.1094)\ntensor(0.0806, grad_fn=&lt;NegBackward&gt;) tensor(1.)\n</code></pre>\n<h5 id=\"使用torch-nn-functional-重构\"><a href=\"#使用torch-nn-functional-重构\" class=\"headerlink\" title=\"使用torch.nn.functional 重构\"></a>使用torch.nn.functional 重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> torch.nn.functional <span class=\"hljs-keyword\">as</span> F<br><br>loss_func = F.cross_entropy<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">model</span>(<span class=\"hljs-params\">xb</span>):</span><br>    <span class=\"hljs-keyword\">return</span> xb @ weights + bias<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb), accuracy(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0806, grad_fn=&lt;NllLossBackward&gt;) tensor(1.)\n</code></pre>\n<h5 id=\"使用nn-Module重构\"><a href=\"#使用nn-Module重构\" class=\"headerlink\" title=\"使用nn.Module重构\"></a>使用nn.Module重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch <span class=\"hljs-keyword\">import</span> nn<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_Logistic</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.weights = nn.Parameter(torch.randn(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>) / math.sqrt(<span class=\"hljs-number\">784</span>))<br>        self.bias = nn.Parameter(torch.zeros(<span class=\"hljs-number\">10</span>))<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        <span class=\"hljs-keyword\">return</span> xb @ self.weights + self.bias<br>    <br>model = Mnist_Logistic()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br>    <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span>():</span><br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>            start_i = i * bs<br>            end_i = start_i + bs<br>            xb = x_train[start_i:end_i]<br>            yb = y_train[start_i:end_i]<br>            pred = model(xb)<br>            loss = loss_func(pred, yb)<br><br>            loss.backward()<br>            <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>                <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> model.parameters():<br>                    p -= p.grad * lr<br>                model.zero_grad()<br><br>fit()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.4222, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0817, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用nn-Linear重构\"><a href=\"#使用nn-Linear重构\" class=\"headerlink\" title=\"使用nn.Linear重构\"></a>使用nn.Linear重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_Logistic</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.lin = nn.Linear(<span class=\"hljs-number\">784</span>, <span class=\"hljs-number\">10</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.lin(xb)<br>    <br>model = Mnist_Logistic()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br>fit()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.3090, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0824, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用optim重构\"><a href=\"#使用optim重构\" class=\"headerlink\" title=\"使用optim重构\"></a>使用optim重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch <span class=\"hljs-keyword\">import</span> optim<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_model</span>():</span><br>    model = Mnist_Logistic()<br>    <span class=\"hljs-keyword\">return</span> model, optim.SGD(model.parameters(), lr=lr)<br><br>model, opt = get_model()<br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        start_i = i * bs<br>        end_i = start_i + bs<br>        xb = x_train[start_i:end_i]<br>        yb = y_train[start_i:end_i]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(2.2990, grad_fn=&lt;NllLossBackward&gt;)\ntensor(0.0805, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用Dataset重构\"><a href=\"#使用Dataset重构\" class=\"headerlink\" title=\"使用Dataset重构\"></a>使用Dataset重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch.utils.data <span class=\"hljs-keyword\">import</span> TensorDataset<br><br>train_ds = TensorDataset(x_train, y_train)<br>xb,yb = train_ds[i*bs : i*bs+bs]<br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>((n - <span class=\"hljs-number\">1</span>) // bs + <span class=\"hljs-number\">1</span>):<br>        xb, yb = train_ds[i * bs: i * bs + bs]<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0817, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"使用DataLoader重构\"><a href=\"#使用DataLoader重构\" class=\"headerlink\" title=\"使用DataLoader重构\"></a>使用DataLoader重构</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> torch.utils.data <span class=\"hljs-keyword\">import</span> DataLoader<br><br>train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs)<br><br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br><span class=\"hljs-built_in\">print</span>(loss_func(model(xb), yb))<br></code></pre></td></tr></table></figure>\n\n<pre><code>tensor(0.0803, grad_fn=&lt;NllLossBackward&gt;)\n</code></pre>\n<h5 id=\"添加验证\"><a href=\"#添加验证\" class=\"headerlink\" title=\"添加验证\"></a>添加验证</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">train_ds = TensorDataset(x_train, y_train)<br>train_dl = DataLoader(train_ds, batch_size=bs, shuffle=<span class=\"hljs-literal\">True</span>)<br><br>valid_ds = TensorDataset(x_valid, y_valid)<br>valid_dl = DataLoader(valid_ds, batch_size=bs * <span class=\"hljs-number\">2</span>)<br><br>model, opt = get_model()<br><br><span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>    model.train()<br>    <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>        pred = model(xb)<br>        loss = loss_func(pred, yb)<br><br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br>    model.<span class=\"hljs-built_in\">eval</span>()<br>    <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>        valid_loss = <span class=\"hljs-built_in\">sum</span>(loss_func(model(xb), yb) <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> valid_dl)<br><br>    <span class=\"hljs-built_in\">print</span>(epoch, valid_loss / <span class=\"hljs-built_in\">len</span>(valid_dl))<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 tensor(0.3093)\n1 tensor(0.3198)\n</code></pre>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-comment\">## 创建fit()和get_data()</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">loss_batch</span>(<span class=\"hljs-params\">model, loss_func, xb, yb, opt=<span class=\"hljs-literal\">None</span></span>):</span><br>    loss = loss_func(model(xb), yb)<br><br>    <span class=\"hljs-keyword\">if</span> opt <span class=\"hljs-keyword\">is</span> <span class=\"hljs-keyword\">not</span> <span class=\"hljs-literal\">None</span>:<br>        loss.backward()<br>        opt.step()<br>        opt.zero_grad()<br><br>    <span class=\"hljs-keyword\">return</span> loss.item(), <span class=\"hljs-built_in\">len</span>(xb)<br><br><span class=\"hljs-keyword\">import</span> numpy <span class=\"hljs-keyword\">as</span> np<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">fit</span>(<span class=\"hljs-params\">epochs, model, loss_func, opt, train_dl, valid_dl</span>):</span><br>    <span class=\"hljs-keyword\">for</span> epoch <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(epochs):<br>        model.train()<br>        <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> train_dl:<br>            loss_batch(model, loss_func, xb, yb, opt)<br><br>        model.<span class=\"hljs-built_in\">eval</span>()<br>        <span class=\"hljs-keyword\">with</span> torch.no_grad():<br>            losses, nums = <span class=\"hljs-built_in\">zip</span>(<br>                *[loss_batch(model, loss_func, xb, yb) <span class=\"hljs-keyword\">for</span> xb, yb <span class=\"hljs-keyword\">in</span> valid_dl]<br>            )<br>        val_loss = np.<span class=\"hljs-built_in\">sum</span>(np.multiply(losses, nums)) / np.<span class=\"hljs-built_in\">sum</span>(nums)<br><br>        <span class=\"hljs-built_in\">print</span>(epoch, val_loss)<br>        <br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">get_data</span>(<span class=\"hljs-params\">train_ds, valid_ds, bs</span>):</span><br>    <span class=\"hljs-keyword\">return</span> (<br>        DataLoader(train_ds, batch_size=bs, shuffle=<span class=\"hljs-literal\">True</span>),<br>        DataLoader(valid_ds, batch_size=bs * <span class=\"hljs-number\">2</span>),<br>    )<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>model, opt = get_model()<br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.3313611475586891\n1 0.35820939881801606\n</code></pre>\n<h5 id=\"切换到-CNN\"><a href=\"#切换到-CNN\" class=\"headerlink\" title=\"切换到 CNN\"></a>切换到 CNN</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Mnist_CNN</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.conv1 = nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br>        self.conv2 = nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br>        self.conv3 = nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, xb</span>):</span><br>        xb = xb.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)<br>        xb = F.relu(self.conv1(xb))<br>        xb = F.relu(self.conv2(xb))<br>        xb = F.relu(self.conv3(xb))<br>        xb = F.avg_pool2d(xb, <span class=\"hljs-number\">4</span>)<br>        <span class=\"hljs-keyword\">return</span> xb.view(-<span class=\"hljs-number\">1</span>, xb.size(<span class=\"hljs-number\">1</span>))<br><br>lr = <span class=\"hljs-number\">0.1</span><br><br>model = Mnist_CNN()<br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.2936670451879501\n1 0.21561954822540283\n</code></pre>\n<h5 id=\"nn-Sequential-Sequential对象以顺序方式运行其中包含的每个模块。\"><a href=\"#nn-Sequential-Sequential对象以顺序方式运行其中包含的每个模块。\" class=\"headerlink\" title=\"nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。\"></a>nn.Sequential   Sequential对象以顺序方式运行其中包含的每个模块。</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Lambda</span>(<span class=\"hljs-params\">nn.Module</span>):</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, func</span>):</span><br>        <span class=\"hljs-built_in\">super</span>().__init__()<br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">forward</span>(<span class=\"hljs-params\">self, x</span>):</span><br>        <span class=\"hljs-keyword\">return</span> self.func(x)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>)<br><br>model = nn.Sequential(<br>    Lambda(preprocess),<br>    nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.AvgPool2d(<span class=\"hljs-number\">4</span>),<br>    Lambda(<span class=\"hljs-keyword\">lambda</span> x: x.view(x.size(<span class=\"hljs-number\">0</span>), -<span class=\"hljs-number\">1</span>)),<br>)<br><br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.4037924102306366\n1 0.25595326462984086\n</code></pre>\n<h5 id=\"包装DataLoader\"><a href=\"#包装DataLoader\" class=\"headerlink\" title=\"包装DataLoader\"></a>包装DataLoader</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>), y<br><br><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">WrappedDataLoader</span>:</span><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__init__</span>(<span class=\"hljs-params\">self, dl, func</span>):</span><br>        self.dl = dl<br>        self.func = func<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__len__</span>(<span class=\"hljs-params\">self</span>):</span><br>        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">len</span>(self.dl)<br><br>    <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">__iter__</span>(<span class=\"hljs-params\">self</span>):</span><br>        batches = <span class=\"hljs-built_in\">iter</span>(self.dl)<br>        <span class=\"hljs-keyword\">for</span> b <span class=\"hljs-keyword\">in</span> batches:<br>            <span class=\"hljs-keyword\">yield</span> (self.func(*b))<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>train_dl = WrappedDataLoader(train_dl, preprocess)<br>valid_dl = WrappedDataLoader(valid_dl, preprocess)<br><br>model = nn.Sequential(<br>    nn.Conv2d(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">16</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.Conv2d(<span class=\"hljs-number\">16</span>, <span class=\"hljs-number\">10</span>, kernel_size=<span class=\"hljs-number\">3</span>, stride=<span class=\"hljs-number\">2</span>, padding=<span class=\"hljs-number\">1</span>),<br>    nn.ReLU(),<br>    nn.AdaptiveAvgPool2d(<span class=\"hljs-number\">1</span>),<br>    Lambda(<span class=\"hljs-keyword\">lambda</span> x: x.view(x.size(<span class=\"hljs-number\">0</span>), -<span class=\"hljs-number\">1</span>)),<br>)<br><br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br><br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>0 0.31396417818069455\n1 0.2551067463874817\n</code></pre>\n<h5 id=\"使用GPU，，，如果有\"><a href=\"#使用GPU，，，如果有\" class=\"headerlink\" title=\"使用GPU，，，如果有\"></a>使用GPU，，，如果有</h5><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-built_in\">print</span>(torch.cuda.is_available())<br>dev = torch.device(<br>    <span class=\"hljs-string\">&quot;cuda&quot;</span>) <span class=\"hljs-keyword\">if</span> torch.cuda.is_available() <span class=\"hljs-keyword\">else</span> torch.device(<span class=\"hljs-string\">&quot;cpu&quot;</span>)<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">preprocess</span>(<span class=\"hljs-params\">x, y</span>):</span><br>    <span class=\"hljs-keyword\">return</span> x.view(-<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">28</span>, <span class=\"hljs-number\">28</span>).to(dev), y.to(dev)<br><br>train_dl, valid_dl = get_data(train_ds, valid_ds, bs)<br>train_dl = WrappedDataLoader(train_dl, preprocess)<br>valid_dl = WrappedDataLoader(valid_dl, preprocess)<br><br>model.to(dev)<br>opt = optim.SGD(model.parameters(), lr=lr, momentum=<span class=\"hljs-number\">0.9</span>)<br>fit(epochs, model, loss_func, opt, train_dl, valid_dl)<br><br></code></pre></td></tr></table></figure>\n\n<pre><code>False\n0 0.22373724069595338\n1 0.2494806985616684\n</code></pre>"},{"title":"Python Notes","date":"2021-02-02T06:23:30.000Z","index_img":"/img/article/python-hero.jpg","comment":"valine","_content":"## Python学习随笔\n<!-- more -->\n### 字典转dataframe\n不定义列名时：pd.DataFrame.from_dict(data, orient='index')\n定义列名时：pd.DataFrame.from_dict(data, orient='index', columns=['A', 'B', 'C', 'D'])\n### pandas筛选\n#### 选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data['a'] == 'one']\n#### 选取某列值是否是某一类型的数值用 isin ,取反用 ~\n```language\ndata.loc[data['a'].isin(['one', 'two'])]\ndata.loc[~data['a'].isin(['one', 'two'])]\n```\n#### 多种条件的选取用 & , data.loc[(data['a'] == 'one') & (data['b'] == 'two')]\n```language\nnp.linspace(start, stop, num) ##参数为起点，终点，点数，num默认为50\n```\n### 把某列值设为index，df.set_index('columns')  (df.reset_index()重置索引)\ndf中merge函数按 键 合并，concat函数按 轴 合并\n\n### 按键 (key) 合并可以分「单键合并」和「多键合并」\n### 单键合并：\n```language\npd.merge(df1, df2, how=s, on=c ) ##c 是 df1 和 df2 共有的一栏，合并方式 (how=s) 有四种：\n```\n###### 左连接 (left)：合并之后显示 df1 的所有行\n###### 右连接 (right)：合并之后显示 df2 的所有行\n###### 外连接 (outer)：合并 df1 和 df2 共有的所有行\n###### 内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)\n###### 多键合并(俩组数据均有该列)\n```language\npd.merge( df1, df2, how=s, on=c )  ## c 是多栏（如一个列表\n```\n### 多键合并(两组数据不同的列名）\n```language\npd.merge(df1, df2, left_on = 'key1', right_on = 'key2')\n```\n### 插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,'date',date)\n\n当 df1 和 df2 有两个相同的列 (Asset 和 Instrument) 时，单单只对一列 (Asset) 做合并产出的 DataFrame 会有另一列 (Instrument) 重复的名称。\n这时 merge 函数给重复的名称加个后缀 _x, _y，也可以设定 suffixes 来改后缀\n```language\npd.concat([df1,df2], axis=0, ignore_index=True)  # 默认axis=0（行连接）\n```\n\n### 列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数\n### 数据透视：\n用 pivot 函数将「一张长表」变「多张宽表」，\n用 melt 函数将「多张宽表」变「一张长表」  # 函数 melt 实际是将「源表」转化成 id-variable 类型的 DataFrame\n```\ndata_pivot = data.pivot(index='Date',columns='Symbol',values='Adj Close') #若不设置value参数，剩下的列都用来透视\nmelted_data = pd.melt(data, id_vars=['Date','Symbol'])\nsorted(set(list), key=list.index)  ## 消除重复元素不改变原始数据顺序\nsorted(dict.items(),key=lambda x:x[1],reverse=True)  ## 对字典按值反向排序（x[0]按键排序）\n```\n\n### pandas 删除列\n```\ndf = df.drop(['c', 'e'], axis=1)\n#或者\ndf.drop(['c', 'e'], axis=1, inplace=True)\n```\n### 对行 z-score 标准化\n```\ndf.apply(lambda x: (x - np.mean(x)) / (np.std(x,ddof=1)), axis=1)\n```\n### 对 Majority protein IDs 列转成多行\n```\ndf = df[~df['Majority protein IDs'].str.contains('CON|REV', regex=True)]\ndf = df.drop('Majority protein IDs', axis=1).join(df['Majority protein IDs'].str.split(';', expand=True).stack().reset_index(level=1, drop=True).rename('Majority protein IDs'))\n\ndef ab(df): \n    return ';'.join(df.values)\nnewcolumns = df_merge.columns.tolist()\nnewcolumns.remove('Majority protein IDs')\nnewdf = df_merge.groupby(newcolumns)['Majority protein IDs'].apply(ab)   ## 多行合并一行\n```\n### for、while循环中的else扩展用法\nelse中的程序只在一种条件下执行，即循环正常遍历所有内容或者由于条件不成立而结束循环，没有因break或者return而退出循环。continue对else没影响\n```language\nfor i in range(10):\n    if i==5:\n        break\n    print('i=',i,end=',')\nelse:\n    print('success')#不输出   在for循环中含有break时则直接终止循环，并不会执行else子句。\n\nfor i in range(10):\n    if i==5:\n        continue\n    print('i=',i,end=',')\nelse:\n    print('success')#输出\n```\n### 展平嵌套列表\n```language\nnewlist = [item for items in newlist for item in items]\n#或者您可以像这样从chain中使用itertools\nfrom itertools import chain\nnewlist = list(chain(*newlist))\n#或者您可以使用chain.from_iterable，其中无需解压缩列表\nfrom itertools import chain\nnewlist = list(chain.from_iterable(newlist)) #效率更高\n```\n### 生成requirements.txt\n```language\npipreqs ./ --encoding=utf-8 --force\n```\n### 单例\n```language\nclass Singleton(object):\n    __instance = None\n\n    def __new__(cls, age, name):\n        if not cls.__instance:\n            cls.__instance = object.__new__(cls)\n        return cls.__instance\n```\n","source":"_posts/Python-Notes.md","raw":"---\ntitle: Python Notes\ndate: 2021-02-02 14:23:30\nindex_img: /img/article/python-hero.jpg\ncategories:\n    - Python\ntags:\n    - Python\ncomment: 'valine'\n---\n## Python学习随笔\n<!-- more -->\n### 字典转dataframe\n不定义列名时：pd.DataFrame.from_dict(data, orient='index')\n定义列名时：pd.DataFrame.from_dict(data, orient='index', columns=['A', 'B', 'C', 'D'])\n### pandas筛选\n#### 选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data['a'] == 'one']\n#### 选取某列值是否是某一类型的数值用 isin ,取反用 ~\n```language\ndata.loc[data['a'].isin(['one', 'two'])]\ndata.loc[~data['a'].isin(['one', 'two'])]\n```\n#### 多种条件的选取用 & , data.loc[(data['a'] == 'one') & (data['b'] == 'two')]\n```language\nnp.linspace(start, stop, num) ##参数为起点，终点，点数，num默认为50\n```\n### 把某列值设为index，df.set_index('columns')  (df.reset_index()重置索引)\ndf中merge函数按 键 合并，concat函数按 轴 合并\n\n### 按键 (key) 合并可以分「单键合并」和「多键合并」\n### 单键合并：\n```language\npd.merge(df1, df2, how=s, on=c ) ##c 是 df1 和 df2 共有的一栏，合并方式 (how=s) 有四种：\n```\n###### 左连接 (left)：合并之后显示 df1 的所有行\n###### 右连接 (right)：合并之后显示 df2 的所有行\n###### 外连接 (outer)：合并 df1 和 df2 共有的所有行\n###### 内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)\n###### 多键合并(俩组数据均有该列)\n```language\npd.merge( df1, df2, how=s, on=c )  ## c 是多栏（如一个列表\n```\n### 多键合并(两组数据不同的列名）\n```language\npd.merge(df1, df2, left_on = 'key1', right_on = 'key2')\n```\n### 插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,'date',date)\n\n当 df1 和 df2 有两个相同的列 (Asset 和 Instrument) 时，单单只对一列 (Asset) 做合并产出的 DataFrame 会有另一列 (Instrument) 重复的名称。\n这时 merge 函数给重复的名称加个后缀 _x, _y，也可以设定 suffixes 来改后缀\n```language\npd.concat([df1,df2], axis=0, ignore_index=True)  # 默认axis=0（行连接）\n```\n\n### 列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数\n### 数据透视：\n用 pivot 函数将「一张长表」变「多张宽表」，\n用 melt 函数将「多张宽表」变「一张长表」  # 函数 melt 实际是将「源表」转化成 id-variable 类型的 DataFrame\n```\ndata_pivot = data.pivot(index='Date',columns='Symbol',values='Adj Close') #若不设置value参数，剩下的列都用来透视\nmelted_data = pd.melt(data, id_vars=['Date','Symbol'])\nsorted(set(list), key=list.index)  ## 消除重复元素不改变原始数据顺序\nsorted(dict.items(),key=lambda x:x[1],reverse=True)  ## 对字典按值反向排序（x[0]按键排序）\n```\n\n### pandas 删除列\n```\ndf = df.drop(['c', 'e'], axis=1)\n#或者\ndf.drop(['c', 'e'], axis=1, inplace=True)\n```\n### 对行 z-score 标准化\n```\ndf.apply(lambda x: (x - np.mean(x)) / (np.std(x,ddof=1)), axis=1)\n```\n### 对 Majority protein IDs 列转成多行\n```\ndf = df[~df['Majority protein IDs'].str.contains('CON|REV', regex=True)]\ndf = df.drop('Majority protein IDs', axis=1).join(df['Majority protein IDs'].str.split(';', expand=True).stack().reset_index(level=1, drop=True).rename('Majority protein IDs'))\n\ndef ab(df): \n    return ';'.join(df.values)\nnewcolumns = df_merge.columns.tolist()\nnewcolumns.remove('Majority protein IDs')\nnewdf = df_merge.groupby(newcolumns)['Majority protein IDs'].apply(ab)   ## 多行合并一行\n```\n### for、while循环中的else扩展用法\nelse中的程序只在一种条件下执行，即循环正常遍历所有内容或者由于条件不成立而结束循环，没有因break或者return而退出循环。continue对else没影响\n```language\nfor i in range(10):\n    if i==5:\n        break\n    print('i=',i,end=',')\nelse:\n    print('success')#不输出   在for循环中含有break时则直接终止循环，并不会执行else子句。\n\nfor i in range(10):\n    if i==5:\n        continue\n    print('i=',i,end=',')\nelse:\n    print('success')#输出\n```\n### 展平嵌套列表\n```language\nnewlist = [item for items in newlist for item in items]\n#或者您可以像这样从chain中使用itertools\nfrom itertools import chain\nnewlist = list(chain(*newlist))\n#或者您可以使用chain.from_iterable，其中无需解压缩列表\nfrom itertools import chain\nnewlist = list(chain.from_iterable(newlist)) #效率更高\n```\n### 生成requirements.txt\n```language\npipreqs ./ --encoding=utf-8 --force\n```\n### 单例\n```language\nclass Singleton(object):\n    __instance = None\n\n    def __new__(cls, age, name):\n        if not cls.__instance:\n            cls.__instance = object.__new__(cls)\n        return cls.__instance\n```\n","slug":"Python-Notes","published":1,"updated":"2021-08-19T02:02:55.001Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor91z000ccmso2zougbyk","content":"<h2 id=\"Python学习随笔\"><a href=\"#Python学习随笔\" class=\"headerlink\" title=\"Python学习随笔\"></a>Python学习随笔</h2><span id=\"more\"></span>\n<h3 id=\"字典转dataframe\"><a href=\"#字典转dataframe\" class=\"headerlink\" title=\"字典转dataframe\"></a>字典转dataframe</h3><p>不定义列名时：pd.DataFrame.from_dict(data, orient=’index’)<br>定义列名时：pd.DataFrame.from_dict(data, orient=’index’, columns=[‘A’, ‘B’, ‘C’, ‘D’])</p>\n<h3 id=\"pandas筛选\"><a href=\"#pandas筛选\" class=\"headerlink\" title=\"pandas筛选\"></a>pandas筛选</h3><h4 id=\"选取某列值等于某些值的行用-，不等于用-！-，data-loc-data-‘a’-‘one’\"><a href=\"#选取某列值等于某些值的行用-，不等于用-！-，data-loc-data-‘a’-‘one’\" class=\"headerlink\" title=\"选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data[‘a’] == ‘one’]\"></a>选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data[‘a’] == ‘one’]</h4><h4 id=\"选取某列值是否是某一类型的数值用-isin-取反用\"><a href=\"#选取某列值是否是某一类型的数值用-isin-取反用\" class=\"headerlink\" title=\"选取某列值是否是某一类型的数值用 isin ,取反用 ~\"></a>选取某列值是否是某一类型的数值用 isin ,取反用 ~</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">data.loc[data[&#x27;a&#x27;].isin([&#x27;one&#x27;, &#x27;two&#x27;])]<br>data.loc[~data[&#x27;a&#x27;].isin([&#x27;one&#x27;, &#x27;two&#x27;])]<br></code></pre></td></tr></table></figure>\n<h4 id=\"多种条件的选取用-amp-data-loc-data-‘a’-‘one’-amp-data-‘b’-‘two’\"><a href=\"#多种条件的选取用-amp-data-loc-data-‘a’-‘one’-amp-data-‘b’-‘two’\" class=\"headerlink\" title=\"多种条件的选取用 &amp; , data.loc[(data[‘a’] == ‘one’) &amp; (data[‘b’] == ‘two’)]\"></a>多种条件的选取用 &amp; , data.loc[(data[‘a’] == ‘one’) &amp; (data[‘b’] == ‘two’)]</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">np.linspace(start, stop, num) ##参数为起点，终点，点数，num默认为50<br></code></pre></td></tr></table></figure>\n<h3 id=\"把某列值设为index，df-set-index-‘columns’-df-reset-index-重置索引\"><a href=\"#把某列值设为index，df-set-index-‘columns’-df-reset-index-重置索引\" class=\"headerlink\" title=\"把某列值设为index，df.set_index(‘columns’)  (df.reset_index()重置索引)\"></a>把某列值设为index，df.set_index(‘columns’)  (df.reset_index()重置索引)</h3><p>df中merge函数按 键 合并，concat函数按 轴 合并</p>\n<h3 id=\"按键-key-合并可以分「单键合并」和「多键合并」\"><a href=\"#按键-key-合并可以分「单键合并」和「多键合并」\" class=\"headerlink\" title=\"按键 (key) 合并可以分「单键合并」和「多键合并」\"></a>按键 (key) 合并可以分「单键合并」和「多键合并」</h3><h3 id=\"单键合并：\"><a href=\"#单键合并：\" class=\"headerlink\" title=\"单键合并：\"></a>单键合并：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge(df1, df2, how=s, on=c ) ##c 是 df1 和 df2 共有的一栏，合并方式 (how=s) 有四种：<br></code></pre></td></tr></table></figure>\n<h6 id=\"左连接-left-：合并之后显示-df1-的所有行\"><a href=\"#左连接-left-：合并之后显示-df1-的所有行\" class=\"headerlink\" title=\"左连接 (left)：合并之后显示 df1 的所有行\"></a>左连接 (left)：合并之后显示 df1 的所有行</h6><h6 id=\"右连接-right-：合并之后显示-df2-的所有行\"><a href=\"#右连接-right-：合并之后显示-df2-的所有行\" class=\"headerlink\" title=\"右连接 (right)：合并之后显示 df2 的所有行\"></a>右连接 (right)：合并之后显示 df2 的所有行</h6><h6 id=\"外连接-outer-：合并-df1-和-df2-共有的所有行\"><a href=\"#外连接-outer-：合并-df1-和-df2-共有的所有行\" class=\"headerlink\" title=\"外连接 (outer)：合并 df1 和 df2 共有的所有行\"></a>外连接 (outer)：合并 df1 和 df2 共有的所有行</h6><h6 id=\"内连接-inner-：只保留两个表中公共部分的信息-默认情况\"><a href=\"#内连接-inner-：只保留两个表中公共部分的信息-默认情况\" class=\"headerlink\" title=\"内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)\"></a>内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)</h6><h6 id=\"多键合并-俩组数据均有该列\"><a href=\"#多键合并-俩组数据均有该列\" class=\"headerlink\" title=\"多键合并(俩组数据均有该列)\"></a>多键合并(俩组数据均有该列)</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge( df1, df2, how=s, on=c )  ## c 是多栏（如一个列表<br></code></pre></td></tr></table></figure>\n<h3 id=\"多键合并-两组数据不同的列名）\"><a href=\"#多键合并-两组数据不同的列名）\" class=\"headerlink\" title=\"多键合并(两组数据不同的列名）\"></a>多键合并(两组数据不同的列名）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge(df1, df2, left_on = &#x27;key1&#x27;, right_on = &#x27;key2&#x27;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"插入列：除在最右侧插入用标签直接创建外，其他列用-insert-方法进行插入，比如table-insert-0-’date’-date\"><a href=\"#插入列：除在最右侧插入用标签直接创建外，其他列用-insert-方法进行插入，比如table-insert-0-’date’-date\" class=\"headerlink\" title=\"插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,’date’,date)\"></a>插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,’date’,date)</h3><p>当 df1 和 df2 有两个相同的列 (Asset 和 Instrument) 时，单单只对一列 (Asset) 做合并产出的 DataFrame 会有另一列 (Instrument) 重复的名称。<br>这时 merge 函数给重复的名称加个后缀 _x, _y，也可以设定 suffixes 来改后缀</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.concat([df1,df2], axis=0, ignore_index=True)  # 默认axis=0（行连接）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列索引-→-行索引，用-stack-函数-行索引-→-列索引，用-unstack-函数\"><a href=\"#列索引-→-行索引，用-stack-函数-行索引-→-列索引，用-unstack-函数\" class=\"headerlink\" title=\"列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数\"></a>列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数</h3><h3 id=\"数据透视：\"><a href=\"#数据透视：\" class=\"headerlink\" title=\"数据透视：\"></a>数据透视：</h3><p>用 pivot 函数将「一张长表」变「多张宽表」，<br>用 melt 函数将「多张宽表」变「一张长表」  # 函数 melt 实际是将「源表」转化成 id-variable 类型的 DataFrame</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">data_pivot = data.pivot(index=<span class=\"hljs-string\">&#x27;Date&#x27;</span>,columns=<span class=\"hljs-string\">&#x27;Symbol&#x27;</span>,values=<span class=\"hljs-string\">&#x27;Adj Close&#x27;</span>) <span class=\"hljs-comment\">#若不设置value参数，剩下的列都用来透视</span><br>melted_data = pd.melt(data, id_vars=[<span class=\"hljs-string\">&#x27;Date&#x27;</span>,<span class=\"hljs-string\">&#x27;Symbol&#x27;</span>])<br><span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-built_in\">list</span>), key=<span class=\"hljs-built_in\">list</span>.index)  <span class=\"hljs-comment\">## 消除重复元素不改变原始数据顺序</span><br><span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">dict</span>.items(),key=<span class=\"hljs-keyword\">lambda</span> x:x[<span class=\"hljs-number\">1</span>],reverse=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\">## 对字典按值反向排序（x[0]按键排序）</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"pandas-删除列\"><a href=\"#pandas-删除列\" class=\"headerlink\" title=\"pandas 删除列\"></a>pandas 删除列</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">df = df.drop([<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>], <span class=\"hljs-attribute\">axis</span>=1)<br><span class=\"hljs-comment\">#或者</span><br>df.drop([<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>], <span class=\"hljs-attribute\">axis</span>=1, <span class=\"hljs-attribute\">inplace</span>=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"对行-z-score-标准化\"><a href=\"#对行-z-score-标准化\" class=\"headerlink\" title=\"对行 z-score 标准化\"></a>对行 z-score 标准化</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">df.<span class=\"hljs-built_in\">apply</span>(<span class=\"hljs-built_in\">lambda</span> x: (x - <span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">mean</span>(x)) / (<span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">std</span>(x,ddof=<span class=\"hljs-number\">1</span>)), axis=<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"对-Majority-protein-IDs-列转成多行\"><a href=\"#对-Majority-protein-IDs-列转成多行\" class=\"headerlink\" title=\"对 Majority protein IDs 列转成多行\"></a>对 Majority protein IDs 列转成多行</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">df = df[~df[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].str.contains(<span class=\"hljs-string\">&#x27;CON|REV&#x27;</span>, regex=<span class=\"hljs-keyword\">True</span>)]<br>df = df.<span class=\"hljs-keyword\">drop</span>(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>, axis=<span class=\"hljs-number\">1</span>).<span class=\"hljs-keyword\">join</span>(df[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].str.split(<span class=\"hljs-string\">&#x27;;&#x27;</span>, expand=<span class=\"hljs-keyword\">True</span>).stack().reset_index(<span class=\"hljs-keyword\">level</span>=<span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">drop</span>=<span class=\"hljs-keyword\">True</span>).<span class=\"hljs-keyword\">rename</span>(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>))<br><br>def ab(df): <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;;&#x27;</span>.<span class=\"hljs-keyword\">join</span>(df.<span class=\"hljs-keyword\">values</span>)<br>newcolumns = df_merge.<span class=\"hljs-keyword\">columns</span>.tolist()<br>newcolumns.remove(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>)<br>newdf = df_merge.groupby(newcolumns)[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].apply(ab)   ## 多行合并一行<br></code></pre></td></tr></table></figure>\n<h3 id=\"for、while循环中的else扩展用法\"><a href=\"#for、while循环中的else扩展用法\" class=\"headerlink\" title=\"for、while循环中的else扩展用法\"></a>for、while循环中的else扩展用法</h3><p>else中的程序只在一种条件下执行，即循环正常遍历所有内容或者由于条件不成立而结束循环，没有因break或者return而退出循环。continue对else没影响</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">for i in range(10):<br>    if i==5:<br>        break<br>    print(&#x27;i=&#x27;,i,end=&#x27;,&#x27;)<br>else:<br>    print(&#x27;success&#x27;)#不输出   在for循环中含有break时则直接终止循环，并不会执行else子句。<br><br>for i in range(10):<br>    if i==5:<br>        continue<br>    print(&#x27;i=&#x27;,i,end=&#x27;,&#x27;)<br>else:<br>    print(&#x27;success&#x27;)#输出<br></code></pre></td></tr></table></figure>\n<h3 id=\"展平嵌套列表\"><a href=\"#展平嵌套列表\" class=\"headerlink\" title=\"展平嵌套列表\"></a>展平嵌套列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">newlist = [item for items in newlist for item in items]<br>#或者您可以像这样从chain中使用itertools<br>from itertools import chain<br>newlist = list(chain(*newlist))<br>#或者您可以使用chain.from_iterable，其中无需解压缩列表<br>from itertools import chain<br>newlist = list(chain.from_iterable(newlist)) #效率更高<br></code></pre></td></tr></table></figure>\n<h3 id=\"生成requirements-txt\"><a href=\"#生成requirements-txt\" class=\"headerlink\" title=\"生成requirements.txt\"></a>生成requirements.txt</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pipreqs ./ --encoding=utf-8 --force<br></code></pre></td></tr></table></figure>\n<h3 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">class Singleton(object):<br>    __instance = None<br><br>    def __new__(cls, age, name):<br>        if not cls.__instance:<br>            cls.__instance = object.__new__(cls)<br>        return cls.__instance<br></code></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Python学习随笔\"><a href=\"#Python学习随笔\" class=\"headerlink\" title=\"Python学习随笔\"></a>Python学习随笔</h2>","more":"<h3 id=\"字典转dataframe\"><a href=\"#字典转dataframe\" class=\"headerlink\" title=\"字典转dataframe\"></a>字典转dataframe</h3><p>不定义列名时：pd.DataFrame.from_dict(data, orient=’index’)<br>定义列名时：pd.DataFrame.from_dict(data, orient=’index’, columns=[‘A’, ‘B’, ‘C’, ‘D’])</p>\n<h3 id=\"pandas筛选\"><a href=\"#pandas筛选\" class=\"headerlink\" title=\"pandas筛选\"></a>pandas筛选</h3><h4 id=\"选取某列值等于某些值的行用-，不等于用-！-，data-loc-data-‘a’-‘one’\"><a href=\"#选取某列值等于某些值的行用-，不等于用-！-，data-loc-data-‘a’-‘one’\" class=\"headerlink\" title=\"选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data[‘a’] == ‘one’]\"></a>选取某列值等于某些值的行用 == ，不等于用 ！= ，data.loc[data[‘a’] == ‘one’]</h4><h4 id=\"选取某列值是否是某一类型的数值用-isin-取反用\"><a href=\"#选取某列值是否是某一类型的数值用-isin-取反用\" class=\"headerlink\" title=\"选取某列值是否是某一类型的数值用 isin ,取反用 ~\"></a>选取某列值是否是某一类型的数值用 isin ,取反用 ~</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">data.loc[data[&#x27;a&#x27;].isin([&#x27;one&#x27;, &#x27;two&#x27;])]<br>data.loc[~data[&#x27;a&#x27;].isin([&#x27;one&#x27;, &#x27;two&#x27;])]<br></code></pre></td></tr></table></figure>\n<h4 id=\"多种条件的选取用-amp-data-loc-data-‘a’-‘one’-amp-data-‘b’-‘two’\"><a href=\"#多种条件的选取用-amp-data-loc-data-‘a’-‘one’-amp-data-‘b’-‘two’\" class=\"headerlink\" title=\"多种条件的选取用 &amp; , data.loc[(data[‘a’] == ‘one’) &amp; (data[‘b’] == ‘two’)]\"></a>多种条件的选取用 &amp; , data.loc[(data[‘a’] == ‘one’) &amp; (data[‘b’] == ‘two’)]</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">np.linspace(start, stop, num) ##参数为起点，终点，点数，num默认为50<br></code></pre></td></tr></table></figure>\n<h3 id=\"把某列值设为index，df-set-index-‘columns’-df-reset-index-重置索引\"><a href=\"#把某列值设为index，df-set-index-‘columns’-df-reset-index-重置索引\" class=\"headerlink\" title=\"把某列值设为index，df.set_index(‘columns’)  (df.reset_index()重置索引)\"></a>把某列值设为index，df.set_index(‘columns’)  (df.reset_index()重置索引)</h3><p>df中merge函数按 键 合并，concat函数按 轴 合并</p>\n<h3 id=\"按键-key-合并可以分「单键合并」和「多键合并」\"><a href=\"#按键-key-合并可以分「单键合并」和「多键合并」\" class=\"headerlink\" title=\"按键 (key) 合并可以分「单键合并」和「多键合并」\"></a>按键 (key) 合并可以分「单键合并」和「多键合并」</h3><h3 id=\"单键合并：\"><a href=\"#单键合并：\" class=\"headerlink\" title=\"单键合并：\"></a>单键合并：</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge(df1, df2, how=s, on=c ) ##c 是 df1 和 df2 共有的一栏，合并方式 (how=s) 有四种：<br></code></pre></td></tr></table></figure>\n<h6 id=\"左连接-left-：合并之后显示-df1-的所有行\"><a href=\"#左连接-left-：合并之后显示-df1-的所有行\" class=\"headerlink\" title=\"左连接 (left)：合并之后显示 df1 的所有行\"></a>左连接 (left)：合并之后显示 df1 的所有行</h6><h6 id=\"右连接-right-：合并之后显示-df2-的所有行\"><a href=\"#右连接-right-：合并之后显示-df2-的所有行\" class=\"headerlink\" title=\"右连接 (right)：合并之后显示 df2 的所有行\"></a>右连接 (right)：合并之后显示 df2 的所有行</h6><h6 id=\"外连接-outer-：合并-df1-和-df2-共有的所有行\"><a href=\"#外连接-outer-：合并-df1-和-df2-共有的所有行\" class=\"headerlink\" title=\"外连接 (outer)：合并 df1 和 df2 共有的所有行\"></a>外连接 (outer)：合并 df1 和 df2 共有的所有行</h6><h6 id=\"内连接-inner-：只保留两个表中公共部分的信息-默认情况\"><a href=\"#内连接-inner-：只保留两个表中公共部分的信息-默认情况\" class=\"headerlink\" title=\"内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)\"></a>内连接 (inner)：只保留两个表中公共部分的信息 (默认情况)</h6><h6 id=\"多键合并-俩组数据均有该列\"><a href=\"#多键合并-俩组数据均有该列\" class=\"headerlink\" title=\"多键合并(俩组数据均有该列)\"></a>多键合并(俩组数据均有该列)</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge( df1, df2, how=s, on=c )  ## c 是多栏（如一个列表<br></code></pre></td></tr></table></figure>\n<h3 id=\"多键合并-两组数据不同的列名）\"><a href=\"#多键合并-两组数据不同的列名）\" class=\"headerlink\" title=\"多键合并(两组数据不同的列名）\"></a>多键合并(两组数据不同的列名）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.merge(df1, df2, left_on = &#x27;key1&#x27;, right_on = &#x27;key2&#x27;)<br></code></pre></td></tr></table></figure>\n<h3 id=\"插入列：除在最右侧插入用标签直接创建外，其他列用-insert-方法进行插入，比如table-insert-0-’date’-date\"><a href=\"#插入列：除在最右侧插入用标签直接创建外，其他列用-insert-方法进行插入，比如table-insert-0-’date’-date\" class=\"headerlink\" title=\"插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,’date’,date)\"></a>插入列：除在最右侧插入用标签直接创建外，其他列用.insert()方法进行插入，比如table.insert(0,’date’,date)</h3><p>当 df1 和 df2 有两个相同的列 (Asset 和 Instrument) 时，单单只对一列 (Asset) 做合并产出的 DataFrame 会有另一列 (Instrument) 重复的名称。<br>这时 merge 函数给重复的名称加个后缀 _x, _y，也可以设定 suffixes 来改后缀</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pd.concat([df1,df2], axis=0, ignore_index=True)  # 默认axis=0（行连接）<br></code></pre></td></tr></table></figure>\n\n<h3 id=\"列索引-→-行索引，用-stack-函数-行索引-→-列索引，用-unstack-函数\"><a href=\"#列索引-→-行索引，用-stack-函数-行索引-→-列索引，用-unstack-函数\" class=\"headerlink\" title=\"列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数\"></a>列索引 → 行索引，用 stack 函数;行索引 → 列索引，用 unstack 函数</h3><h3 id=\"数据透视：\"><a href=\"#数据透视：\" class=\"headerlink\" title=\"数据透视：\"></a>数据透视：</h3><p>用 pivot 函数将「一张长表」变「多张宽表」，<br>用 melt 函数将「多张宽表」变「一张长表」  # 函数 melt 实际是将「源表」转化成 id-variable 类型的 DataFrame</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\">data_pivot = data.pivot(index=<span class=\"hljs-string\">&#x27;Date&#x27;</span>,columns=<span class=\"hljs-string\">&#x27;Symbol&#x27;</span>,values=<span class=\"hljs-string\">&#x27;Adj Close&#x27;</span>) <span class=\"hljs-comment\">#若不设置value参数，剩下的列都用来透视</span><br>melted_data = pd.melt(data, id_vars=[<span class=\"hljs-string\">&#x27;Date&#x27;</span>,<span class=\"hljs-string\">&#x27;Symbol&#x27;</span>])<br><span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">set</span>(<span class=\"hljs-built_in\">list</span>), key=<span class=\"hljs-built_in\">list</span>.index)  <span class=\"hljs-comment\">## 消除重复元素不改变原始数据顺序</span><br><span class=\"hljs-built_in\">sorted</span>(<span class=\"hljs-built_in\">dict</span>.items(),key=<span class=\"hljs-keyword\">lambda</span> x:x[<span class=\"hljs-number\">1</span>],reverse=<span class=\"hljs-literal\">True</span>)  <span class=\"hljs-comment\">## 对字典按值反向排序（x[0]按键排序）</span><br></code></pre></td></tr></table></figure>\n\n<h3 id=\"pandas-删除列\"><a href=\"#pandas-删除列\" class=\"headerlink\" title=\"pandas 删除列\"></a>pandas 删除列</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs routeros\">df = df.drop([<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>], <span class=\"hljs-attribute\">axis</span>=1)<br><span class=\"hljs-comment\">#或者</span><br>df.drop([<span class=\"hljs-string\">&#x27;c&#x27;</span>, <span class=\"hljs-string\">&#x27;e&#x27;</span>], <span class=\"hljs-attribute\">axis</span>=1, <span class=\"hljs-attribute\">inplace</span>=<span class=\"hljs-literal\">True</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"对行-z-score-标准化\"><a href=\"#对行-z-score-标准化\" class=\"headerlink\" title=\"对行 z-score 标准化\"></a>对行 z-score 标准化</h3><figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs maxima\">df.<span class=\"hljs-built_in\">apply</span>(<span class=\"hljs-built_in\">lambda</span> x: (x - <span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">mean</span>(x)) / (<span class=\"hljs-built_in\">np</span>.<span class=\"hljs-built_in\">std</span>(x,ddof=<span class=\"hljs-number\">1</span>)), axis=<span class=\"hljs-number\">1</span>)<br></code></pre></td></tr></table></figure>\n<h3 id=\"对-Majority-protein-IDs-列转成多行\"><a href=\"#对-Majority-protein-IDs-列转成多行\" class=\"headerlink\" title=\"对 Majority protein IDs 列转成多行\"></a>对 Majority protein IDs 列转成多行</h3><figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">df = df[~df[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].str.contains(<span class=\"hljs-string\">&#x27;CON|REV&#x27;</span>, regex=<span class=\"hljs-keyword\">True</span>)]<br>df = df.<span class=\"hljs-keyword\">drop</span>(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>, axis=<span class=\"hljs-number\">1</span>).<span class=\"hljs-keyword\">join</span>(df[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].str.split(<span class=\"hljs-string\">&#x27;;&#x27;</span>, expand=<span class=\"hljs-keyword\">True</span>).stack().reset_index(<span class=\"hljs-keyword\">level</span>=<span class=\"hljs-number\">1</span>, <span class=\"hljs-keyword\">drop</span>=<span class=\"hljs-keyword\">True</span>).<span class=\"hljs-keyword\">rename</span>(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>))<br><br>def ab(df): <br>    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;;&#x27;</span>.<span class=\"hljs-keyword\">join</span>(df.<span class=\"hljs-keyword\">values</span>)<br>newcolumns = df_merge.<span class=\"hljs-keyword\">columns</span>.tolist()<br>newcolumns.remove(<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>)<br>newdf = df_merge.groupby(newcolumns)[<span class=\"hljs-string\">&#x27;Majority protein IDs&#x27;</span>].apply(ab)   ## 多行合并一行<br></code></pre></td></tr></table></figure>\n<h3 id=\"for、while循环中的else扩展用法\"><a href=\"#for、while循环中的else扩展用法\" class=\"headerlink\" title=\"for、while循环中的else扩展用法\"></a>for、while循环中的else扩展用法</h3><p>else中的程序只在一种条件下执行，即循环正常遍历所有内容或者由于条件不成立而结束循环，没有因break或者return而退出循环。continue对else没影响</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">for i in range(10):<br>    if i==5:<br>        break<br>    print(&#x27;i=&#x27;,i,end=&#x27;,&#x27;)<br>else:<br>    print(&#x27;success&#x27;)#不输出   在for循环中含有break时则直接终止循环，并不会执行else子句。<br><br>for i in range(10):<br>    if i==5:<br>        continue<br>    print(&#x27;i=&#x27;,i,end=&#x27;,&#x27;)<br>else:<br>    print(&#x27;success&#x27;)#输出<br></code></pre></td></tr></table></figure>\n<h3 id=\"展平嵌套列表\"><a href=\"#展平嵌套列表\" class=\"headerlink\" title=\"展平嵌套列表\"></a>展平嵌套列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">newlist = [item for items in newlist for item in items]<br>#或者您可以像这样从chain中使用itertools<br>from itertools import chain<br>newlist = list(chain(*newlist))<br>#或者您可以使用chain.from_iterable，其中无需解压缩列表<br>from itertools import chain<br>newlist = list(chain.from_iterable(newlist)) #效率更高<br></code></pre></td></tr></table></figure>\n<h3 id=\"生成requirements-txt\"><a href=\"#生成requirements-txt\" class=\"headerlink\" title=\"生成requirements.txt\"></a>生成requirements.txt</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">pipreqs ./ --encoding=utf-8 --force<br></code></pre></td></tr></table></figure>\n<h3 id=\"单例\"><a href=\"#单例\" class=\"headerlink\" title=\"单例\"></a>单例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs language\">class Singleton(object):<br>    __instance = None<br><br>    def __new__(cls, age, name):<br>        if not cls.__instance:<br>            cls.__instance = object.__new__(cls)<br>        return cls.__instance<br></code></pre></td></tr></table></figure>"},{"title":"Python 异步","date":"2021-08-11T08:52:10.000Z","index_img":"/img/article/async-sync.png","comment":"valine","_content":"## Python中异步、同步、多进程及多线程的比较\n<!-- more -->\n```\nfrom urllib import request\nfrom urllib import parse\nfrom urllib.request import urlopen\nimport json\nimport pandas as pd\n# 用于多进程\nfrom multiprocessing import Process\n# 用于多线程\nfrom threading import Thread\n# 用于协程+异步\nimport aiohttp\nimport asyncio\n\"\"\"\naiohttp:异步发送POST请求\n\"\"\"\nasync def city_rule_asy():\n    data = {\"key\": \"\"}\n    myPostUrl = \"http://api.chinadatapay.com/government/traffic/2299\"\n    async with aiohttp.ClientSession() as session:\n        async with session.post(myPostUrl, data=data) as res:\n            # print(res.status)\n            return json.loads(await res.text())\ndef run():\n    tasks = []\n    for i in range(5):\n        task = asyncio.ensure_future(city_rule_asy())\n        tasks.append(task)\n    loop = asyncio.get_event_loop()\n    result = loop.run_until_complete(asyncio.gather(*tasks))\n    with open('city_rules.txt', 'a+') as fw:\n        for i in response['data']:\n           for j in i['cities']:\n                fw.write(f\"{j['city']}\\t{j['engine']}\\t{j['prefix']}\\t{j['vin']}\\t{j['model']}\\n\")\n#### ============================================ ###\ndef city_rule():\n    myPostUrl = \"http://api.chinadatapay.com/government/traffic/2299\"\n    data = {\"key\": \"\"}\n    params = parse.urlencode(data).encode('utf-8')  # 提交类型不能为str，需要为byte类型\n    req = request.Request(myPostUrl, params)\n    response = json.loads(urlopen(req).read().decode())\n    with open('city_rules.txt', 'a+') as fw:\n        for i in response['data']:\n           for j in i['cities']:\n                fw.write(f\"{j['city']}\\t{j['engine']}\\t{j['prefix']}\\t{j['vin']}\\t{j['model']}\\n\")\n## 单进程单线程同步\ndef single_process():\n    for i in range(5):\n        city_rule()\n# 多进程并行\ndef mul_process():\n    processes = []\n    for i in range(5):\n        p = Process(target=city_rule, args=())     # 一个参数 args=(prameter,)\n        processes.append(p)\n        p.start()\n    for p in processes:\n        p.join()\n# 多线程并发\ndef mul_thead():\n    threads = []\n    for i in range(5):\n        t = Thread(target=city_rule, args=())\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\nif __name__ == '__main__':\n    # 异步\n    run()\n    # 同步\n    single_process()\n    # 多进程\n    mul_process()\n    #多线程\n    mul_thead()\n```","source":"_posts/Python_异步.md","raw":"---\ntitle: Python 异步\ndate: 2021-08-11 16:52:10\nindex_img: /img/article/async-sync.png\ncategories:\n    - Python\ntags:\n    - Python\ncomment: 'valine'\n---\n## Python中异步、同步、多进程及多线程的比较\n<!-- more -->\n```\nfrom urllib import request\nfrom urllib import parse\nfrom urllib.request import urlopen\nimport json\nimport pandas as pd\n# 用于多进程\nfrom multiprocessing import Process\n# 用于多线程\nfrom threading import Thread\n# 用于协程+异步\nimport aiohttp\nimport asyncio\n\"\"\"\naiohttp:异步发送POST请求\n\"\"\"\nasync def city_rule_asy():\n    data = {\"key\": \"\"}\n    myPostUrl = \"http://api.chinadatapay.com/government/traffic/2299\"\n    async with aiohttp.ClientSession() as session:\n        async with session.post(myPostUrl, data=data) as res:\n            # print(res.status)\n            return json.loads(await res.text())\ndef run():\n    tasks = []\n    for i in range(5):\n        task = asyncio.ensure_future(city_rule_asy())\n        tasks.append(task)\n    loop = asyncio.get_event_loop()\n    result = loop.run_until_complete(asyncio.gather(*tasks))\n    with open('city_rules.txt', 'a+') as fw:\n        for i in response['data']:\n           for j in i['cities']:\n                fw.write(f\"{j['city']}\\t{j['engine']}\\t{j['prefix']}\\t{j['vin']}\\t{j['model']}\\n\")\n#### ============================================ ###\ndef city_rule():\n    myPostUrl = \"http://api.chinadatapay.com/government/traffic/2299\"\n    data = {\"key\": \"\"}\n    params = parse.urlencode(data).encode('utf-8')  # 提交类型不能为str，需要为byte类型\n    req = request.Request(myPostUrl, params)\n    response = json.loads(urlopen(req).read().decode())\n    with open('city_rules.txt', 'a+') as fw:\n        for i in response['data']:\n           for j in i['cities']:\n                fw.write(f\"{j['city']}\\t{j['engine']}\\t{j['prefix']}\\t{j['vin']}\\t{j['model']}\\n\")\n## 单进程单线程同步\ndef single_process():\n    for i in range(5):\n        city_rule()\n# 多进程并行\ndef mul_process():\n    processes = []\n    for i in range(5):\n        p = Process(target=city_rule, args=())     # 一个参数 args=(prameter,)\n        processes.append(p)\n        p.start()\n    for p in processes:\n        p.join()\n# 多线程并发\ndef mul_thead():\n    threads = []\n    for i in range(5):\n        t = Thread(target=city_rule, args=())\n        threads.append(t)\n        t.start()\n    for t in threads:\n        t.join()\nif __name__ == '__main__':\n    # 异步\n    run()\n    # 同步\n    single_process()\n    # 多进程\n    mul_process()\n    #多线程\n    mul_thead()\n```","slug":"Python_异步","published":1,"updated":"2021-08-19T02:02:25.828Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor921000dcmsoawdj83tp","content":"<h2 id=\"Python中异步、同步、多进程及多线程的比较\"><a href=\"#Python中异步、同步、多进程及多线程的比较\" class=\"headerlink\" title=\"Python中异步、同步、多进程及多线程的比较\"></a>Python中异步、同步、多进程及多线程的比较</h2><span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> request<br><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> parse<br><span class=\"hljs-keyword\">from</span> urllib.request <span class=\"hljs-keyword\">import</span> urlopen<br><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-comment\"># 用于多进程</span><br><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Process<br><span class=\"hljs-comment\"># 用于多线程</span><br><span class=\"hljs-keyword\">from</span> threading <span class=\"hljs-keyword\">import</span> Thread<br><span class=\"hljs-comment\"># 用于协程+异步</span><br><span class=\"hljs-keyword\">import</span> aiohttp<br><span class=\"hljs-keyword\">import</span> asyncio<br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">aiohttp:异步发送POST请求</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">city_rule_asy</span>():</span><br>    data = &#123;<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    myPostUrl = <span class=\"hljs-string\">&quot;http://api.chinadatapay.com/government/traffic/2299&quot;</span><br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiohttp.ClientSession() <span class=\"hljs-keyword\">as</span> session:<br>        <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> session.post(myPostUrl, data=data) <span class=\"hljs-keyword\">as</span> res:<br>            <span class=\"hljs-comment\"># print(res.status)</span><br>            <span class=\"hljs-keyword\">return</span> json.loads(<span class=\"hljs-keyword\">await</span> res.text())<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>():</span><br>    tasks = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        task = asyncio.ensure_future(city_rule_asy())<br>        tasks.append(task)<br>    loop = asyncio.get_event_loop()<br>    result = loop.run_until_complete(asyncio.gather(*tasks))<br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;city_rules.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;a+&#x27;</span>) <span class=\"hljs-keyword\">as</span> fw:<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response[<span class=\"hljs-string\">&#x27;data&#x27;</span>]:<br>           <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i[<span class=\"hljs-string\">&#x27;cities&#x27;</span>]:<br>                fw.write(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;city&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;engine&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;prefix&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;vin&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;model&#x27;</span>]&#125;</span>\\n&quot;</span>)<br><span class=\"hljs-comment\">#### ============================================ ###</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">city_rule</span>():</span><br>    myPostUrl = <span class=\"hljs-string\">&quot;http://api.chinadatapay.com/government/traffic/2299&quot;</span><br>    data = &#123;<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    params = parse.urlencode(data).encode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)  <span class=\"hljs-comment\"># 提交类型不能为str，需要为byte类型</span><br>    req = request.Request(myPostUrl, params)<br>    response = json.loads(urlopen(req).read().decode())<br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;city_rules.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;a+&#x27;</span>) <span class=\"hljs-keyword\">as</span> fw:<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response[<span class=\"hljs-string\">&#x27;data&#x27;</span>]:<br>           <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i[<span class=\"hljs-string\">&#x27;cities&#x27;</span>]:<br>                fw.write(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;city&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;engine&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;prefix&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;vin&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;model&#x27;</span>]&#125;</span>\\n&quot;</span>)<br><span class=\"hljs-comment\">## 单进程单线程同步</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">single_process</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        city_rule()<br><span class=\"hljs-comment\"># 多进程并行</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mul_process</span>():</span><br>    processes = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        p = Process(target=city_rule, args=())     <span class=\"hljs-comment\"># 一个参数 args=(prameter,)</span><br>        processes.append(p)<br>        p.start()<br>    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> processes:<br>        p.join()<br><span class=\"hljs-comment\"># 多线程并发</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mul_thead</span>():</span><br>    threads = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = Thread(target=city_rule, args=())<br>        threads.append(t)<br>        t.start()<br>    <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> threads:<br>        t.join()<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># 异步</span><br>    run()<br>    <span class=\"hljs-comment\"># 同步</span><br>    single_process()<br>    <span class=\"hljs-comment\"># 多进程</span><br>    mul_process()<br>    <span class=\"hljs-comment\">#多线程</span><br>    mul_thead()<br></code></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<h2 id=\"Python中异步、同步、多进程及多线程的比较\"><a href=\"#Python中异步、同步、多进程及多线程的比较\" class=\"headerlink\" title=\"Python中异步、同步、多进程及多线程的比较\"></a>Python中异步、同步、多进程及多线程的比较</h2>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> request<br><span class=\"hljs-keyword\">from</span> urllib <span class=\"hljs-keyword\">import</span> parse<br><span class=\"hljs-keyword\">from</span> urllib.request <span class=\"hljs-keyword\">import</span> urlopen<br><span class=\"hljs-keyword\">import</span> json<br><span class=\"hljs-keyword\">import</span> pandas <span class=\"hljs-keyword\">as</span> pd<br><span class=\"hljs-comment\"># 用于多进程</span><br><span class=\"hljs-keyword\">from</span> multiprocessing <span class=\"hljs-keyword\">import</span> Process<br><span class=\"hljs-comment\"># 用于多线程</span><br><span class=\"hljs-keyword\">from</span> threading <span class=\"hljs-keyword\">import</span> Thread<br><span class=\"hljs-comment\"># 用于协程+异步</span><br><span class=\"hljs-keyword\">import</span> aiohttp<br><span class=\"hljs-keyword\">import</span> asyncio<br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-string\">aiohttp:异步发送POST请求</span><br><span class=\"hljs-string\">&quot;&quot;&quot;</span><br><span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">city_rule_asy</span>():</span><br>    data = &#123;<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    myPostUrl = <span class=\"hljs-string\">&quot;http://api.chinadatapay.com/government/traffic/2299&quot;</span><br>    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> aiohttp.ClientSession() <span class=\"hljs-keyword\">as</span> session:<br>        <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">with</span> session.post(myPostUrl, data=data) <span class=\"hljs-keyword\">as</span> res:<br>            <span class=\"hljs-comment\"># print(res.status)</span><br>            <span class=\"hljs-keyword\">return</span> json.loads(<span class=\"hljs-keyword\">await</span> res.text())<br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">run</span>():</span><br>    tasks = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        task = asyncio.ensure_future(city_rule_asy())<br>        tasks.append(task)<br>    loop = asyncio.get_event_loop()<br>    result = loop.run_until_complete(asyncio.gather(*tasks))<br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;city_rules.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;a+&#x27;</span>) <span class=\"hljs-keyword\">as</span> fw:<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response[<span class=\"hljs-string\">&#x27;data&#x27;</span>]:<br>           <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i[<span class=\"hljs-string\">&#x27;cities&#x27;</span>]:<br>                fw.write(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;city&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;engine&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;prefix&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;vin&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;model&#x27;</span>]&#125;</span>\\n&quot;</span>)<br><span class=\"hljs-comment\">#### ============================================ ###</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">city_rule</span>():</span><br>    myPostUrl = <span class=\"hljs-string\">&quot;http://api.chinadatapay.com/government/traffic/2299&quot;</span><br>    data = &#123;<span class=\"hljs-string\">&quot;key&quot;</span>: <span class=\"hljs-string\">&quot;&quot;</span>&#125;<br>    params = parse.urlencode(data).encode(<span class=\"hljs-string\">&#x27;utf-8&#x27;</span>)  <span class=\"hljs-comment\"># 提交类型不能为str，需要为byte类型</span><br>    req = request.Request(myPostUrl, params)<br>    response = json.loads(urlopen(req).read().decode())<br>    <span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;city_rules.txt&#x27;</span>, <span class=\"hljs-string\">&#x27;a+&#x27;</span>) <span class=\"hljs-keyword\">as</span> fw:<br>        <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> response[<span class=\"hljs-string\">&#x27;data&#x27;</span>]:<br>           <span class=\"hljs-keyword\">for</span> j <span class=\"hljs-keyword\">in</span> i[<span class=\"hljs-string\">&#x27;cities&#x27;</span>]:<br>                fw.write(<span class=\"hljs-string\">f&quot;<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;city&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;engine&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;prefix&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;vin&#x27;</span>]&#125;</span>\\t<span class=\"hljs-subst\">&#123;j[<span class=\"hljs-string\">&#x27;model&#x27;</span>]&#125;</span>\\n&quot;</span>)<br><span class=\"hljs-comment\">## 单进程单线程同步</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">single_process</span>():</span><br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        city_rule()<br><span class=\"hljs-comment\"># 多进程并行</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mul_process</span>():</span><br>    processes = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        p = Process(target=city_rule, args=())     <span class=\"hljs-comment\"># 一个参数 args=(prameter,)</span><br>        processes.append(p)<br>        p.start()<br>    <span class=\"hljs-keyword\">for</span> p <span class=\"hljs-keyword\">in</span> processes:<br>        p.join()<br><span class=\"hljs-comment\"># 多线程并发</span><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">mul_thead</span>():</span><br>    threads = []<br>    <span class=\"hljs-keyword\">for</span> i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">range</span>(<span class=\"hljs-number\">5</span>):<br>        t = Thread(target=city_rule, args=())<br>        threads.append(t)<br>        t.start()<br>    <span class=\"hljs-keyword\">for</span> t <span class=\"hljs-keyword\">in</span> threads:<br>        t.join()<br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    <span class=\"hljs-comment\"># 异步</span><br>    run()<br>    <span class=\"hljs-comment\"># 同步</span><br>    single_process()<br>    <span class=\"hljs-comment\"># 多进程</span><br>    mul_process()<br>    <span class=\"hljs-comment\">#多线程</span><br>    mul_thead()<br></code></pre></td></tr></table></figure>"},{"title":"Trouble No Shoot","date":"2021-08-20T02:49:51.000Z","index_img":"/img/article/troublenoshoot.jpg","comment":"valine","_content":"## 升级hexo遇到的问题\n<!-- more -->\nhexo的一个插件需要5.0以上的版本，看了下自己安装的是4.3的版本，所以想着升级一下。查了半天也没找到有效的方法。之后又查看了node的版本看着也很低，想升级的心又来了。折腾了半天愣是没升级成功，还把系统搞坏了，apt、dpkg这些也都没法用了。网上的资料有时候也不能盲目跟着做，还是用root账户删的，真是细思极恐，这要是公司的生产环境，这估计是要被祭天的。估计我也是仗着这是自己电脑里的子系统才敢这么胡作非为。系统坏了，本来想挽救一下的，发现越挽救问题越大。顺放弃。。。于是重新卸载Linux子系统，再重新安装，前后没花10分钟。果然还是微软baba的子系统安装卸载方便啊。\n系统重新安装了，很多东西就要重新配置，比如github的免密提交等，这里也简单记录下。\n##### 首先配置github及生成ssh秘钥，执行\n```\ngit config --global user.email \"you@example.com\"    ## 我的 git config --global user.email \"jrwjb@sina.com\"   \ngit config --global user.name \"Your Name\"  ## 我的 git config --global user.name \"shubihu\"\nssh-keygen        ## 一路回车即可\n```\n执行完后会在家目录的.ssh下生成下面几个文件\n```\nid_rsa   ## 私钥\nid_rsa.pub  ## 共钥\n```\n然后把公钥的内容添加到github上即可。\n![](/img/article/gitssh.jpg)\n\n##### 回到最开始的问题，升级hexo、node。\n因为是新系统，所以相对简单些，直接安装新版的node，可以从官网下载最新的稳定版进行安装，不过我嫌麻烦懒得去下载，所以参考了这篇文章进行安装。\n```\n## 使用nvm进行安装\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nnvm install node\n```\n<!-- <iframe src=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n##### 最后是升级hexo\n```\n# 使用淘宝源的 cnpm 替换 npm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install -g cnpm                 # 升级 npm\ncnpm cache clean -f                 # 清除 npm 缓存\n\n===更新 hexo: 进入 blog 目录，执行如下命令=== \n# 更新 package.json 中的 hexo 及个插件版本\ncnpm install -g npm-check           # 检查之前安装的插件，都有哪些是可以升级的 \ncnpm install -g npm-upgrade         # 升级系统中的插件\nnpm-check\nnpm-upgrade\n\n# 更新 hexo 及所有插件\ncnpm update\n\n# 确认 hexo 已经更新\nhexo -v\n```\n<!-- <iframe src=\"https://xmuli.tech/posts/cb1e6c4f/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n参考\n* https://xmuli.tech/posts/cb1e6c4f\n* https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04","source":"_posts/TroubleNoShoot.md","raw":"---\ntitle: Trouble No Shoot\ndate: 2021-08-20 10:49:51\nindex_img: /img/article/troublenoshoot.jpg\ncategories:\n    - TroubleShoot\ntags:\n    - TroubleShoot\ncomment: 'valine'\n---\n## 升级hexo遇到的问题\n<!-- more -->\nhexo的一个插件需要5.0以上的版本，看了下自己安装的是4.3的版本，所以想着升级一下。查了半天也没找到有效的方法。之后又查看了node的版本看着也很低，想升级的心又来了。折腾了半天愣是没升级成功，还把系统搞坏了，apt、dpkg这些也都没法用了。网上的资料有时候也不能盲目跟着做，还是用root账户删的，真是细思极恐，这要是公司的生产环境，这估计是要被祭天的。估计我也是仗着这是自己电脑里的子系统才敢这么胡作非为。系统坏了，本来想挽救一下的，发现越挽救问题越大。顺放弃。。。于是重新卸载Linux子系统，再重新安装，前后没花10分钟。果然还是微软baba的子系统安装卸载方便啊。\n系统重新安装了，很多东西就要重新配置，比如github的免密提交等，这里也简单记录下。\n##### 首先配置github及生成ssh秘钥，执行\n```\ngit config --global user.email \"you@example.com\"    ## 我的 git config --global user.email \"jrwjb@sina.com\"   \ngit config --global user.name \"Your Name\"  ## 我的 git config --global user.name \"shubihu\"\nssh-keygen        ## 一路回车即可\n```\n执行完后会在家目录的.ssh下生成下面几个文件\n```\nid_rsa   ## 私钥\nid_rsa.pub  ## 共钥\n```\n然后把公钥的内容添加到github上即可。\n![](/img/article/gitssh.jpg)\n\n##### 回到最开始的问题，升级hexo、node。\n因为是新系统，所以相对简单些，直接安装新版的node，可以从官网下载最新的稳定版进行安装，不过我嫌麻烦懒得去下载，所以参考了这篇文章进行安装。\n```\n## 使用nvm进行安装\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bash\nnvm install node\n```\n<!-- <iframe src=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n##### 最后是升级hexo\n```\n# 使用淘宝源的 cnpm 替换 npm\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n\ncnpm install -g cnpm                 # 升级 npm\ncnpm cache clean -f                 # 清除 npm 缓存\n\n===更新 hexo: 进入 blog 目录，执行如下命令=== \n# 更新 package.json 中的 hexo 及个插件版本\ncnpm install -g npm-check           # 检查之前安装的插件，都有哪些是可以升级的 \ncnpm install -g npm-upgrade         # 升级系统中的插件\nnpm-check\nnpm-upgrade\n\n# 更新 hexo 及所有插件\ncnpm update\n\n# 确认 hexo 已经更新\nhexo -v\n```\n<!-- <iframe src=\"https://xmuli.tech/posts/cb1e6c4f/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n参考\n* https://xmuli.tech/posts/cb1e6c4f\n* https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04","slug":"TroubleNoShoot","published":1,"updated":"2021-09-30T05:31:36.260Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor924000hcmsochvmbh66","content":"<h2 id=\"升级hexo遇到的问题\"><a href=\"#升级hexo遇到的问题\" class=\"headerlink\" title=\"升级hexo遇到的问题\"></a>升级hexo遇到的问题</h2><span id=\"more\"></span>\n<p>hexo的一个插件需要5.0以上的版本，看了下自己安装的是4.3的版本，所以想着升级一下。查了半天也没找到有效的方法。之后又查看了node的版本看着也很低，想升级的心又来了。折腾了半天愣是没升级成功，还把系统搞坏了，apt、dpkg这些也都没法用了。网上的资料有时候也不能盲目跟着做，还是用root账户删的，真是细思极恐，这要是公司的生产环境，这估计是要被祭天的。估计我也是仗着这是自己电脑里的子系统才敢这么胡作非为。系统坏了，本来想挽救一下的，发现越挽救问题越大。顺放弃。。。于是重新卸载Linux子系统，再重新安装，前后没花10分钟。果然还是微软baba的子系统安装卸载方便啊。<br>系统重新安装了，很多东西就要重新配置，比如github的免密提交等，这里也简单记录下。</p>\n<h5 id=\"首先配置github及生成ssh秘钥，执行\"><a href=\"#首先配置github及生成ssh秘钥，执行\" class=\"headerlink\" title=\"首先配置github及生成ssh秘钥，执行\"></a>首先配置github及生成ssh秘钥，执行</h5><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs verilog\">git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.email</span> <span class=\"hljs-string\">&quot;you@example.com&quot;</span>    ## 我的 git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.email</span> <span class=\"hljs-string\">&quot;jrwjb@sina.com&quot;</span>   <br>git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.name</span> <span class=\"hljs-string\">&quot;Your Name&quot;</span>  ## 我的 git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.name</span> <span class=\"hljs-string\">&quot;shubihu&quot;</span><br>ssh-keygen        ## 一路回车即可<br></code></pre></td></tr></table></figure>\n<p>执行完后会在家目录的.ssh下生成下面几个文件</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">id_rsa   ## 私钥<br>id_rsa.pub  ## 共钥<br></code></pre></td></tr></table></figure>\n<p>然后把公钥的内容添加到github上即可。<br><img src=\"/img/article/gitssh.jpg\"></p>\n<h5 id=\"回到最开始的问题，升级hexo、node。\"><a href=\"#回到最开始的问题，升级hexo、node。\" class=\"headerlink\" title=\"回到最开始的问题，升级hexo、node。\"></a>回到最开始的问题，升级hexo、node。</h5><p>因为是新系统，所以相对简单些，直接安装新版的node，可以从官网下载最新的稳定版进行安装，不过我嫌麻烦懒得去下载，所以参考了这篇文章进行安装。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">## 使用nvm进行安装</span><br>curl -o- https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/nvm-sh/</span>nvm<span class=\"hljs-regexp\">/v0.35.3/i</span>nstall.sh | bash<br>nvm install node<br></code></pre></td></tr></table></figure>\n<!-- <iframe src=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n<h5 id=\"最后是升级hexo\"><a href=\"#最后是升级hexo\" class=\"headerlink\" title=\"最后是升级hexo\"></a>最后是升级hexo</h5><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-comment\"># 使用淘宝源的 cnpm 替换 npm</span><br><span class=\"hljs-built_in\">npm</span> install -g cnpm --registry=https://registry.<span class=\"hljs-built_in\">npm</span>.taobao.org<br><br>cnpm install -g cnpm                 <span class=\"hljs-comment\"># 升级 npm</span><br>cnpm cache clean -f                 <span class=\"hljs-comment\"># 清除 npm 缓存</span><br><br>===更新 hexo: 进入 blog 目录，执行如下命令=== <br><span class=\"hljs-comment\"># 更新 package.json 中的 hexo 及个插件版本</span><br>cnpm install -g <span class=\"hljs-built_in\">npm</span>-check           <span class=\"hljs-comment\"># 检查之前安装的插件，都有哪些是可以升级的 </span><br>cnpm install -g <span class=\"hljs-built_in\">npm</span>-upgrade         <span class=\"hljs-comment\"># 升级系统中的插件</span><br><span class=\"hljs-built_in\">npm</span>-check<br><span class=\"hljs-built_in\">npm</span>-upgrade<br><br><span class=\"hljs-comment\"># 更新 hexo 及所有插件</span><br>cnpm update<br><br><span class=\"hljs-comment\"># 确认 hexo 已经更新</span><br>hexo -v<br></code></pre></td></tr></table></figure>\n<!-- <iframe src=\"https://xmuli.tech/posts/cb1e6c4f/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n<p>参考</p>\n<ul>\n<li><a href=\"https://xmuli.tech/posts/cb1e6c4f\">https://xmuli.tech/posts/cb1e6c4f</a></li>\n<li><a href=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04\">https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"升级hexo遇到的问题\"><a href=\"#升级hexo遇到的问题\" class=\"headerlink\" title=\"升级hexo遇到的问题\"></a>升级hexo遇到的问题</h2>","more":"<p>hexo的一个插件需要5.0以上的版本，看了下自己安装的是4.3的版本，所以想着升级一下。查了半天也没找到有效的方法。之后又查看了node的版本看着也很低，想升级的心又来了。折腾了半天愣是没升级成功，还把系统搞坏了，apt、dpkg这些也都没法用了。网上的资料有时候也不能盲目跟着做，还是用root账户删的，真是细思极恐，这要是公司的生产环境，这估计是要被祭天的。估计我也是仗着这是自己电脑里的子系统才敢这么胡作非为。系统坏了，本来想挽救一下的，发现越挽救问题越大。顺放弃。。。于是重新卸载Linux子系统，再重新安装，前后没花10分钟。果然还是微软baba的子系统安装卸载方便啊。<br>系统重新安装了，很多东西就要重新配置，比如github的免密提交等，这里也简单记录下。</p>\n<h5 id=\"首先配置github及生成ssh秘钥，执行\"><a href=\"#首先配置github及生成ssh秘钥，执行\" class=\"headerlink\" title=\"首先配置github及生成ssh秘钥，执行\"></a>首先配置github及生成ssh秘钥，执行</h5><figure class=\"highlight verilog\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs verilog\">git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.email</span> <span class=\"hljs-string\">&quot;you@example.com&quot;</span>    ## 我的 git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.email</span> <span class=\"hljs-string\">&quot;jrwjb@sina.com&quot;</span>   <br>git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.name</span> <span class=\"hljs-string\">&quot;Your Name&quot;</span>  ## 我的 git <span class=\"hljs-keyword\">config</span> --<span class=\"hljs-keyword\">global</span> user<span class=\"hljs-variable\">.name</span> <span class=\"hljs-string\">&quot;shubihu&quot;</span><br>ssh-keygen        ## 一路回车即可<br></code></pre></td></tr></table></figure>\n<p>执行完后会在家目录的.ssh下生成下面几个文件</p>\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs clean\">id_rsa   ## 私钥<br>id_rsa.pub  ## 共钥<br></code></pre></td></tr></table></figure>\n<p>然后把公钥的内容添加到github上即可。<br><img src=\"/img/article/gitssh.jpg\"></p>\n<h5 id=\"回到最开始的问题，升级hexo、node。\"><a href=\"#回到最开始的问题，升级hexo、node。\" class=\"headerlink\" title=\"回到最开始的问题，升级hexo、node。\"></a>回到最开始的问题，升级hexo、node。</h5><p>因为是新系统，所以相对简单些，直接安装新版的node，可以从官网下载最新的稳定版进行安装，不过我嫌麻烦懒得去下载，所以参考了这篇文章进行安装。</p>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs awk\"><span class=\"hljs-comment\">## 使用nvm进行安装</span><br>curl -o- https:<span class=\"hljs-regexp\">//</span>raw.githubusercontent.com<span class=\"hljs-regexp\">/nvm-sh/</span>nvm<span class=\"hljs-regexp\">/v0.35.3/i</span>nstall.sh | bash<br>nvm install node<br></code></pre></td></tr></table></figure>\n<!-- <iframe src=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n<h5 id=\"最后是升级hexo\"><a href=\"#最后是升级hexo\" class=\"headerlink\" title=\"最后是升级hexo\"></a>最后是升级hexo</h5><figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs coffeescript\"><span class=\"hljs-comment\"># 使用淘宝源的 cnpm 替换 npm</span><br><span class=\"hljs-built_in\">npm</span> install -g cnpm --registry=https://registry.<span class=\"hljs-built_in\">npm</span>.taobao.org<br><br>cnpm install -g cnpm                 <span class=\"hljs-comment\"># 升级 npm</span><br>cnpm cache clean -f                 <span class=\"hljs-comment\"># 清除 npm 缓存</span><br><br>===更新 hexo: 进入 blog 目录，执行如下命令=== <br><span class=\"hljs-comment\"># 更新 package.json 中的 hexo 及个插件版本</span><br>cnpm install -g <span class=\"hljs-built_in\">npm</span>-check           <span class=\"hljs-comment\"># 检查之前安装的插件，都有哪些是可以升级的 </span><br>cnpm install -g <span class=\"hljs-built_in\">npm</span>-upgrade         <span class=\"hljs-comment\"># 升级系统中的插件</span><br><span class=\"hljs-built_in\">npm</span>-check<br><span class=\"hljs-built_in\">npm</span>-upgrade<br><br><span class=\"hljs-comment\"># 更新 hexo 及所有插件</span><br>cnpm update<br><br><span class=\"hljs-comment\"># 确认 hexo 已经更新</span><br>hexo -v<br></code></pre></td></tr></table></figure>\n<!-- <iframe src=\"https://xmuli.tech/posts/cb1e6c4f/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe> -->\n<p>参考</p>\n<ul>\n<li><a href=\"https://xmuli.tech/posts/cb1e6c4f\">https://xmuli.tech/posts/cb1e6c4f</a></li>\n<li><a href=\"https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04\">https://www.myfreax.com/how-to-install-node-js-on-ubuntu-18-04</a></li>\n</ul>"},{"title":"We Are SVIP","date":"2021-08-20T08:35:35.000Z","index_img":"/img/article/vip.jpg","comment":"valine","_content":"## 薅各大厂视频羊毛\n<!-- more -->\n周末了又可以追剧了，最近在看扫黑风暴，但是吧，现在各大视频网站都是需要VIP才能看，有的甚至更可恶，还要超前点播。这嘴脸真的是穷凶极恶。都是大厂了，说好的回报社会呢，，，就这样回报社会呢。人家（我没有）都已经忍痛购买你的VIP了，还不满足。算了，你有张良计，我有过墙梯。\n今天就给大家分享个可以薅他们VIP的插件——油猴，确切的说是各路大神开发的脚本，油猴只是个脚本管家。如果能上google的话就方便很多，直接搜索油猴插件进行安装。但是国内吧，，，，可能很多人都无法上谷歌。这里就介绍下本地安装油猴插件的方法。\n\n##### No.1\n首先先下载下油猴，链接在此：https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w ;提取码：<span  style=\"color: #519D9E; \">8fmu</span>\n下载完成后直接解压到该文件夹。\n然后打开我们的谷歌浏览器，在搜索地址栏输入：<span  style=\"color: #519D9E; \">chrome://extensions/</span>，进入扩展程序界面，<span  style=\"color: #519D9E; \">打开右上角的开发者模式</span>。接着选择<span  style=\"color: #519D9E; \">左上角的加载已解压的扩展程序</span>，然后选择我们刚刚解压过的油猴的目录即可，到这里油猴插件就完成了。接下来就是安装脚本了。\n\n##### No.2\n然后进入这个网站：https://greasyfork.org/zh-CN ，搜索VIP，会出现很多个脚本，自行选择就好。我选择的是 https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8 这个，觉得还是比较好用的。之后点击安装就大功告成啦。\n\n#### No.3\n利器有了，就可以去各大视频网站薅一波了，超前点播也可以薅哦。油猴这个插件及其脚本的功能不仅限于此，有兴趣可以自行摸索。","source":"_posts/WeAreSVIP.md","raw":"---\ntitle: We Are SVIP\ndate: 2021-08-20 16:35:35\nindex_img: /img/article/vip.jpg\ncategories:\n    - TroubleShoot\ntags:\n    - 薅羊毛\ncomment: 'valine'\n---\n## 薅各大厂视频羊毛\n<!-- more -->\n周末了又可以追剧了，最近在看扫黑风暴，但是吧，现在各大视频网站都是需要VIP才能看，有的甚至更可恶，还要超前点播。这嘴脸真的是穷凶极恶。都是大厂了，说好的回报社会呢，，，就这样回报社会呢。人家（我没有）都已经忍痛购买你的VIP了，还不满足。算了，你有张良计，我有过墙梯。\n今天就给大家分享个可以薅他们VIP的插件——油猴，确切的说是各路大神开发的脚本，油猴只是个脚本管家。如果能上google的话就方便很多，直接搜索油猴插件进行安装。但是国内吧，，，，可能很多人都无法上谷歌。这里就介绍下本地安装油猴插件的方法。\n\n##### No.1\n首先先下载下油猴，链接在此：https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w ;提取码：<span  style=\"color: #519D9E; \">8fmu</span>\n下载完成后直接解压到该文件夹。\n然后打开我们的谷歌浏览器，在搜索地址栏输入：<span  style=\"color: #519D9E; \">chrome://extensions/</span>，进入扩展程序界面，<span  style=\"color: #519D9E; \">打开右上角的开发者模式</span>。接着选择<span  style=\"color: #519D9E; \">左上角的加载已解压的扩展程序</span>，然后选择我们刚刚解压过的油猴的目录即可，到这里油猴插件就完成了。接下来就是安装脚本了。\n\n##### No.2\n然后进入这个网站：https://greasyfork.org/zh-CN ，搜索VIP，会出现很多个脚本，自行选择就好。我选择的是 https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8 这个，觉得还是比较好用的。之后点击安装就大功告成啦。\n\n#### No.3\n利器有了，就可以去各大视频网站薅一波了，超前点播也可以薅哦。油猴这个插件及其脚本的功能不仅限于此，有兴趣可以自行摸索。","slug":"WeAreSVIP","published":1,"updated":"2021-08-20T09:33:58.723Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor925000jcmsoc5gu14zq","content":"<h2 id=\"薅各大厂视频羊毛\"><a href=\"#薅各大厂视频羊毛\" class=\"headerlink\" title=\"薅各大厂视频羊毛\"></a>薅各大厂视频羊毛</h2><span id=\"more\"></span>\n<p>周末了又可以追剧了，最近在看扫黑风暴，但是吧，现在各大视频网站都是需要VIP才能看，有的甚至更可恶，还要超前点播。这嘴脸真的是穷凶极恶。都是大厂了，说好的回报社会呢，，，就这样回报社会呢。人家（我没有）都已经忍痛购买你的VIP了，还不满足。算了，你有张良计，我有过墙梯。<br>今天就给大家分享个可以薅他们VIP的插件——油猴，确切的说是各路大神开发的脚本，油猴只是个脚本管家。如果能上google的话就方便很多，直接搜索油猴插件进行安装。但是国内吧，，，，可能很多人都无法上谷歌。这里就介绍下本地安装油猴插件的方法。</p>\n<h5 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h5><p>首先先下载下油猴，链接在此：<a href=\"https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w\">https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w</a> ;提取码：<span  style=\"color: #519D9E; \">8fmu</span><br>下载完成后直接解压到该文件夹。<br>然后打开我们的谷歌浏览器，在搜索地址栏输入：<span  style=\"color: #519D9E; \">chrome://extensions/</span>，进入扩展程序界面，<span  style=\"color: #519D9E; \">打开右上角的开发者模式</span>。接着选择<span  style=\"color: #519D9E; \">左上角的加载已解压的扩展程序</span>，然后选择我们刚刚解压过的油猴的目录即可，到这里油猴插件就完成了。接下来就是安装脚本了。</p>\n<h5 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h5><p>然后进入这个网站：<a href=\"https://greasyfork.org/zh-CN\">https://greasyfork.org/zh-CN</a> ，搜索VIP，会出现很多个脚本，自行选择就好。我选择的是 <a href=\"https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8\">https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8</a> 这个，觉得还是比较好用的。之后点击安装就大功告成啦。</p>\n<h4 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h4><p>利器有了，就可以去各大视频网站薅一波了，超前点播也可以薅哦。油猴这个插件及其脚本的功能不仅限于此，有兴趣可以自行摸索。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"薅各大厂视频羊毛\"><a href=\"#薅各大厂视频羊毛\" class=\"headerlink\" title=\"薅各大厂视频羊毛\"></a>薅各大厂视频羊毛</h2>","more":"<p>周末了又可以追剧了，最近在看扫黑风暴，但是吧，现在各大视频网站都是需要VIP才能看，有的甚至更可恶，还要超前点播。这嘴脸真的是穷凶极恶。都是大厂了，说好的回报社会呢，，，就这样回报社会呢。人家（我没有）都已经忍痛购买你的VIP了，还不满足。算了，你有张良计，我有过墙梯。<br>今天就给大家分享个可以薅他们VIP的插件——油猴，确切的说是各路大神开发的脚本，油猴只是个脚本管家。如果能上google的话就方便很多，直接搜索油猴插件进行安装。但是国内吧，，，，可能很多人都无法上谷歌。这里就介绍下本地安装油猴插件的方法。</p>\n<h5 id=\"No-1\"><a href=\"#No-1\" class=\"headerlink\" title=\"No.1\"></a>No.1</h5><p>首先先下载下油猴，链接在此：<a href=\"https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w\">https://pan.baidu.com/s/1FQZBBjqr2s8f-9idizxI6w</a> ;提取码：<span  style=\"color: #519D9E; \">8fmu</span><br>下载完成后直接解压到该文件夹。<br>然后打开我们的谷歌浏览器，在搜索地址栏输入：<span  style=\"color: #519D9E; \">chrome://extensions/</span>，进入扩展程序界面，<span  style=\"color: #519D9E; \">打开右上角的开发者模式</span>。接着选择<span  style=\"color: #519D9E; \">左上角的加载已解压的扩展程序</span>，然后选择我们刚刚解压过的油猴的目录即可，到这里油猴插件就完成了。接下来就是安装脚本了。</p>\n<h5 id=\"No-2\"><a href=\"#No-2\" class=\"headerlink\" title=\"No.2\"></a>No.2</h5><p>然后进入这个网站：<a href=\"https://greasyfork.org/zh-CN\">https://greasyfork.org/zh-CN</a> ，搜索VIP，会出现很多个脚本，自行选择就好。我选择的是 <a href=\"https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8\">https://greasyfork.org/zh-CN/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8</a> 这个，觉得还是比较好用的。之后点击安装就大功告成啦。</p>\n<h4 id=\"No-3\"><a href=\"#No-3\" class=\"headerlink\" title=\"No.3\"></a>No.3</h4><p>利器有了，就可以去各大视频网站薅一波了，超前点播也可以薅哦。油猴这个插件及其脚本的功能不仅限于此，有兴趣可以自行摸索。</p>"},{"title":"Python 监控","date":"2021-09-02T05:55:36.000Z","index_img":"/img/article/monitor.png","comment":"valine","_content":"## 使用python监控电脑键盘、鼠标并拍照录像\n<!-- more -->\n```\nimport keyboard\nfrom cv2 import cv2\n# from pynput.mouse import Listener\nimport pyautogui as pag    #监听鼠标\n# from pynput.keyboard import Key, Listener\nfrom threading import Thread\n\nx1, y1 = pag.position()\n# print(x1, y1)\n\ndef camera():\n    '''\n    拍照\n    '''\n    cap = cv2.VideoCapture(0)\n    ret,frame = cap.read() #读取摄像头内容\n    cv2.imwrite(\"./test.jpg\",frame) #保存到磁盘\n    #释放摄像头\n    cap.release()\n\ndef record_video():\n    '''\n    录制视频\n    '''\n    cap = cv2.VideoCapture(0)\n    fps = 30\n    size=(int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n    videoWriter=cv2.VideoWriter('./test.avi',cv2.VideoWriter_fourcc('X','V','I','D'),fps,size)\n    success,frame = cap.read()\n    numFrameRemaining = 5 * fps    #摄像头捕获持续时间\n    while success and numFrameRemaining > 0:\n        videoWriter.write(frame)\n        success,frame = cap.read()\n        numFrameRemaining -= 1\n\n    cap.release()\n\ndef display_video():\n    '''\n    实时窗口\n    '''\n    face_locations = []\n    cap = cv2.VideoCapture(0)\n\n    while True:\n        # Grab a single frame of video\n        ret, frame = cap.read()\n\n        # Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)\n        rgb_frame = frame[:, :, ::-1]\n\n        # Find all the faces in the current frameof video\n        face_locations = face_recognition.face_locations(rgb_frame)\n\n        # Display the results\n        for top, right, bottom, left in face_locations:\n            # Draw a box around the face\n            cv2.rectangle(frame, (left, top),(right, bottom), (0, 0, 255), 2)\n\n        # Display the resulting image\n        cv2.imshow('Video', frame)\n\n        # Hit 'q' on the keyboard to quit!\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n\n    # Release handle tothe webcam\n    cap.release()\n    cv2.destroyAllWindows()\n\ndef display_video2():\n    '''\n    实时检测\n    '''\n    #存储知道人名列表\n    known_names=['yahaha1', 'yahaha2'] \n    #存储知道的特征值\n    known_faces=[]\n\n    image1 =face_recognition.load_image_file(\"yahaha2.jpg\")\n    face_encoding1 =face_recognition.face_encodings(image1)\n\n    image2 =face_recognition.load_image_file(\"yahaha1.jpg\")\n    face_encoding2 =face_recognition.face_encodings(image1)\n\n    if face_encoding1 and face_encoding2:\n        face_encoding1 = face_encoding1[0]\n        face_encoding2 = face_encoding2[0]\n    else:\n        sys.exit()\n\n    known_faces = [face_encoding1, face_encoding2]\n\n    cap = cv2.VideoCapture(0)\n\n    while True:\n        # Grab a single frame of video\n        ret, frame = cap.read()\n        # Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)\n        rgb_frame = frame[:, :, ::-1]\n\n        # Find all the faces and face encodings inthe current frame of video\n        face_locations =face_recognition.face_locations(rgb_frame)  # 如有gpu可添加参数model='cnn'提升精度\n        face_encodings =face_recognition.face_encodings(rgb_frame, face_locations)\n\n        face_names = []\n        for face_encoding in face_encodings:\n            # See if the face is a match for theknown face(s)\n            matches =face_recognition.compare_faces(known_faces, face_encoding, tolerance=0.60)\n\n            name = None\n            # if match[0]:\n            #     name = \"Yahaha\"\n            print(matches)\n            if True in matches:\n                first_match_index = matches.index(True)\n                name = known_names[first_match_index]\n            else:\n                name = 'Unkonwn'\n\n            face_names.append(name)\n\n        # Label the results\n        for (top, right, bottom, left), name in zip(face_locations, face_names):\n            if not name:\n                continue\n\n            # Draw a box around the face\n            cv2.rectangle(frame, (left, top),(right, bottom), (0, 0, 255), 2)\n            # Draw a label with a name below theface\n            cv2.rectangle(frame, (left, bottom -25), (right, bottom), (0, 0, 255), cv2.FILLED)\n            font = cv2.FONT_HERSHEY_DUPLEX\n            cv2.putText(frame, name, (left + 6,bottom - 6), font, 0.5, (255, 255, 255), 1)\n\n        cv2.imshow('Video', frame)\n\n        # Hit 'q' on the keyboard to quit!\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n    # All done!\n    cap.release()\n    cv2.destroyAllWindows()\n\ndef proof(x):\n    # print(x)\n    # record_video()\n    camera()\n\ndef monitor_keyboard():\n    keyboard.hook(proof)\n    #按下任何按键时，都会调用proof，其中一定会传一个值，就是键盘事件\n    keyboard.wait()\n\n\ndef monitor_mouse():\n    x2, y2 = pag.position()\n    while x1 == x2:\n        x2, y2 = pag.position()\n    else:\n        # record_video()\n        camera()\n\nif __name__ == '__main__':\n    k = Thread(target=monitor_keyboard, args=())\n    m = Thread(target=monitor_mouse, args=())\n    k.start()\n    m.start()\n    k.join()\n    m.join()\n\n```\n\n","source":"_posts/python监控.md","raw":"---\ntitle: Python 监控\ndate: 2021-09-02 13:55:36\nindex_img: /img/article/monitor.png\ncategories:\n    - Python\ntags:\n    - 玩\ncomment: 'valine'\n---\n## 使用python监控电脑键盘、鼠标并拍照录像\n<!-- more -->\n```\nimport keyboard\nfrom cv2 import cv2\n# from pynput.mouse import Listener\nimport pyautogui as pag    #监听鼠标\n# from pynput.keyboard import Key, Listener\nfrom threading import Thread\n\nx1, y1 = pag.position()\n# print(x1, y1)\n\ndef camera():\n    '''\n    拍照\n    '''\n    cap = cv2.VideoCapture(0)\n    ret,frame = cap.read() #读取摄像头内容\n    cv2.imwrite(\"./test.jpg\",frame) #保存到磁盘\n    #释放摄像头\n    cap.release()\n\ndef record_video():\n    '''\n    录制视频\n    '''\n    cap = cv2.VideoCapture(0)\n    fps = 30\n    size=(int(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))\n    videoWriter=cv2.VideoWriter('./test.avi',cv2.VideoWriter_fourcc('X','V','I','D'),fps,size)\n    success,frame = cap.read()\n    numFrameRemaining = 5 * fps    #摄像头捕获持续时间\n    while success and numFrameRemaining > 0:\n        videoWriter.write(frame)\n        success,frame = cap.read()\n        numFrameRemaining -= 1\n\n    cap.release()\n\ndef display_video():\n    '''\n    实时窗口\n    '''\n    face_locations = []\n    cap = cv2.VideoCapture(0)\n\n    while True:\n        # Grab a single frame of video\n        ret, frame = cap.read()\n\n        # Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)\n        rgb_frame = frame[:, :, ::-1]\n\n        # Find all the faces in the current frameof video\n        face_locations = face_recognition.face_locations(rgb_frame)\n\n        # Display the results\n        for top, right, bottom, left in face_locations:\n            # Draw a box around the face\n            cv2.rectangle(frame, (left, top),(right, bottom), (0, 0, 255), 2)\n\n        # Display the resulting image\n        cv2.imshow('Video', frame)\n\n        # Hit 'q' on the keyboard to quit!\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n\n    # Release handle tothe webcam\n    cap.release()\n    cv2.destroyAllWindows()\n\ndef display_video2():\n    '''\n    实时检测\n    '''\n    #存储知道人名列表\n    known_names=['yahaha1', 'yahaha2'] \n    #存储知道的特征值\n    known_faces=[]\n\n    image1 =face_recognition.load_image_file(\"yahaha2.jpg\")\n    face_encoding1 =face_recognition.face_encodings(image1)\n\n    image2 =face_recognition.load_image_file(\"yahaha1.jpg\")\n    face_encoding2 =face_recognition.face_encodings(image1)\n\n    if face_encoding1 and face_encoding2:\n        face_encoding1 = face_encoding1[0]\n        face_encoding2 = face_encoding2[0]\n    else:\n        sys.exit()\n\n    known_faces = [face_encoding1, face_encoding2]\n\n    cap = cv2.VideoCapture(0)\n\n    while True:\n        # Grab a single frame of video\n        ret, frame = cap.read()\n        # Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)\n        rgb_frame = frame[:, :, ::-1]\n\n        # Find all the faces and face encodings inthe current frame of video\n        face_locations =face_recognition.face_locations(rgb_frame)  # 如有gpu可添加参数model='cnn'提升精度\n        face_encodings =face_recognition.face_encodings(rgb_frame, face_locations)\n\n        face_names = []\n        for face_encoding in face_encodings:\n            # See if the face is a match for theknown face(s)\n            matches =face_recognition.compare_faces(known_faces, face_encoding, tolerance=0.60)\n\n            name = None\n            # if match[0]:\n            #     name = \"Yahaha\"\n            print(matches)\n            if True in matches:\n                first_match_index = matches.index(True)\n                name = known_names[first_match_index]\n            else:\n                name = 'Unkonwn'\n\n            face_names.append(name)\n\n        # Label the results\n        for (top, right, bottom, left), name in zip(face_locations, face_names):\n            if not name:\n                continue\n\n            # Draw a box around the face\n            cv2.rectangle(frame, (left, top),(right, bottom), (0, 0, 255), 2)\n            # Draw a label with a name below theface\n            cv2.rectangle(frame, (left, bottom -25), (right, bottom), (0, 0, 255), cv2.FILLED)\n            font = cv2.FONT_HERSHEY_DUPLEX\n            cv2.putText(frame, name, (left + 6,bottom - 6), font, 0.5, (255, 255, 255), 1)\n\n        cv2.imshow('Video', frame)\n\n        # Hit 'q' on the keyboard to quit!\n        if cv2.waitKey(1) & 0xFF == ord('q'):\n            break\n    # All done!\n    cap.release()\n    cv2.destroyAllWindows()\n\ndef proof(x):\n    # print(x)\n    # record_video()\n    camera()\n\ndef monitor_keyboard():\n    keyboard.hook(proof)\n    #按下任何按键时，都会调用proof，其中一定会传一个值，就是键盘事件\n    keyboard.wait()\n\n\ndef monitor_mouse():\n    x2, y2 = pag.position()\n    while x1 == x2:\n        x2, y2 = pag.position()\n    else:\n        # record_video()\n        camera()\n\nif __name__ == '__main__':\n    k = Thread(target=monitor_keyboard, args=())\n    m = Thread(target=monitor_mouse, args=())\n    k.start()\n    m.start()\n    k.join()\n    m.join()\n\n```\n\n","slug":"python监控","published":1,"updated":"2021-09-09T02:49:25.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92c000ncmso0oj67xve","content":"<h2 id=\"使用python监控电脑键盘、鼠标并拍照录像\"><a href=\"#使用python监控电脑键盘、鼠标并拍照录像\" class=\"headerlink\" title=\"使用python监控电脑键盘、鼠标并拍照录像\"></a>使用python监控电脑键盘、鼠标并拍照录像</h2><span id=\"more\"></span>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> keyboard<br><span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> cv2<br><span class=\"hljs-comment\"># from pynput.mouse import Listener</span><br><span class=\"hljs-keyword\">import</span> pyautogui <span class=\"hljs-keyword\">as</span> pag    <span class=\"hljs-comment\">#监听鼠标</span><br><span class=\"hljs-comment\"># from pynput.keyboard import Key, Listener</span><br><span class=\"hljs-keyword\">from</span> threading <span class=\"hljs-keyword\">import</span> Thread<br><br>x1, y1 = pag.position()<br><span class=\"hljs-comment\"># print(x1, y1)</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">camera</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    拍照</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br>    ret,frame = cap.read() <span class=\"hljs-comment\">#读取摄像头内容</span><br>    cv2.imwrite(<span class=\"hljs-string\">&quot;./test.jpg&quot;</span>,frame) <span class=\"hljs-comment\">#保存到磁盘</span><br>    <span class=\"hljs-comment\">#释放摄像头</span><br>    cap.release()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">record_video</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    录制视频</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br>    fps = <span class=\"hljs-number\">30</span><br>    size=(<span class=\"hljs-built_in\">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),<span class=\"hljs-built_in\">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))<br>    videoWriter=cv2.VideoWriter(<span class=\"hljs-string\">&#x27;./test.avi&#x27;</span>,cv2.VideoWriter_fourcc(<span class=\"hljs-string\">&#x27;X&#x27;</span>,<span class=\"hljs-string\">&#x27;V&#x27;</span>,<span class=\"hljs-string\">&#x27;I&#x27;</span>,<span class=\"hljs-string\">&#x27;D&#x27;</span>),fps,size)<br>    success,frame = cap.read()<br>    numFrameRemaining = <span class=\"hljs-number\">5</span> * fps    <span class=\"hljs-comment\">#摄像头捕获持续时间</span><br>    <span class=\"hljs-keyword\">while</span> success <span class=\"hljs-keyword\">and</span> numFrameRemaining &gt; <span class=\"hljs-number\">0</span>:<br>        videoWriter.write(frame)<br>        success,frame = cap.read()<br>        numFrameRemaining -= <span class=\"hljs-number\">1</span><br><br>    cap.release()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display_video</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    实时窗口</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    face_locations = []<br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># Grab a single frame of video</span><br>        ret, frame = cap.read()<br><br>        <span class=\"hljs-comment\"># Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)</span><br>        rgb_frame = frame[:, :, ::-<span class=\"hljs-number\">1</span>]<br><br>        <span class=\"hljs-comment\"># Find all the faces in the current frameof video</span><br>        face_locations = face_recognition.face_locations(rgb_frame)<br><br>        <span class=\"hljs-comment\"># Display the results</span><br>        <span class=\"hljs-keyword\">for</span> top, right, bottom, left <span class=\"hljs-keyword\">in</span> face_locations:<br>            <span class=\"hljs-comment\"># Draw a box around the face</span><br>            cv2.rectangle(frame, (left, top),(right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">2</span>)<br><br>        <span class=\"hljs-comment\"># Display the resulting image</span><br>        cv2.imshow(<span class=\"hljs-string\">&#x27;Video&#x27;</span>, frame)<br><br>        <span class=\"hljs-comment\"># Hit &#x27;q&#x27; on the keyboard to quit!</span><br>        <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;q&#x27;</span>):<br>            <span class=\"hljs-keyword\">break</span><br><br>    <span class=\"hljs-comment\"># Release handle tothe webcam</span><br>    cap.release()<br>    cv2.destroyAllWindows()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display_video2</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    实时检测</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    <span class=\"hljs-comment\">#存储知道人名列表</span><br>    known_names=[<span class=\"hljs-string\">&#x27;yahaha1&#x27;</span>, <span class=\"hljs-string\">&#x27;yahaha2&#x27;</span>] <br>    <span class=\"hljs-comment\">#存储知道的特征值</span><br>    known_faces=[]<br><br>    image1 =face_recognition.load_image_file(<span class=\"hljs-string\">&quot;yahaha2.jpg&quot;</span>)<br>    face_encoding1 =face_recognition.face_encodings(image1)<br><br>    image2 =face_recognition.load_image_file(<span class=\"hljs-string\">&quot;yahaha1.jpg&quot;</span>)<br>    face_encoding2 =face_recognition.face_encodings(image1)<br><br>    <span class=\"hljs-keyword\">if</span> face_encoding1 <span class=\"hljs-keyword\">and</span> face_encoding2:<br>        face_encoding1 = face_encoding1[<span class=\"hljs-number\">0</span>]<br>        face_encoding2 = face_encoding2[<span class=\"hljs-number\">0</span>]<br>    <span class=\"hljs-keyword\">else</span>:<br>        sys.exit()<br><br>    known_faces = [face_encoding1, face_encoding2]<br><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># Grab a single frame of video</span><br>        ret, frame = cap.read()<br>        <span class=\"hljs-comment\"># Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)</span><br>        rgb_frame = frame[:, :, ::-<span class=\"hljs-number\">1</span>]<br><br>        <span class=\"hljs-comment\"># Find all the faces and face encodings inthe current frame of video</span><br>        face_locations =face_recognition.face_locations(rgb_frame)  <span class=\"hljs-comment\"># 如有gpu可添加参数model=&#x27;cnn&#x27;提升精度</span><br>        face_encodings =face_recognition.face_encodings(rgb_frame, face_locations)<br><br>        face_names = []<br>        <span class=\"hljs-keyword\">for</span> face_encoding <span class=\"hljs-keyword\">in</span> face_encodings:<br>            <span class=\"hljs-comment\"># See if the face is a match for theknown face(s)</span><br>            matches =face_recognition.compare_faces(known_faces, face_encoding, tolerance=<span class=\"hljs-number\">0.60</span>)<br><br>            name = <span class=\"hljs-literal\">None</span><br>            <span class=\"hljs-comment\"># if match[0]:</span><br>            <span class=\"hljs-comment\">#     name = &quot;Yahaha&quot;</span><br>            <span class=\"hljs-built_in\">print</span>(matches)<br>            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">in</span> matches:<br>                first_match_index = matches.index(<span class=\"hljs-literal\">True</span>)<br>                name = known_names[first_match_index]<br>            <span class=\"hljs-keyword\">else</span>:<br>                name = <span class=\"hljs-string\">&#x27;Unkonwn&#x27;</span><br><br>            face_names.append(name)<br><br>        <span class=\"hljs-comment\"># Label the results</span><br>        <span class=\"hljs-keyword\">for</span> (top, right, bottom, left), name <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(face_locations, face_names):<br>            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> name:<br>                <span class=\"hljs-keyword\">continue</span><br><br>            <span class=\"hljs-comment\"># Draw a box around the face</span><br>            cv2.rectangle(frame, (left, top),(right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-comment\"># Draw a label with a name below theface</span><br>            cv2.rectangle(frame, (left, bottom -<span class=\"hljs-number\">25</span>), (right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), cv2.FILLED)<br>            font = cv2.FONT_HERSHEY_DUPLEX<br>            cv2.putText(frame, name, (left + <span class=\"hljs-number\">6</span>,bottom - <span class=\"hljs-number\">6</span>), font, <span class=\"hljs-number\">0.5</span>, (<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">1</span>)<br><br>        cv2.imshow(<span class=\"hljs-string\">&#x27;Video&#x27;</span>, frame)<br><br>        <span class=\"hljs-comment\"># Hit &#x27;q&#x27; on the keyboard to quit!</span><br>        <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;q&#x27;</span>):<br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-comment\"># All done!</span><br>    cap.release()<br>    cv2.destroyAllWindows()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">proof</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-comment\"># print(x)</span><br>    <span class=\"hljs-comment\"># record_video()</span><br>    camera()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor_keyboard</span>():</span><br>    keyboard.hook(proof)<br>    <span class=\"hljs-comment\">#按下任何按键时，都会调用proof，其中一定会传一个值，就是键盘事件</span><br>    keyboard.wait()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor_mouse</span>():</span><br>    x2, y2 = pag.position()<br>    <span class=\"hljs-keyword\">while</span> x1 == x2:<br>        x2, y2 = pag.position()<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-comment\"># record_video()</span><br>        camera()<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    k = Thread(target=monitor_keyboard, args=())<br>    m = Thread(target=monitor_mouse, args=())<br>    k.start()<br>    m.start()<br>    k.join()<br>    m.join()<br><br></code></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<h2 id=\"使用python监控电脑键盘、鼠标并拍照录像\"><a href=\"#使用python监控电脑键盘、鼠标并拍照录像\" class=\"headerlink\" title=\"使用python监控电脑键盘、鼠标并拍照录像\"></a>使用python监控电脑键盘、鼠标并拍照录像</h2>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs python\"><span class=\"hljs-keyword\">import</span> keyboard<br><span class=\"hljs-keyword\">from</span> cv2 <span class=\"hljs-keyword\">import</span> cv2<br><span class=\"hljs-comment\"># from pynput.mouse import Listener</span><br><span class=\"hljs-keyword\">import</span> pyautogui <span class=\"hljs-keyword\">as</span> pag    <span class=\"hljs-comment\">#监听鼠标</span><br><span class=\"hljs-comment\"># from pynput.keyboard import Key, Listener</span><br><span class=\"hljs-keyword\">from</span> threading <span class=\"hljs-keyword\">import</span> Thread<br><br>x1, y1 = pag.position()<br><span class=\"hljs-comment\"># print(x1, y1)</span><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">camera</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    拍照</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br>    ret,frame = cap.read() <span class=\"hljs-comment\">#读取摄像头内容</span><br>    cv2.imwrite(<span class=\"hljs-string\">&quot;./test.jpg&quot;</span>,frame) <span class=\"hljs-comment\">#保存到磁盘</span><br>    <span class=\"hljs-comment\">#释放摄像头</span><br>    cap.release()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">record_video</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    录制视频</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br>    fps = <span class=\"hljs-number\">30</span><br>    size=(<span class=\"hljs-built_in\">int</span>(cap.get(cv2.CAP_PROP_FRAME_WIDTH)),<span class=\"hljs-built_in\">int</span>(cap.get(cv2.CAP_PROP_FRAME_HEIGHT)))<br>    videoWriter=cv2.VideoWriter(<span class=\"hljs-string\">&#x27;./test.avi&#x27;</span>,cv2.VideoWriter_fourcc(<span class=\"hljs-string\">&#x27;X&#x27;</span>,<span class=\"hljs-string\">&#x27;V&#x27;</span>,<span class=\"hljs-string\">&#x27;I&#x27;</span>,<span class=\"hljs-string\">&#x27;D&#x27;</span>),fps,size)<br>    success,frame = cap.read()<br>    numFrameRemaining = <span class=\"hljs-number\">5</span> * fps    <span class=\"hljs-comment\">#摄像头捕获持续时间</span><br>    <span class=\"hljs-keyword\">while</span> success <span class=\"hljs-keyword\">and</span> numFrameRemaining &gt; <span class=\"hljs-number\">0</span>:<br>        videoWriter.write(frame)<br>        success,frame = cap.read()<br>        numFrameRemaining -= <span class=\"hljs-number\">1</span><br><br>    cap.release()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display_video</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    实时窗口</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    face_locations = []<br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># Grab a single frame of video</span><br>        ret, frame = cap.read()<br><br>        <span class=\"hljs-comment\"># Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)</span><br>        rgb_frame = frame[:, :, ::-<span class=\"hljs-number\">1</span>]<br><br>        <span class=\"hljs-comment\"># Find all the faces in the current frameof video</span><br>        face_locations = face_recognition.face_locations(rgb_frame)<br><br>        <span class=\"hljs-comment\"># Display the results</span><br>        <span class=\"hljs-keyword\">for</span> top, right, bottom, left <span class=\"hljs-keyword\">in</span> face_locations:<br>            <span class=\"hljs-comment\"># Draw a box around the face</span><br>            cv2.rectangle(frame, (left, top),(right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">2</span>)<br><br>        <span class=\"hljs-comment\"># Display the resulting image</span><br>        cv2.imshow(<span class=\"hljs-string\">&#x27;Video&#x27;</span>, frame)<br><br>        <span class=\"hljs-comment\"># Hit &#x27;q&#x27; on the keyboard to quit!</span><br>        <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;q&#x27;</span>):<br>            <span class=\"hljs-keyword\">break</span><br><br>    <span class=\"hljs-comment\"># Release handle tothe webcam</span><br>    cap.release()<br>    cv2.destroyAllWindows()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">display_video2</span>():</span><br>    <span class=\"hljs-string\">&#x27;&#x27;&#x27;</span><br><span class=\"hljs-string\">    实时检测</span><br><span class=\"hljs-string\">    &#x27;&#x27;&#x27;</span><br>    <span class=\"hljs-comment\">#存储知道人名列表</span><br>    known_names=[<span class=\"hljs-string\">&#x27;yahaha1&#x27;</span>, <span class=\"hljs-string\">&#x27;yahaha2&#x27;</span>] <br>    <span class=\"hljs-comment\">#存储知道的特征值</span><br>    known_faces=[]<br><br>    image1 =face_recognition.load_image_file(<span class=\"hljs-string\">&quot;yahaha2.jpg&quot;</span>)<br>    face_encoding1 =face_recognition.face_encodings(image1)<br><br>    image2 =face_recognition.load_image_file(<span class=\"hljs-string\">&quot;yahaha1.jpg&quot;</span>)<br>    face_encoding2 =face_recognition.face_encodings(image1)<br><br>    <span class=\"hljs-keyword\">if</span> face_encoding1 <span class=\"hljs-keyword\">and</span> face_encoding2:<br>        face_encoding1 = face_encoding1[<span class=\"hljs-number\">0</span>]<br>        face_encoding2 = face_encoding2[<span class=\"hljs-number\">0</span>]<br>    <span class=\"hljs-keyword\">else</span>:<br>        sys.exit()<br><br>    known_faces = [face_encoding1, face_encoding2]<br><br>    cap = cv2.VideoCapture(<span class=\"hljs-number\">0</span>)<br><br>    <span class=\"hljs-keyword\">while</span> <span class=\"hljs-literal\">True</span>:<br>        <span class=\"hljs-comment\"># Grab a single frame of video</span><br>        ret, frame = cap.read()<br>        <span class=\"hljs-comment\"># Convert the image from BGR color (whichOpenCV uses) to RGB color (which face_recognition uses)</span><br>        rgb_frame = frame[:, :, ::-<span class=\"hljs-number\">1</span>]<br><br>        <span class=\"hljs-comment\"># Find all the faces and face encodings inthe current frame of video</span><br>        face_locations =face_recognition.face_locations(rgb_frame)  <span class=\"hljs-comment\"># 如有gpu可添加参数model=&#x27;cnn&#x27;提升精度</span><br>        face_encodings =face_recognition.face_encodings(rgb_frame, face_locations)<br><br>        face_names = []<br>        <span class=\"hljs-keyword\">for</span> face_encoding <span class=\"hljs-keyword\">in</span> face_encodings:<br>            <span class=\"hljs-comment\"># See if the face is a match for theknown face(s)</span><br>            matches =face_recognition.compare_faces(known_faces, face_encoding, tolerance=<span class=\"hljs-number\">0.60</span>)<br><br>            name = <span class=\"hljs-literal\">None</span><br>            <span class=\"hljs-comment\"># if match[0]:</span><br>            <span class=\"hljs-comment\">#     name = &quot;Yahaha&quot;</span><br>            <span class=\"hljs-built_in\">print</span>(matches)<br>            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-literal\">True</span> <span class=\"hljs-keyword\">in</span> matches:<br>                first_match_index = matches.index(<span class=\"hljs-literal\">True</span>)<br>                name = known_names[first_match_index]<br>            <span class=\"hljs-keyword\">else</span>:<br>                name = <span class=\"hljs-string\">&#x27;Unkonwn&#x27;</span><br><br>            face_names.append(name)<br><br>        <span class=\"hljs-comment\"># Label the results</span><br>        <span class=\"hljs-keyword\">for</span> (top, right, bottom, left), name <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">zip</span>(face_locations, face_names):<br>            <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> name:<br>                <span class=\"hljs-keyword\">continue</span><br><br>            <span class=\"hljs-comment\"># Draw a box around the face</span><br>            cv2.rectangle(frame, (left, top),(right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">2</span>)<br>            <span class=\"hljs-comment\"># Draw a label with a name below theface</span><br>            cv2.rectangle(frame, (left, bottom -<span class=\"hljs-number\">25</span>), (right, bottom), (<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">255</span>), cv2.FILLED)<br>            font = cv2.FONT_HERSHEY_DUPLEX<br>            cv2.putText(frame, name, (left + <span class=\"hljs-number\">6</span>,bottom - <span class=\"hljs-number\">6</span>), font, <span class=\"hljs-number\">0.5</span>, (<span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>, <span class=\"hljs-number\">255</span>), <span class=\"hljs-number\">1</span>)<br><br>        cv2.imshow(<span class=\"hljs-string\">&#x27;Video&#x27;</span>, frame)<br><br>        <span class=\"hljs-comment\"># Hit &#x27;q&#x27; on the keyboard to quit!</span><br>        <span class=\"hljs-keyword\">if</span> cv2.waitKey(<span class=\"hljs-number\">1</span>) &amp; <span class=\"hljs-number\">0xFF</span> == <span class=\"hljs-built_in\">ord</span>(<span class=\"hljs-string\">&#x27;q&#x27;</span>):<br>            <span class=\"hljs-keyword\">break</span><br>    <span class=\"hljs-comment\"># All done!</span><br>    cap.release()<br>    cv2.destroyAllWindows()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">proof</span>(<span class=\"hljs-params\">x</span>):</span><br>    <span class=\"hljs-comment\"># print(x)</span><br>    <span class=\"hljs-comment\"># record_video()</span><br>    camera()<br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor_keyboard</span>():</span><br>    keyboard.hook(proof)<br>    <span class=\"hljs-comment\">#按下任何按键时，都会调用proof，其中一定会传一个值，就是键盘事件</span><br>    keyboard.wait()<br><br><br><span class=\"hljs-function\"><span class=\"hljs-keyword\">def</span> <span class=\"hljs-title\">monitor_mouse</span>():</span><br>    x2, y2 = pag.position()<br>    <span class=\"hljs-keyword\">while</span> x1 == x2:<br>        x2, y2 = pag.position()<br>    <span class=\"hljs-keyword\">else</span>:<br>        <span class=\"hljs-comment\"># record_video()</span><br>        camera()<br><br><span class=\"hljs-keyword\">if</span> __name__ == <span class=\"hljs-string\">&#x27;__main__&#x27;</span>:<br>    k = Thread(target=monitor_keyboard, args=())<br>    m = Thread(target=monitor_mouse, args=())<br>    k.start()<br>    m.start()<br>    k.join()<br>    m.join()<br><br></code></pre></td></tr></table></figure>"},{"title":"iPhone 快捷指令上下班半自动打卡","date":"2021-09-10T01:56:08.000Z","index_img":"/img/article/shotcuts.jpg","comment":"valine","_content":"## 如题\n<!-- more -->\n打工人有时候会忘记打卡，为了能尽量少忘记，有时候会设定闹钟来提醒。在iPhone上还有个稍微半自动化的应用也可以实现，就是快捷指令。为啥是半自动化呢，因为息屏状态下是无法执行的，只是会有提醒，需要解锁后点击才能执行。当然了在不息屏的状态下是完全可以实现自动化的，但是也不可能一直不息屏吧。iPhone的那点点电量就不说了。\n还有个前提就是提前设置好打卡APP的快捷打卡功能。\n###### 快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）\n打开快捷指令app，点击自动化，点击创建个人自动化\n![](/img/article/iphone/0.jpg)\n##### 选择特定时间\n这个页面还有其它事件，比如到达、离开等。一般现在企业微信或者钉钉亦或者是公司自己的打卡APP都是基于距离进行定位打卡，所以这里也可以选择到达或者离开，这里以特定时间为例，其它事件可以自行摸索。\n然后设置上下班时间，可以选择每天，每周（可选周一至周五），按心情选择。\n![](/img/article/iphone/1.jpg)\n##### 点击下一步，点击添加操作。\n![](/img/article/iphone/2.jpg)\n##### 搜索输入：打开app，点击打开app，点击选择。\n![](/img/article/iphone/3.jpg)\n##### 搜索输入企业微信，点击企业微信，点击下一步。\n![](/img/article/iphone/4.jpg)\n##### 将运行前询问关闭，点击不询问，点击完成。\n![](/img/article/iphone/5.jpg)\n\n##### 题外话\niPhone的快捷指令有点像编程，所以功能不止这些，网上还有如何实现敲击背面显示健康码等，有兴趣的可以搜来看看。","source":"_posts/iPhone.md","raw":"---\ntitle: iPhone 快捷指令上下班半自动打卡\ndate: 2021-09-10 09:56:08\nindex_img: /img/article/shotcuts.jpg\ncategories:\n    - iPhone\ntags:\n    - 玩\ncomment: 'valine'\n---\n## 如题\n<!-- more -->\n打工人有时候会忘记打卡，为了能尽量少忘记，有时候会设定闹钟来提醒。在iPhone上还有个稍微半自动化的应用也可以实现，就是快捷指令。为啥是半自动化呢，因为息屏状态下是无法执行的，只是会有提醒，需要解锁后点击才能执行。当然了在不息屏的状态下是完全可以实现自动化的，但是也不可能一直不息屏吧。iPhone的那点点电量就不说了。\n还有个前提就是提前设置好打卡APP的快捷打卡功能。\n###### 快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）\n打开快捷指令app，点击自动化，点击创建个人自动化\n![](/img/article/iphone/0.jpg)\n##### 选择特定时间\n这个页面还有其它事件，比如到达、离开等。一般现在企业微信或者钉钉亦或者是公司自己的打卡APP都是基于距离进行定位打卡，所以这里也可以选择到达或者离开，这里以特定时间为例，其它事件可以自行摸索。\n然后设置上下班时间，可以选择每天，每周（可选周一至周五），按心情选择。\n![](/img/article/iphone/1.jpg)\n##### 点击下一步，点击添加操作。\n![](/img/article/iphone/2.jpg)\n##### 搜索输入：打开app，点击打开app，点击选择。\n![](/img/article/iphone/3.jpg)\n##### 搜索输入企业微信，点击企业微信，点击下一步。\n![](/img/article/iphone/4.jpg)\n##### 将运行前询问关闭，点击不询问，点击完成。\n![](/img/article/iphone/5.jpg)\n\n##### 题外话\niPhone的快捷指令有点像编程，所以功能不止这些，网上还有如何实现敲击背面显示健康码等，有兴趣的可以搜来看看。","slug":"iPhone","published":1,"updated":"2021-09-10T05:45:01.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92e000pcmsodxxp92r7","content":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2><span id=\"more\"></span>\n<p>打工人有时候会忘记打卡，为了能尽量少忘记，有时候会设定闹钟来提醒。在iPhone上还有个稍微半自动化的应用也可以实现，就是快捷指令。为啥是半自动化呢，因为息屏状态下是无法执行的，只是会有提醒，需要解锁后点击才能执行。当然了在不息屏的状态下是完全可以实现自动化的，但是也不可能一直不息屏吧。iPhone的那点点电量就不说了。<br>还有个前提就是提前设置好打卡APP的快捷打卡功能。</p>\n<h6 id=\"快捷指令APP（一般自带，不小心删了可以去APP-Store重新下载）\"><a href=\"#快捷指令APP（一般自带，不小心删了可以去APP-Store重新下载）\" class=\"headerlink\" title=\"快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）\"></a>快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）</h6><p>打开快捷指令app，点击自动化，点击创建个人自动化<br><img src=\"/img/article/iphone/0.jpg\"></p>\n<h5 id=\"选择特定时间\"><a href=\"#选择特定时间\" class=\"headerlink\" title=\"选择特定时间\"></a>选择特定时间</h5><p>这个页面还有其它事件，比如到达、离开等。一般现在企业微信或者钉钉亦或者是公司自己的打卡APP都是基于距离进行定位打卡，所以这里也可以选择到达或者离开，这里以特定时间为例，其它事件可以自行摸索。<br>然后设置上下班时间，可以选择每天，每周（可选周一至周五），按心情选择。<br><img src=\"/img/article/iphone/1.jpg\"></p>\n<h5 id=\"点击下一步，点击添加操作。\"><a href=\"#点击下一步，点击添加操作。\" class=\"headerlink\" title=\"点击下一步，点击添加操作。\"></a>点击下一步，点击添加操作。</h5><p><img src=\"/img/article/iphone/2.jpg\"></p>\n<h5 id=\"搜索输入：打开app，点击打开app，点击选择。\"><a href=\"#搜索输入：打开app，点击打开app，点击选择。\" class=\"headerlink\" title=\"搜索输入：打开app，点击打开app，点击选择。\"></a>搜索输入：打开app，点击打开app，点击选择。</h5><p><img src=\"/img/article/iphone/3.jpg\"></p>\n<h5 id=\"搜索输入企业微信，点击企业微信，点击下一步。\"><a href=\"#搜索输入企业微信，点击企业微信，点击下一步。\" class=\"headerlink\" title=\"搜索输入企业微信，点击企业微信，点击下一步。\"></a>搜索输入企业微信，点击企业微信，点击下一步。</h5><p><img src=\"/img/article/iphone/4.jpg\"></p>\n<h5 id=\"将运行前询问关闭，点击不询问，点击完成。\"><a href=\"#将运行前询问关闭，点击不询问，点击完成。\" class=\"headerlink\" title=\"将运行前询问关闭，点击不询问，点击完成。\"></a>将运行前询问关闭，点击不询问，点击完成。</h5><p><img src=\"/img/article/iphone/5.jpg\"></p>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>iPhone的快捷指令有点像编程，所以功能不止这些，网上还有如何实现敲击背面显示健康码等，有兴趣的可以搜来看看。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2>","more":"<p>打工人有时候会忘记打卡，为了能尽量少忘记，有时候会设定闹钟来提醒。在iPhone上还有个稍微半自动化的应用也可以实现，就是快捷指令。为啥是半自动化呢，因为息屏状态下是无法执行的，只是会有提醒，需要解锁后点击才能执行。当然了在不息屏的状态下是完全可以实现自动化的，但是也不可能一直不息屏吧。iPhone的那点点电量就不说了。<br>还有个前提就是提前设置好打卡APP的快捷打卡功能。</p>\n<h6 id=\"快捷指令APP（一般自带，不小心删了可以去APP-Store重新下载）\"><a href=\"#快捷指令APP（一般自带，不小心删了可以去APP-Store重新下载）\" class=\"headerlink\" title=\"快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）\"></a>快捷指令APP（一般自带，不小心删了可以去APP Store重新下载）</h6><p>打开快捷指令app，点击自动化，点击创建个人自动化<br><img src=\"/img/article/iphone/0.jpg\"></p>\n<h5 id=\"选择特定时间\"><a href=\"#选择特定时间\" class=\"headerlink\" title=\"选择特定时间\"></a>选择特定时间</h5><p>这个页面还有其它事件，比如到达、离开等。一般现在企业微信或者钉钉亦或者是公司自己的打卡APP都是基于距离进行定位打卡，所以这里也可以选择到达或者离开，这里以特定时间为例，其它事件可以自行摸索。<br>然后设置上下班时间，可以选择每天，每周（可选周一至周五），按心情选择。<br><img src=\"/img/article/iphone/1.jpg\"></p>\n<h5 id=\"点击下一步，点击添加操作。\"><a href=\"#点击下一步，点击添加操作。\" class=\"headerlink\" title=\"点击下一步，点击添加操作。\"></a>点击下一步，点击添加操作。</h5><p><img src=\"/img/article/iphone/2.jpg\"></p>\n<h5 id=\"搜索输入：打开app，点击打开app，点击选择。\"><a href=\"#搜索输入：打开app，点击打开app，点击选择。\" class=\"headerlink\" title=\"搜索输入：打开app，点击打开app，点击选择。\"></a>搜索输入：打开app，点击打开app，点击选择。</h5><p><img src=\"/img/article/iphone/3.jpg\"></p>\n<h5 id=\"搜索输入企业微信，点击企业微信，点击下一步。\"><a href=\"#搜索输入企业微信，点击企业微信，点击下一步。\" class=\"headerlink\" title=\"搜索输入企业微信，点击企业微信，点击下一步。\"></a>搜索输入企业微信，点击企业微信，点击下一步。</h5><p><img src=\"/img/article/iphone/4.jpg\"></p>\n<h5 id=\"将运行前询问关闭，点击不询问，点击完成。\"><a href=\"#将运行前询问关闭，点击不询问，点击完成。\" class=\"headerlink\" title=\"将运行前询问关闭，点击不询问，点击完成。\"></a>将运行前询问关闭，点击不询问，点击完成。</h5><p><img src=\"/img/article/iphone/5.jpg\"></p>\n<h5 id=\"题外话\"><a href=\"#题外话\" class=\"headerlink\" title=\"题外话\"></a>题外话</h5><p>iPhone的快捷指令有点像编程，所以功能不止这些，网上还有如何实现敲击背面显示健康码等，有兴趣的可以搜来看看。</p>"},{"title":"iPhone 快捷指令自动打开低电量模式","date":"2021-09-27T08:00:26.000Z","index_img":"/img/article/low_battery.jpg","comment":"valine","_content":"## 如题\n<!-- more -->\niPhone的电量一直是个软肋，但是其低电量模式续航还真是很可观的。当然一般想起来用低电量模式的时候都是电量剩余不多了的时候，尤其是在外面玩耍的时候，都不能好好地扣手机了。\n##### 具体步骤如下：\n打开快捷指令，添加自动化，选择 电池电量 ，然后选择 低于50%（这里可以修改，反正我修改成了100%，让手机在99%以下都处于低电量模式以此来延长续航），然后 下一步 ，点击 添加操作，在搜素框搜索低电量，选择设定低电量模式脚本 ，然后再下一步，关掉运行前询问就完成了。\n##### 1\n![](/img/article/iphone1/1.jpg)\n\n##### 2\n![](/img/article/iphone1/2.jpg)\n\n##### 3\n![](/img/article/iphone1/3.jpg)\n","source":"_posts/iPhone快捷指令自动打开低电量模式.md","raw":"---\ntitle: iPhone 快捷指令自动打开低电量模式\ndate: 2021-09-27 16:00:26\nindex_img: /img/article/low_battery.jpg\ncategories:\n    - iPhone\ntags:\n    - 玩\ncomment: 'valine'\n---\n## 如题\n<!-- more -->\niPhone的电量一直是个软肋，但是其低电量模式续航还真是很可观的。当然一般想起来用低电量模式的时候都是电量剩余不多了的时候，尤其是在外面玩耍的时候，都不能好好地扣手机了。\n##### 具体步骤如下：\n打开快捷指令，添加自动化，选择 电池电量 ，然后选择 低于50%（这里可以修改，反正我修改成了100%，让手机在99%以下都处于低电量模式以此来延长续航），然后 下一步 ，点击 添加操作，在搜素框搜索低电量，选择设定低电量模式脚本 ，然后再下一步，关掉运行前询问就完成了。\n##### 1\n![](/img/article/iphone1/1.jpg)\n\n##### 2\n![](/img/article/iphone1/2.jpg)\n\n##### 3\n![](/img/article/iphone1/3.jpg)\n","slug":"iPhone快捷指令自动打开低电量模式","published":1,"updated":"2021-09-27T08:08:07.803Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92i000tcmsoald416a6","content":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2><span id=\"more\"></span>\n<p>iPhone的电量一直是个软肋，但是其低电量模式续航还真是很可观的。当然一般想起来用低电量模式的时候都是电量剩余不多了的时候，尤其是在外面玩耍的时候，都不能好好地扣手机了。</p>\n<h5 id=\"具体步骤如下：\"><a href=\"#具体步骤如下：\" class=\"headerlink\" title=\"具体步骤如下：\"></a>具体步骤如下：</h5><p>打开快捷指令，添加自动化，选择 电池电量 ，然后选择 低于50%（这里可以修改，反正我修改成了100%，让手机在99%以下都处于低电量模式以此来延长续航），然后 下一步 ，点击 添加操作，在搜素框搜索低电量，选择设定低电量模式脚本 ，然后再下一步，关掉运行前询问就完成了。</p>\n<h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h5><p><img src=\"/img/article/iphone1/1.jpg\"></p>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h5><p><img src=\"/img/article/iphone1/2.jpg\"></p>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><p><img src=\"/img/article/iphone1/3.jpg\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2>","more":"<p>iPhone的电量一直是个软肋，但是其低电量模式续航还真是很可观的。当然一般想起来用低电量模式的时候都是电量剩余不多了的时候，尤其是在外面玩耍的时候，都不能好好地扣手机了。</p>\n<h5 id=\"具体步骤如下：\"><a href=\"#具体步骤如下：\" class=\"headerlink\" title=\"具体步骤如下：\"></a>具体步骤如下：</h5><p>打开快捷指令，添加自动化，选择 电池电量 ，然后选择 低于50%（这里可以修改，反正我修改成了100%，让手机在99%以下都处于低电量模式以此来延长续航），然后 下一步 ，点击 添加操作，在搜素框搜索低电量，选择设定低电量模式脚本 ，然后再下一步，关掉运行前询问就完成了。</p>\n<h5 id=\"1\"><a href=\"#1\" class=\"headerlink\" title=\"1\"></a>1</h5><p><img src=\"/img/article/iphone1/1.jpg\"></p>\n<h5 id=\"2\"><a href=\"#2\" class=\"headerlink\" title=\"2\"></a>2</h5><p><img src=\"/img/article/iphone1/2.jpg\"></p>\n<h5 id=\"3\"><a href=\"#3\" class=\"headerlink\" title=\"3\"></a>3</h5><p><img src=\"/img/article/iphone1/3.jpg\"></p>"},{"title":"核酸检测机构地图微信小程序开发","date":"2021-10-20T02:54:20.000Z","index_img":"/img/article/克洛格.jpg","comment":"valine","_content":"## 小程序开发学习\n<!-- more -->\n##### 开发（玩）背景\n最近需要做核酸检测，于是想找下附件的机构，但是找了好多都是列表形式的（心里嘀咕了句怎么连附近都看不了，就想着自己做下），不过最后还是找到了带附近功能的小程序，竟然还是国务院客户端。果然还是国家想的周到。虽然找到了这样的小程序自己已经没必要再造轮子了，但是本着学习（玩）的心态还是想着如何重现一下。\n##### 这里也推广下国务院客户端小程序\n![](/img/article/wechat/国务院.jpg)\n##### 最后也算基本实现了这样的功能，贴两张图做个对比吧。\n左边的是国务院客户端，右边是自己做的\n![](/img/article/wechat/核酸检测.jpg)\n##### 最后再说下开发过程踩过的坑吧\n最主要的坑就是标记在地图上的marker（核酸机构）不显示的问题，首先是经纬度，经度（longitude），维度（latitude），最开始标记点一直没显示就是因为自己把经纬度写反了（关键是后台都不报错）导致一直不显示。其次是经纬度的赋值需是数字类型，字符串类型也是不行的。最后就是服务器域名的配置问题，有些域名比如 https://apis.map.qq.com 以及 wx.request 的地址都需要进行配置。当然了还有就是文件路径什么的尽量不要用中文命名，反正奇奇怪怪的bug就是这样产生的。\n作为一个前端小白做这个花了一个多星期时间，才勉强做出这样的功能，真是令人头秃啊。\n##### 完整代码地址 https://github.com/shubihu/Korok-Mask\n扫描下方二维码直达，第一次加载有点慢，，，，没办法，用的免费的服务器，慢应该是正常的。\n![](/img/article/wechat/克洛格.jpg)\n参考\n* https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html\n* https://github.com/zwz888mm/zhang","source":"_posts/核酸检测机构地图微信小程序开发.md","raw":"---\ntitle: 核酸检测机构地图微信小程序开发\ndate: 2021-10-20 10:54:20\nindex_img: /img/article/克洛格.jpg\ncategories:\n    - 微信小程序\ntags:\n    - 核酸检测\ncomment: 'valine'\n---\n## 小程序开发学习\n<!-- more -->\n##### 开发（玩）背景\n最近需要做核酸检测，于是想找下附件的机构，但是找了好多都是列表形式的（心里嘀咕了句怎么连附近都看不了，就想着自己做下），不过最后还是找到了带附近功能的小程序，竟然还是国务院客户端。果然还是国家想的周到。虽然找到了这样的小程序自己已经没必要再造轮子了，但是本着学习（玩）的心态还是想着如何重现一下。\n##### 这里也推广下国务院客户端小程序\n![](/img/article/wechat/国务院.jpg)\n##### 最后也算基本实现了这样的功能，贴两张图做个对比吧。\n左边的是国务院客户端，右边是自己做的\n![](/img/article/wechat/核酸检测.jpg)\n##### 最后再说下开发过程踩过的坑吧\n最主要的坑就是标记在地图上的marker（核酸机构）不显示的问题，首先是经纬度，经度（longitude），维度（latitude），最开始标记点一直没显示就是因为自己把经纬度写反了（关键是后台都不报错）导致一直不显示。其次是经纬度的赋值需是数字类型，字符串类型也是不行的。最后就是服务器域名的配置问题，有些域名比如 https://apis.map.qq.com 以及 wx.request 的地址都需要进行配置。当然了还有就是文件路径什么的尽量不要用中文命名，反正奇奇怪怪的bug就是这样产生的。\n作为一个前端小白做这个花了一个多星期时间，才勉强做出这样的功能，真是令人头秃啊。\n##### 完整代码地址 https://github.com/shubihu/Korok-Mask\n扫描下方二维码直达，第一次加载有点慢，，，，没办法，用的免费的服务器，慢应该是正常的。\n![](/img/article/wechat/克洛格.jpg)\n参考\n* https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html\n* https://github.com/zwz888mm/zhang","slug":"核酸检测机构地图微信小程序开发","published":1,"updated":"2021-10-20T06:22:30.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92k000vcmso6me0b5fz","content":"<h2 id=\"小程序开发学习\"><a href=\"#小程序开发学习\" class=\"headerlink\" title=\"小程序开发学习\"></a>小程序开发学习</h2><span id=\"more\"></span>\n<h5 id=\"开发（玩）背景\"><a href=\"#开发（玩）背景\" class=\"headerlink\" title=\"开发（玩）背景\"></a>开发（玩）背景</h5><p>最近需要做核酸检测，于是想找下附件的机构，但是找了好多都是列表形式的（心里嘀咕了句怎么连附近都看不了，就想着自己做下），不过最后还是找到了带附近功能的小程序，竟然还是国务院客户端。果然还是国家想的周到。虽然找到了这样的小程序自己已经没必要再造轮子了，但是本着学习（玩）的心态还是想着如何重现一下。</p>\n<h5 id=\"这里也推广下国务院客户端小程序\"><a href=\"#这里也推广下国务院客户端小程序\" class=\"headerlink\" title=\"这里也推广下国务院客户端小程序\"></a>这里也推广下国务院客户端小程序</h5><p><img src=\"/img/article/wechat/%E5%9B%BD%E5%8A%A1%E9%99%A2.jpg\"></p>\n<h5 id=\"最后也算基本实现了这样的功能，贴两张图做个对比吧。\"><a href=\"#最后也算基本实现了这样的功能，贴两张图做个对比吧。\" class=\"headerlink\" title=\"最后也算基本实现了这样的功能，贴两张图做个对比吧。\"></a>最后也算基本实现了这样的功能，贴两张图做个对比吧。</h5><p>左边的是国务院客户端，右边是自己做的<br><img src=\"/img/article/wechat/%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B.jpg\"></p>\n<h5 id=\"最后再说下开发过程踩过的坑吧\"><a href=\"#最后再说下开发过程踩过的坑吧\" class=\"headerlink\" title=\"最后再说下开发过程踩过的坑吧\"></a>最后再说下开发过程踩过的坑吧</h5><p>最主要的坑就是标记在地图上的marker（核酸机构）不显示的问题，首先是经纬度，经度（longitude），维度（latitude），最开始标记点一直没显示就是因为自己把经纬度写反了（关键是后台都不报错）导致一直不显示。其次是经纬度的赋值需是数字类型，字符串类型也是不行的。最后就是服务器域名的配置问题，有些域名比如 <a href=\"https://apis.map.qq.com/\">https://apis.map.qq.com</a> 以及 wx.request 的地址都需要进行配置。当然了还有就是文件路径什么的尽量不要用中文命名，反正奇奇怪怪的bug就是这样产生的。<br>作为一个前端小白做这个花了一个多星期时间，才勉强做出这样的功能，真是令人头秃啊。</p>\n<h5 id=\"完整代码地址-https-github-com-shubihu-Korok-Mask\"><a href=\"#完整代码地址-https-github-com-shubihu-Korok-Mask\" class=\"headerlink\" title=\"完整代码地址 https://github.com/shubihu/Korok-Mask\"></a>完整代码地址 <a href=\"https://github.com/shubihu/Korok-Mask\">https://github.com/shubihu/Korok-Mask</a></h5><p>扫描下方二维码直达，第一次加载有点慢，，，，没办法，用的免费的服务器，慢应该是正常的。<br><img src=\"/img/article/wechat/%E5%85%8B%E6%B4%9B%E6%A0%BC.jpg\"><br>参考</p>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html\">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html</a></li>\n<li><a href=\"https://github.com/zwz888mm/zhang\">https://github.com/zwz888mm/zhang</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"小程序开发学习\"><a href=\"#小程序开发学习\" class=\"headerlink\" title=\"小程序开发学习\"></a>小程序开发学习</h2>","more":"<h5 id=\"开发（玩）背景\"><a href=\"#开发（玩）背景\" class=\"headerlink\" title=\"开发（玩）背景\"></a>开发（玩）背景</h5><p>最近需要做核酸检测，于是想找下附件的机构，但是找了好多都是列表形式的（心里嘀咕了句怎么连附近都看不了，就想着自己做下），不过最后还是找到了带附近功能的小程序，竟然还是国务院客户端。果然还是国家想的周到。虽然找到了这样的小程序自己已经没必要再造轮子了，但是本着学习（玩）的心态还是想着如何重现一下。</p>\n<h5 id=\"这里也推广下国务院客户端小程序\"><a href=\"#这里也推广下国务院客户端小程序\" class=\"headerlink\" title=\"这里也推广下国务院客户端小程序\"></a>这里也推广下国务院客户端小程序</h5><p><img src=\"/img/article/wechat/%E5%9B%BD%E5%8A%A1%E9%99%A2.jpg\"></p>\n<h5 id=\"最后也算基本实现了这样的功能，贴两张图做个对比吧。\"><a href=\"#最后也算基本实现了这样的功能，贴两张图做个对比吧。\" class=\"headerlink\" title=\"最后也算基本实现了这样的功能，贴两张图做个对比吧。\"></a>最后也算基本实现了这样的功能，贴两张图做个对比吧。</h5><p>左边的是国务院客户端，右边是自己做的<br><img src=\"/img/article/wechat/%E6%A0%B8%E9%85%B8%E6%A3%80%E6%B5%8B.jpg\"></p>\n<h5 id=\"最后再说下开发过程踩过的坑吧\"><a href=\"#最后再说下开发过程踩过的坑吧\" class=\"headerlink\" title=\"最后再说下开发过程踩过的坑吧\"></a>最后再说下开发过程踩过的坑吧</h5><p>最主要的坑就是标记在地图上的marker（核酸机构）不显示的问题，首先是经纬度，经度（longitude），维度（latitude），最开始标记点一直没显示就是因为自己把经纬度写反了（关键是后台都不报错）导致一直不显示。其次是经纬度的赋值需是数字类型，字符串类型也是不行的。最后就是服务器域名的配置问题，有些域名比如 <a href=\"https://apis.map.qq.com/\">https://apis.map.qq.com</a> 以及 wx.request 的地址都需要进行配置。当然了还有就是文件路径什么的尽量不要用中文命名，反正奇奇怪怪的bug就是这样产生的。<br>作为一个前端小白做这个花了一个多星期时间，才勉强做出这样的功能，真是令人头秃啊。</p>\n<h5 id=\"完整代码地址-https-github-com-shubihu-Korok-Mask\"><a href=\"#完整代码地址-https-github-com-shubihu-Korok-Mask\" class=\"headerlink\" title=\"完整代码地址 https://github.com/shubihu/Korok-Mask\"></a>完整代码地址 <a href=\"https://github.com/shubihu/Korok-Mask\">https://github.com/shubihu/Korok-Mask</a></h5><p>扫描下方二维码直达，第一次加载有点慢，，，，没办法，用的免费的服务器，慢应该是正常的。<br><img src=\"/img/article/wechat/%E5%85%8B%E6%B4%9B%E6%A0%BC.jpg\"><br>参考</p>\n<ul>\n<li><a href=\"https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html\">https://www.ruanyifeng.com/blog/2020/10/wechat-miniprogram-tutorial-part-one.html</a></li>\n<li><a href=\"https://github.com/zwz888mm/zhang\">https://github.com/zwz888mm/zhang</a></li>\n</ul>"},{"title":"水一篇","date":"2021-08-20T07:45:34.000Z","index_img":"/img/article/moyu.png","comment":"valine","_content":"## 如题\n<!-- more -->\n虽然参照这篇文章设置了，但还是站点地图显示无法获取，不知道是不是时间的问题，等等吧。\n```\n## 创建sitemap.xml\nnpm install hexo-generator-sitemap --save\n```\n<iframe src=\"https://www.gongsunqi.xyz/2021/08/14/%E8%AE%A9%E8%87%AA%E5%B7%B1%E9%80%9A%E8%BF%87Hexo%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%AB%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>","source":"_posts/水一篇.md","raw":"---\ntitle: 水一篇\ndate: 2021-08-20 15:45:34\nindex_img: /img/article/moyu.png\ncategories:\n    - Working\ntags:\n    - 划水摸鱼\ncomment: 'valine'\n---\n## 如题\n<!-- more -->\n虽然参照这篇文章设置了，但还是站点地图显示无法获取，不知道是不是时间的问题，等等吧。\n```\n## 创建sitemap.xml\nnpm install hexo-generator-sitemap --save\n```\n<iframe src=\"https://www.gongsunqi.xyz/2021/08/14/%E8%AE%A9%E8%87%AA%E5%B7%B1%E9%80%9A%E8%BF%87Hexo%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%AB%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>","slug":"水一篇","published":1,"updated":"2021-08-23T06:24:17.855Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92m000ycmso221sf6u7","content":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2><span id=\"more\"></span>\n<p>虽然参照这篇文章设置了，但还是站点地图显示无法获取，不知道是不是时间的问题，等等吧。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-comment\">## 创建sitemap.xml</span><br>npm install hexo-generator-sitemap <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n<iframe src=\"https://www.gongsunqi.xyz/2021/08/14/%E8%AE%A9%E8%87%AA%E5%B7%B1%E9%80%9A%E8%BF%87Hexo%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%AB%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>","site":{"data":{}},"excerpt":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2>","more":"<p>虽然参照这篇文章设置了，但还是站点地图显示无法获取，不知道是不是时间的问题，等等吧。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs applescript\"><span class=\"hljs-comment\">## 创建sitemap.xml</span><br>npm install hexo-generator-sitemap <span class=\"hljs-comment\">--save</span><br></code></pre></td></tr></table></figure>\n<iframe src=\"https://www.gongsunqi.xyz/2021/08/14/%E8%AE%A9%E8%87%AA%E5%B7%B1%E9%80%9A%E8%BF%87Hexo%E5%BB%BA%E7%AB%8B%E7%9A%84%E5%8D%9A%E5%AE%A2%E8%A2%AB%E8%B0%B7%E6%AD%8C%E6%90%9C%E7%B4%A2%E5%88%B0/\" width=\"100%\" height=\"500\" name=\"topFrame\" scrolling=\"yes\"  noresize=\"noresize\" frameborder=\"0\" id=\"topFrame\"></iframe>"},{"title":"科学上网","date":"2021-11-07T02:01:22.000Z","index_img":"/img/article/ssr.png","comment":"valine","_content":"## 如题\n<!-- more -->\n\n### Mark一下以防不时之需 https://lncn.org/\n连接该网站方法如下图所示\n![](/img/article/ssr.jpg)\n### Window 客户端地址\nhttps://github.com/shadowsocksrr/shadowsocksr-csharp/releases\n### Mac OS 客户端地址\nhttps://github.com/wzdnzd/ShadowsocksX-NG-R/releases","source":"_posts/科学上网.md","raw":"---\ntitle: 科学上网\ndate: 2021-11-07 10:01:22\nindex_img: /img/article/ssr.png\ncategories:\n    - TroubleShoot\ntags:\n    - 科学上网\ncomment: 'valine'\n---\n## 如题\n<!-- more -->\n\n### Mark一下以防不时之需 https://lncn.org/\n连接该网站方法如下图所示\n![](/img/article/ssr.jpg)\n### Window 客户端地址\nhttps://github.com/shadowsocksrr/shadowsocksr-csharp/releases\n### Mac OS 客户端地址\nhttps://github.com/wzdnzd/ShadowsocksX-NG-R/releases","slug":"科学上网","published":1,"updated":"2021-11-07T03:37:03.219Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92p0012cmsob1irg6bx","content":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2><span id=\"more\"></span>\n\n<h3 id=\"Mark一下以防不时之需-https-lncn-org\"><a href=\"#Mark一下以防不时之需-https-lncn-org\" class=\"headerlink\" title=\"Mark一下以防不时之需 https://lncn.org/\"></a>Mark一下以防不时之需 <a href=\"https://lncn.org/\">https://lncn.org/</a></h3><p>连接该网站方法如下图所示<br><img src=\"/img/article/ssr.jpg\"></p>\n<h3 id=\"Window-客户端地址\"><a href=\"#Window-客户端地址\" class=\"headerlink\" title=\"Window 客户端地址\"></a>Window 客户端地址</h3><p><a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p>\n<h3 id=\"Mac-OS-客户端地址\"><a href=\"#Mac-OS-客户端地址\" class=\"headerlink\" title=\"Mac OS 客户端地址\"></a>Mac OS 客户端地址</h3><p><a href=\"https://github.com/wzdnzd/ShadowsocksX-NG-R/releases\">https://github.com/wzdnzd/ShadowsocksX-NG-R/releases</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"如题\"><a href=\"#如题\" class=\"headerlink\" title=\"如题\"></a>如题</h2>","more":"<h3 id=\"Mark一下以防不时之需-https-lncn-org\"><a href=\"#Mark一下以防不时之需-https-lncn-org\" class=\"headerlink\" title=\"Mark一下以防不时之需 https://lncn.org/\"></a>Mark一下以防不时之需 <a href=\"https://lncn.org/\">https://lncn.org/</a></h3><p>连接该网站方法如下图所示<br><img src=\"/img/article/ssr.jpg\"></p>\n<h3 id=\"Window-客户端地址\"><a href=\"#Window-客户端地址\" class=\"headerlink\" title=\"Window 客户端地址\"></a>Window 客户端地址</h3><p><a href=\"https://github.com/shadowsocksrr/shadowsocksr-csharp/releases\">https://github.com/shadowsocksrr/shadowsocksr-csharp/releases</a></p>\n<h3 id=\"Mac-OS-客户端地址\"><a href=\"#Mac-OS-客户端地址\" class=\"headerlink\" title=\"Mac OS 客户端地址\"></a>Mac OS 客户端地址</h3><p><a href=\"https://github.com/wzdnzd/ShadowsocksX-NG-R/releases\">https://github.com/wzdnzd/ShadowsocksX-NG-R/releases</a></p>"},{"title":"知网羊毛","date":"2021-08-12T07:52:00.000Z","index_img":"/img/article/zhiwang.jpg","comment":"valine","_content":"## 薅社会主义羊毛-知网\n<!-- more -->\n工作中经常会受到同事、朋友的求助帮忙下载论文，中文的、外文的都遇到过。外文文献一般都在Sci_hub(https://tool.yovisun.com/scihub/) 上查找，当然也会有些找不到。中文的文献莫过于知网了，但是知网也是收费模式的。于是在网上挖了下，找到了两三个相对靠谱的可以薅知网羊毛的方法，但是也是有些限制的。\n##### iData(https://www.cn-ki.net/)\n直接注册便可使用，缺点就是每天只能下载几篇吧\n##### 80图书馆(官网:http://www.80lib.com/ 知网:http://www.80lib.com/cnki/)\n优点是无限篇下载，缺点就是只有三天试用，不过应该可以换个邮箱再注册。还有个缺点就是使用相对麻烦，需要使用谷歌浏览器以及对应的插件，不过好在官网都提供了详细的步骤，这里不再赘述。\n##### 科研通(www.ablesci.com)\n类似于百度文献互助\n##### 百度文献互助(备用)\n缺点每天两篇，时间长，还不一定成功。","source":"_posts/知网羊毛.md","raw":"---\ntitle: 知网羊毛\ndate: 2021-08-12 15:52:00\nindex_img: /img/article/zhiwang.jpg\ncategories:\n    - TroubleShoot\ntags:\n    - TroubleShoot\ncomment: 'valine'\n---\n## 薅社会主义羊毛-知网\n<!-- more -->\n工作中经常会受到同事、朋友的求助帮忙下载论文，中文的、外文的都遇到过。外文文献一般都在Sci_hub(https://tool.yovisun.com/scihub/) 上查找，当然也会有些找不到。中文的文献莫过于知网了，但是知网也是收费模式的。于是在网上挖了下，找到了两三个相对靠谱的可以薅知网羊毛的方法，但是也是有些限制的。\n##### iData(https://www.cn-ki.net/)\n直接注册便可使用，缺点就是每天只能下载几篇吧\n##### 80图书馆(官网:http://www.80lib.com/ 知网:http://www.80lib.com/cnki/)\n优点是无限篇下载，缺点就是只有三天试用，不过应该可以换个邮箱再注册。还有个缺点就是使用相对麻烦，需要使用谷歌浏览器以及对应的插件，不过好在官网都提供了详细的步骤，这里不再赘述。\n##### 科研通(www.ablesci.com)\n类似于百度文献互助\n##### 百度文献互助(备用)\n缺点每天两篇，时间长，还不一定成功。","slug":"知网羊毛","published":1,"updated":"2021-08-25T02:37:29.989Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvoor92r0015cmso6ryu8uhk","content":"<h2 id=\"薅社会主义羊毛-知网\"><a href=\"#薅社会主义羊毛-知网\" class=\"headerlink\" title=\"薅社会主义羊毛-知网\"></a>薅社会主义羊毛-知网</h2><span id=\"more\"></span>\n<p>工作中经常会受到同事、朋友的求助帮忙下载论文，中文的、外文的都遇到过。外文文献一般都在Sci_hub(<a href=\"https://tool.yovisun.com/scihub/\">https://tool.yovisun.com/scihub/</a>) 上查找，当然也会有些找不到。中文的文献莫过于知网了，但是知网也是收费模式的。于是在网上挖了下，找到了两三个相对靠谱的可以薅知网羊毛的方法，但是也是有些限制的。</p>\n<h5 id=\"iData-https-www-cn-ki-net\"><a href=\"#iData-https-www-cn-ki-net\" class=\"headerlink\" title=\"iData(https://www.cn-ki.net/)\"></a>iData(<a href=\"https://www.cn-ki.net/\">https://www.cn-ki.net/</a>)</h5><p>直接注册便可使用，缺点就是每天只能下载几篇吧</p>\n<h5 id=\"80图书馆-官网-http-www-80lib-com-知网-http-www-80lib-com-cnki\"><a href=\"#80图书馆-官网-http-www-80lib-com-知网-http-www-80lib-com-cnki\" class=\"headerlink\" title=\"80图书馆(官网:http://www.80lib.com/ 知网:http://www.80lib.com/cnki/)\"></a>80图书馆(官网:<a href=\"http://www.80lib.com/\">http://www.80lib.com/</a> 知网:<a href=\"http://www.80lib.com/cnki/\">http://www.80lib.com/cnki/</a>)</h5><p>优点是无限篇下载，缺点就是只有三天试用，不过应该可以换个邮箱再注册。还有个缺点就是使用相对麻烦，需要使用谷歌浏览器以及对应的插件，不过好在官网都提供了详细的步骤，这里不再赘述。</p>\n<h5 id=\"科研通-www-ablesci-com\"><a href=\"#科研通-www-ablesci-com\" class=\"headerlink\" title=\"科研通(www.ablesci.com)\"></a>科研通(<a href=\"http://www.ablesci.com/\">www.ablesci.com</a>)</h5><p>类似于百度文献互助</p>\n<h5 id=\"百度文献互助-备用\"><a href=\"#百度文献互助-备用\" class=\"headerlink\" title=\"百度文献互助(备用)\"></a>百度文献互助(备用)</h5><p>缺点每天两篇，时间长，还不一定成功。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"薅社会主义羊毛-知网\"><a href=\"#薅社会主义羊毛-知网\" class=\"headerlink\" title=\"薅社会主义羊毛-知网\"></a>薅社会主义羊毛-知网</h2>","more":"<p>工作中经常会受到同事、朋友的求助帮忙下载论文，中文的、外文的都遇到过。外文文献一般都在Sci_hub(<a href=\"https://tool.yovisun.com/scihub/\">https://tool.yovisun.com/scihub/</a>) 上查找，当然也会有些找不到。中文的文献莫过于知网了，但是知网也是收费模式的。于是在网上挖了下，找到了两三个相对靠谱的可以薅知网羊毛的方法，但是也是有些限制的。</p>\n<h5 id=\"iData-https-www-cn-ki-net\"><a href=\"#iData-https-www-cn-ki-net\" class=\"headerlink\" title=\"iData(https://www.cn-ki.net/)\"></a>iData(<a href=\"https://www.cn-ki.net/\">https://www.cn-ki.net/</a>)</h5><p>直接注册便可使用，缺点就是每天只能下载几篇吧</p>\n<h5 id=\"80图书馆-官网-http-www-80lib-com-知网-http-www-80lib-com-cnki\"><a href=\"#80图书馆-官网-http-www-80lib-com-知网-http-www-80lib-com-cnki\" class=\"headerlink\" title=\"80图书馆(官网:http://www.80lib.com/ 知网:http://www.80lib.com/cnki/)\"></a>80图书馆(官网:<a href=\"http://www.80lib.com/\">http://www.80lib.com/</a> 知网:<a href=\"http://www.80lib.com/cnki/\">http://www.80lib.com/cnki/</a>)</h5><p>优点是无限篇下载，缺点就是只有三天试用，不过应该可以换个邮箱再注册。还有个缺点就是使用相对麻烦，需要使用谷歌浏览器以及对应的插件，不过好在官网都提供了详细的步骤，这里不再赘述。</p>\n<h5 id=\"科研通-www-ablesci-com\"><a href=\"#科研通-www-ablesci-com\" class=\"headerlink\" title=\"科研通(www.ablesci.com)\"></a>科研通(<a href=\"http://www.ablesci.com/\">www.ablesci.com</a>)</h5><p>类似于百度文献互助</p>\n<h5 id=\"百度文献互助-备用\"><a href=\"#百度文献互助-备用\" class=\"headerlink\" title=\"百度文献互助(备用)\"></a>百度文献互助(备用)</h5><p>缺点每天两篇，时间长，还不一定成功。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvoor91h0002cmso70ff10qf","category_id":"ckvoor91p0004cmso2txv4nbb","_id":"ckvoor922000ecmso77y41i69"},{"post_id":"ckvoor91m0003cmsobx2a9cs8","category_id":"ckvoor91x0009cmsoague2pr6","_id":"ckvoor927000kcmso1htf4pj1"},{"post_id":"ckvoor91s0006cmsodyr6hsap","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor92h000rcmsobhgm5cm2"},{"post_id":"ckvoor92c000ncmso0oj67xve","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor92l000wcmsocazs6k46"},{"post_id":"ckvoor91u0007cmsoe5kv6pxt","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor92n000zcmso2ug3bvgt"},{"post_id":"ckvoor91w0008cmso08r5an5m","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor92q0014cmso6bcs67fo"},{"post_id":"ckvoor91z000ccmso2zougbyk","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor92x0019cmso5sylbr7s"},{"post_id":"ckvoor921000dcmsoawdj83tp","category_id":"ckvoor923000fcmsogyp23uzq","_id":"ckvoor936001ccmso8a4r4rea"},{"post_id":"ckvoor924000hcmsochvmbh66","category_id":"ckvoor92w0018cmso2jxg8zyo","_id":"ckvoor93b001hcmso6yaz048x"},{"post_id":"ckvoor925000jcmsoc5gu14zq","category_id":"ckvoor92w0018cmso2jxg8zyo","_id":"ckvoor93d001kcmsocky11xws"},{"post_id":"ckvoor92e000pcmsodxxp92r7","category_id":"ckvoor93a001gcmso5i2r9xx3","_id":"ckvoor93h001pcmso7gbs37gf"},{"post_id":"ckvoor92i000tcmsoald416a6","category_id":"ckvoor93a001gcmso5i2r9xx3","_id":"ckvoor93k001scmsobykd4glc"},{"post_id":"ckvoor92k000vcmso6me0b5fz","category_id":"ckvoor93h001ocmso08mdcgzw","_id":"ckvoor93n001wcmso28ikfwew"},{"post_id":"ckvoor92m000ycmso221sf6u7","category_id":"ckvoor93l001tcmsodnmlgs2u","_id":"ckvoor93p0021cmsogxe3d05n"},{"post_id":"ckvoor92p0012cmsob1irg6bx","category_id":"ckvoor92w0018cmso2jxg8zyo","_id":"ckvoor93q0024cmso7wp98fev"},{"post_id":"ckvoor92r0015cmso6ryu8uhk","category_id":"ckvoor92w0018cmso2jxg8zyo","_id":"ckvoor93r0027cmso52036pt9"}],"PostTag":[{"post_id":"ckvoor91h0002cmso70ff10qf","tag_id":"ckvoor91r0005cmsobzj91jd3","_id":"ckvoor91z000bcmsob1xugeke"},{"post_id":"ckvoor91m0003cmsobx2a9cs8","tag_id":"ckvoor91y000acmso57hy97wt","_id":"ckvoor925000icmsodddd35x0"},{"post_id":"ckvoor91s0006cmsodyr6hsap","tag_id":"ckvoor923000gcmso5venddmn","_id":"ckvoor92d000ocmso93zs8b2v"},{"post_id":"ckvoor91u0007cmsoe5kv6pxt","tag_id":"ckvoor929000mcmso4ubzfvka","_id":"ckvoor92k000ucmsoahr936kp"},{"post_id":"ckvoor91w0008cmso08r5an5m","tag_id":"ckvoor92i000scmso06x0cwpi","_id":"ckvoor92p0011cmso436u98pe"},{"post_id":"ckvoor91z000ccmso2zougbyk","tag_id":"ckvoor929000mcmso4ubzfvka","_id":"ckvoor92v0017cmso247xcab0"},{"post_id":"ckvoor921000dcmsoawdj83tp","tag_id":"ckvoor929000mcmso4ubzfvka","_id":"ckvoor935001bcmso1etjhkbo"},{"post_id":"ckvoor924000hcmsochvmbh66","tag_id":"ckvoor92x001acmso3x8cex64","_id":"ckvoor939001fcmsohg0d2aqo"},{"post_id":"ckvoor925000jcmsoc5gu14zq","tag_id":"ckvoor938001ecmso90k12qke","_id":"ckvoor93d001jcmso92sx10qt"},{"post_id":"ckvoor92c000ncmso0oj67xve","tag_id":"ckvoor93c001icmsogquk33sk","_id":"ckvoor93g001ncmso110s9bcc"},{"post_id":"ckvoor92e000pcmsodxxp92r7","tag_id":"ckvoor93c001icmsogquk33sk","_id":"ckvoor93k001rcmso1z3h3wu6"},{"post_id":"ckvoor92i000tcmsoald416a6","tag_id":"ckvoor93c001icmsogquk33sk","_id":"ckvoor93n001vcmso1qc70ps5"},{"post_id":"ckvoor92k000vcmso6me0b5fz","tag_id":"ckvoor93m001ucmsoglk57fa6","_id":"ckvoor93o001zcmso9htj9nei"},{"post_id":"ckvoor92m000ycmso221sf6u7","tag_id":"ckvoor93o001ycmso8osuee14","_id":"ckvoor93q0023cmsockgyesc5"},{"post_id":"ckvoor92p0012cmsob1irg6bx","tag_id":"ckvoor93p0022cmsoam9z8v56","_id":"ckvoor93r0026cmsohs0y4k7x"},{"post_id":"ckvoor92r0015cmso6ryu8uhk","tag_id":"ckvoor92x001acmso3x8cex64","_id":"ckvoor93s0028cmso4ed1dwrc"}],"Tag":[{"name":"Linux","_id":"ckvoor91r0005cmsobzj91jd3"},{"name":"MongoDB","_id":"ckvoor91y000acmso57hy97wt"},{"name":"Pyecharts","_id":"ckvoor923000gcmso5venddmn"},{"name":"Python","_id":"ckvoor929000mcmso4ubzfvka"},{"name":"Pytorch","_id":"ckvoor92i000scmso06x0cwpi"},{"name":"TroubleShoot","_id":"ckvoor92x001acmso3x8cex64"},{"name":"薅羊毛","_id":"ckvoor938001ecmso90k12qke"},{"name":"玩","_id":"ckvoor93c001icmsogquk33sk"},{"name":"核酸检测","_id":"ckvoor93m001ucmsoglk57fa6"},{"name":"划水摸鱼","_id":"ckvoor93o001ycmso8osuee14"},{"name":"科学上网","_id":"ckvoor93p0022cmsoam9z8v56"}]}}